;; Object paraview/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "paraview/"
  :tables
  (list
    (semanticdb-table "collaboration.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"collaboration is a helper module useful for handling synchronisation
in multi-client configuration as well as providing other collaboration
related methods

A simple example:
  from paraview import collaboration

  collaboration.processServerEvents()
\"\"\"" code nil nil [1 259])
            ("vtk" include nil nil [832 868])
            ("sys" include nil nil [832 868])
            ("types" include nil nil [832 868])
            ("re" include nil nil [832 868])
            ("paraview" include nil nil [832 868])
            ("simple" include nil nil [869 882])
            ("paraview" include nil nil [883 917])
            ("paraview.vtk" include nil nil [919 969])
            ("paraview.vtk" include nil nil [970 1017])
            ("paraview.vtk" include nil nil [1018 1072])
            ("paraview.vtk" include nil nil [1073 1111])
            ("processServerEvents" function (:documentation "Update the local state based on the notifications received from the server
  that have been generated by other clients.") nil [1113 1554]))          
      :file "collaboration.py"
      :pointmax 1554
      :fsize 1553
      :lastmodtime '(22546 35181 391231 335000)
      :unmatched-syntax nil)
    (semanticdb-table "simple.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"simple is a module for using paraview server manager in Python. It
provides a simple convenience layer to functionality provided by the
C++ classes wrapped to Python as well as the servermanager module.

A simple example::

  from paraview.simple import *

  # Create a new sphere proxy on the active connection and register it
  # in the sources group.
  sphere = Sphere(ThetaResolution=16, PhiResolution=32)

  # Apply a shrink filter
  shrink = Shrink(sphere)

  # Turn the visiblity of the shrink object on.
  Show(shrink)

  # Render the scene
  Render()

\"\"\"" code nil nil [1 569])
            ("__future__" include nil nil [1135 1173])
            ("__future__" include nil nil [1174 1205])
            ("__future__" include nil nil [1206 1243])
            ("paraview" include nil nil [1245 1260])
            ("paraview" include nil nil [1261 1295])
            ("paraview._backwardscompatibilityhelper" include nil nil [1296 1341])
            ("paraview.servermanager" include nil nil [1380 1425])
            ("GetParaViewVersion" function (:documentation "Returns the version of the ParaView build") nil [1428 1666])
            ("GetParaViewSourceVersion" function (:documentation "Returns the paraview source version string e.g.
    'paraview version x.x.x, Date: YYYY-MM-DD'.") nil [1666 1874])
            ("Disconnect" function
               (:documentation "Free the current active session"
                :arguments 
                  ( ("ns" variable nil (reparse-symbol function_parameters) [2087 2089])
                    ("force" variable nil (reparse-symbol function_parameters) [2096 2101]))                  )
                nil [2072 2651])
            ("Connect" function
               (:documentation "Creates a connection to a server. Example usage::

    > Connect(\"amber\") # Connect to a single server at default port
    > Connect(\"amber\", 12345) # Connect to a single server at port 12345
    > Connect(\"amber\", 11111, \"vis_cluster\", 11111) # connect to data server, render server pair"
                :arguments 
                  ( ("ds_host" variable nil (reparse-symbol function_parameters) [2745 2752])
                    ("ds_port" variable nil (reparse-symbol function_parameters) [2759 2766])
                    ("rs_host" variable nil (reparse-symbol function_parameters) [2774 2781])
                    ("rs_port" variable nil (reparse-symbol function_parameters) [2788 2795]))                  )
                nil [2733 3298])
            ("ReverseConnect" function
               (:documentation "Create a reverse connection to a server.  Listens on port and waits for
    an incoming connection from the server."
                :arguments 
                  ( ("port" variable nil (reparse-symbol function_parameters) [3399 3403]))                  )
                nil [3380 3710])
            ("SetActiveConnection" function
               (:documentation "Set the active connection. If the process was run without multi-server
       enabled and this method is called with a non-None argument while an
       ActiveConnection is present, it will raise a RuntimeError."
                :arguments 
                  ( ("connection" variable nil (reparse-symbol function_parameters) [3912 3922])
                    ("ns" variable nil (reparse-symbol function_parameters) [3929 3931]))                  )
                nil [3888 4363])
            ("CreateView" function
               (:documentation "Creates and returns the specified proxy view based on its name/label.
    If detachedFromLayout is true, the view will no be grabbed by the layout
    hence not visible unless it is attached after. This also set params keywords
    arguments as view properties."
                :arguments 
                  ( ("view_xml_name" variable nil (reparse-symbol function_parameters) [4566 4579])
                    ("detachedFromLayout" variable nil (reparse-symbol function_parameters) [4581 4599])
                    ("params" variable nil (reparse-symbol function_parameters) [4607 4615]))                  )
                nil [4551 5936])
            ("CreateRenderView" function
               (:documentation "\"Create standard 3D render view.
    See CreateView for arguments documentation"
                :arguments 
                  ( ("detachedFromLayout" variable nil (reparse-symbol function_parameters) [6039 6057])
                    ("params" variable nil (reparse-symbol function_parameters) [6065 6073]))                  )
                nil [6018 6232])
            ("CreateXYPlotView" function
               (:documentation "Create XY plot Chart view.
    See CreateView for arguments documentation"
                :arguments 
                  ( ("detachedFromLayout" variable nil (reparse-symbol function_parameters) [6335 6353])
                    ("params" variable nil (reparse-symbol function_parameters) [6361 6369]))                  )
                nil [6314 6529])
            ("CreateBarChartView" function
               (:documentation "\"Create Bar Chart view.
    See CreateView for arguments documentation"
                :arguments 
                  ( ("detachedFromLayout" variable nil (reparse-symbol function_parameters) [6634 6652])
                    ("params" variable nil (reparse-symbol function_parameters) [6660 6668]))                  )
                nil [6611 6822])
            ("CreateComparativeRenderView" function
               (:documentation "\"Create Comparative view.
    See CreateView for arguments documentation"
                :arguments 
                  ( ("detachedFromLayout" variable nil (reparse-symbol function_parameters) [6936 6954])
                    ("params" variable nil (reparse-symbol function_parameters) [6962 6970]))                  )
                nil [6904 7133])
            ("CreateComparativeXYPlotView" function
               (:documentation "\"Create comparative XY plot Chart view.
    See CreateView for arguments documentation"
                :arguments 
                  ( ("detachedFromLayout" variable nil (reparse-symbol function_parameters) [7247 7265])
                    ("params" variable nil (reparse-symbol function_parameters) [7273 7281]))                  )
                nil [7215 7458])
            ("CreateComparativeBarChartView" function
               (:documentation "\"Create comparative Bar Chart view.
    See CreateView for arguments documentation"
                :arguments 
                  ( ("detachedFromLayout" variable nil (reparse-symbol function_parameters) [7574 7592])
                    ("params" variable nil (reparse-symbol function_parameters) [7600 7608]))                  )
                nil [7540 7783])
            ("CreateParallelCoordinatesChartView" function
               (:documentation "\"Create Parallele coordinate Chart view.
    See CreateView for arguments documentation"
                :arguments 
                  ( ("detachedFromLayout" variable nil (reparse-symbol function_parameters) [7904 7922])
                    ("params" variable nil (reparse-symbol function_parameters) [7930 7938]))                  )
                nil [7865 8103])
            ("Create2DRenderView" function
               (:documentation "\"Create the standard 3D render view with the 2D interaction mode turned ON.
    See CreateView for arguments documentation"
                :arguments 
                  ( ("detachedFromLayout" variable nil (reparse-symbol function_parameters) [8208 8226])
                    ("params" variable nil (reparse-symbol function_parameters) [8234 8242]))                  )
                nil [8185 8426])
            ("GetRenderView" function nil nil [8508 8932])
            ("GetRenderViews" function nil nil [9014 9120])
            ("GetViews" function
               (:documentation "Returns all views. If viewtype is specified, only the views of the
       specified type are returned"
                :arguments 
                  ( ("viewtype" variable nil (reparse-symbol function_parameters) [9134 9142]))                  )
                nil [9121 9518])
            ("SetViewProperties" function
               (:documentation "Sets one or more properties of the given view. If an argument
    is not provided, the active view is used. Pass a list of property_name=value
    pairs to this function to set property values. For example::

        SetProperties(Background=[1, 0, 0], UseImmediateMode=0)
    "
                :arguments 
                  ( ("view" variable nil (reparse-symbol function_parameters) [9622 9626])
                    ("params" variable nil (reparse-symbol function_parameters) [9633 9641]))                  )
                nil [9600 10018])
            ("Render" function
               (:documentation "Renders the given view (default value is active view)"
                :arguments 
                  ( ("view" variable nil (reparse-symbol function_parameters) [10111 10115]))                  )
                nil [10100 10860])
            ("RenderAllViews" function (:documentation "Render all views") nil [10941 11031])
            ("Interact" function
               (:documentation "Call this method to start interacting with a view. This method will
    block till the interaction is done. This method will simply return
    if the local process cannot support interactions."
                :arguments 
                  ( ("view" variable nil (reparse-symbol function_parameters) [11125 11129]))                  )
                nil [11112 12011])
            ("ResetCamera" function
               (:documentation "Resets the settings of the camera to preserver orientation but include
    the whole scene. If an argument is not provided, the active view is
    used."
                :arguments 
                  ( ("view" variable nil (reparse-symbol function_parameters) [12109 12113]))                  )
                nil [12093 12483])
            ("CreateLayout" function
               (:documentation "Create a new layout with no active view."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [12582 12586]))                  )
                nil [12565 12783])
            ("RemoveLayout" function
               (:documentation "Remove the provided layout, if none is provided,
    remove the layout containing the active view.
    If it is the last layout it will create a new
    one with the same name as the removed one."
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [12882 12887]))                  )
                nil [12865 13336])
            ("GetLayouts" function (:documentation "Returns the layout proxies on the active session.
    Layout proxies are used to place views in a grid.") nil [13418 13619])
            ("GetLayout" function
               (:documentation "Return the layout containing the give view, if any.
    If no view is specified, active view is used.
    "
                :arguments 
                  ( ("view" variable nil (reparse-symbol function_parameters) [13715 13719]))                  )
                nil [13701 14118])
            ("GetLayoutByName" function
               (:documentation "Return the first layout with the given name, if any."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [14139 14143]))                  )
                nil [14119 14340])
            ("GetViewsInLayout" function
               (:documentation "Returns a list of views in the given layout. If not layout is specified,
    the layout for the active view is used, if possible."
                :arguments 
                  ( ("layout" variable nil (reparse-symbol function_parameters) [14362 14368]))                  )
                nil [14341 14763])
            ("RemoveViewsAndLayouts" function nil nil [14845 15193])
            ("LoadState" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [15392 15400])
                ("connection" variable nil (reparse-symbol function_parameters) [15402 15412]))              ) nil [15378 15612])
            ("SaveState" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [15708 15716]))              ) nil [15694 15757])
            ("GetRepresentation" function
               (:documentation "\"Given a pipeline object and view, returns the corresponding representation object.
    If pipeline object and view are not specified, active objects are used."
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [15966 15971])
                    ("view" variable nil (reparse-symbol function_parameters) [15978 15982]))                  )
                nil [15944 16628])
            ("GetDisplayProperties" function
               (:documentation "\"Given a pipeline object and view, returns the corresponding representation object.
    If pipeline object and/or view are not specified, active objects are used."
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [16734 16739])
                    ("view" variable nil (reparse-symbol function_parameters) [16746 16750]))                  )
                nil [16709 16973])
            ("Show" function
               (:documentation "Turns the visibility of a given pipeline object on in the given view.
    If pipeline object and/or view are not specified, active objects are used."
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [17063 17068])
                    ("view" variable nil (reparse-symbol function_parameters) [17075 17079])
                    ("params" variable nil (reparse-symbol function_parameters) [17086 17094]))                  )
                nil [17054 17920])
            ("Hide" function
               (:documentation "Turns the visibility of a given pipeline object off in the given view.
    If pipeline object and/or view are not specified, active objects are used."
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [18010 18015])
                    ("view" variable nil (reparse-symbol function_parameters) [18022 18026]))                  )
                nil [18001 18516])
            ("HideAll" function
               (:documentation "Hide all pipeline sources in the given view.
    If view is not specified, active view is used."
                :arguments 
                  ( ("view" variable nil (reparse-symbol function_parameters) [18609 18613]))                  )
                nil [18597 18868])
            ("SetDisplayProperties" function
               (:documentation "Sets one or more display properties of the given pipeline object. If an argument
    is not provided, the active source is used. Pass a list of property_name=value
    pairs to this function to set property values. For example::

        SetProperties(Color=[1, 0, 0], LineWidth=2)
    "
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [18974 18979])
                    ("view" variable nil (reparse-symbol function_parameters) [18986 18990])
                    ("params" variable nil (reparse-symbol function_parameters) [18997 19005]))                  )
                nil [18949 19382])
            ("ColorBy" function
               (:documentation "Set scalar color. This will automatically setup the color maps and others
    necessary state for the representations. 'rep' must be the display
    properties proxy i.e. the value returned by GetDisplayProperties() function.
    If none is provided the display properties for the active source will be
    used, if possible."
                :arguments 
                  ( ("rep" variable nil (reparse-symbol function_parameters) [19475 19478])
                    ("value" variable nil (reparse-symbol function_parameters) [19485 19490]))                  )
                nil [19463 21599])
            ("_DisableFirstRenderCameraReset" function (:documentation "Disable the first render camera reset.  Normally a ResetCamera is called
    automatically when Render is called for the first time after importing
    this module.") nil [21680 21935])
            ("SetProperties" function
               (:documentation "Sets one or more properties of the given pipeline object. If an argument
    is not provided, the active source is used. Pass a list of property_name=value
    pairs to this function to set property values. For example::

        SetProperties(Center=[1, 2, 3], Radius=3.5)
    "
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [22140 22145])
                    ("params" variable nil (reparse-symbol function_parameters) [22152 22160]))                  )
                nil [22122 22693])
            ("GetProperty" function
               (:documentation "Get one property of the given pipeline object. If keywords are used,
       you can set the proxy and the name of the property that you want to get
       like in the following example::

            GetProperty({proxy=sphere, name=\"Radius\"})

       If it's arguments that are used, then you have two case:
         - if only one argument is used that argument will be
           the property name.
         - if two arguments are used then the first one will be
           the proxy and the second one the property name.
       Several example are given below::

           GetProperty({name=\"Radius\"})
           GetProperty({proxy=sphereProxy, name=\"Radius\"})
           GetProperty( sphereProxy, \"Radius\" )
           GetProperty( \"Radius\" )
    "
                :arguments 
                  ( ("arguments" variable nil (reparse-symbol function_parameters) [22791 22801])
                    ("keywords" variable nil (reparse-symbol function_parameters) [22803 22813]))                  )
                nil [22775 24151])
            ("GetDisplayProperty" function
               (:documentation "Same as GetProperty, except that if no 'proxy' is passed, it will use
    the active display properties, rather than the active source"
                :arguments 
                  ( ("arguments" variable nil (reparse-symbol function_parameters) [24255 24265])
                    ("keywords" variable nil (reparse-symbol function_parameters) [24267 24277]))                  )
                nil [24232 24840])
            ("GetViewProperty" function
               (:documentation "Same as GetProperty, except that if no 'proxy' is passed, it will use
    the active view properties, rather than the active source"
                :arguments 
                  ( ("arguments" variable nil (reparse-symbol function_parameters) [24941 24951])
                    ("keywords" variable nil (reparse-symbol function_parameters) [24953 24963]))                  )
                nil [24921 25520])
            ("GetViewProperties" function
               (:documentation "\"Same as GetActiveView(), this API is provided just for consistency with
    GetDisplayProperties()."
                :arguments 
                  ( ("view" variable nil (reparse-symbol function_parameters) [25623 25627]))                  )
                nil [25601 25773])
            ("RenameProxy" function
               (:documentation "Renames the given proxy."
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [25975 25980])
                    ("group" variable nil (reparse-symbol function_parameters) [25982 25987])
                    ("newName" variable nil (reparse-symbol function_parameters) [25989 25996]))                  )
                nil [25959 26253])
            ("RenameSource" function
               (:documentation "Renames the given source.  If the given proxy is not registered
    in the sources group this method will have no effect.  If no source is
    provided, the active source is used."
                :arguments 
                  ( ("newName" variable nil (reparse-symbol function_parameters) [26271 26278])
                    ("proxy" variable nil (reparse-symbol function_parameters) [26280 26285]))                  )
                nil [26254 26578])
            ("RenameView" function
               (:documentation "Renames the given view.  If the given proxy is not registered
    in the views group this method will have no effect.  If no view is
    provided, the active view is used."
                :arguments 
                  ( ("newName" variable nil (reparse-symbol function_parameters) [26594 26601])
                    ("proxy" variable nil (reparse-symbol function_parameters) [26603 26608]))                  )
                nil [26579 26889])
            ("RenameLayout" function
               (:documentation "Renames the given layout.  If the given proxy is not registered
    in the layout group this method will have no effect.  If no layout is
    provided, the active layout is used."
                :arguments 
                  ( ("newName" variable nil (reparse-symbol function_parameters) [26907 26914])
                    ("proxy" variable nil (reparse-symbol function_parameters) [26916 26921]))                  )
                nil [26890 27207])
            ("FindSource" function
               (:documentation "
    Return a proxy base on the name that was used to register it
    into the ProxyManager.
    Example usage::

       Cone(guiName='MySuperCone')
       Show()
       Render()
       myCone = FindSource('MySuperCone')
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [27304 27308]))                  )
                nil [27289 27613])
            ("FindView" function
               (:documentation "
    Return a view proxy on the name that was used to register it
    into the ProxyManager.
    Example usage::

       CreateRenderView(guiName='RenderView1')
       myView = FindSource('RenderView1')
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [27627 27631]))                  )
                nil [27614 27916])
            ("GetActiveViewOrCreate" function
               (:documentation "
    Returns the active view, if the active view is of the given type,
    otherwise creates a new view of the requested type."
                :arguments 
                  ( ("viewtype" variable nil (reparse-symbol function_parameters) [27944 27952]))                  )
                nil [27918 28316])
            ("FindViewOrCreate" function
               (:documentation "
    Returns the view, if a view with the given name exists and is of the
    the given type, otherwise creates a new view of the requested type."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [28338 28342])
                    ("viewtype" variable nil (reparse-symbol function_parameters) [28344 28352]))                  )
                nil [28317 28734])
            ("LocateView" function
               (:documentation "
    Given a displayProperties object i.e. the object returned by
    GetDisplayProperties() or Show() functions, this function will locate a view
    to which the displayProperties object corresponds."
                :arguments 
                  ( ("displayProperties" variable nil (reparse-symbol function_parameters) [28751 28768]))                  )
                nil [28736 29343])
            ("GetSources" function (:documentation "Given the name of a source, return its Python object.") nil [29427 29578])
            ("GetRepresentations" function (:documentation "Returns all representations (display properties).") nil [29660 29823])
            ("UpdatePipeline" function
               (:documentation "Updates (executes) the given pipeline object for the given time as
    necessary (i.e. if it did not already execute). If no source is provided,
    the active source is used instead."
                :arguments 
                  ( ("time" variable nil (reparse-symbol function_parameters) [29924 29928])
                    ("proxy" variable nil (reparse-symbol function_parameters) [29935 29940]))                  )
                nil [29905 30287])
            ("Delete" function
               (:documentation "Deletes the given pipeline object or the active source if no argument
    is specified."
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [30380 30385]))                  )
                nil [30369 30729])
            ("GetActiveView" function (:documentation ".. _GetActiveView:
        Returns the active view.") nil [30941 31055])
            ("SetActiveView" function
               (:documentation ".. _SetActiveView:
        Sets the active view."
                :arguments 
                  ( ("view" variable nil (reparse-symbol function_parameters) [31155 31159]))                  )
                nil [31137 31252])
            ("GetActiveSource" function (:documentation ".. _GetActiveSource:
        Returns the active source.") nil [31334 31456])
            ("SetActiveSource" function
               (:documentation ".. _SetActiveSource:
        Sets the active source."
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [31558 31564]))                  )
                nil [31538 31665])
            ("GetActiveCamera" function (:documentation "Returns the active camera for the active view. The returned object
    is an instance of vtkCamera.") nil [31747 31925])
            ("OpenDataFile" function
               (:documentation "Creates a reader to read the give file, if possible.
       This uses extension matching to determine the best reader possible.
       If a reader cannot be identified, then this returns None."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [32118 32126])
                    ("extraArgs" variable nil (reparse-symbol function_parameters) [32128 32139]))                  )
                nil [32101 33451])
            ("ReloadFiles" function
               (:documentation "Forces the `proxy` to reload the data files. If no `proxy` is provided,
    active source is used."
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [33548 33553]))                  )
                nil [33532 33820])
            ("ExtendFileSeries" function
               (:documentation "For a reader `proxy` that supports reading files series, detect any new files
    added to the series and update the reader's filename property.
    If no `proxy` is provided, active source is used."
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [33842 33847]))                  )
                nil [33821 34219])
            ("CreateWriter" function
               (:documentation "Creates a writer that can write the data produced by the source proxy in
       the given file format (identified by the extension). If no source is
       provided, then the active source is used. This doesn't actually write the
       data, it simply creates the writer and returns it."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [34317 34325])
                    ("proxy" variable nil (reparse-symbol function_parameters) [34327 34332])
                    ("extraArgs" variable nil (reparse-symbol function_parameters) [34339 34350]))                  )
                nil [34300 35381])
            ("SaveData" function
               (:documentation "Save data produced by 'proxy' in a file. If no proxy is specified the
    active source is used. Properties to configure the writer can be passed in
    as keyword arguments. Example usage::

        SaveData(\"sample.pvtp\", source0)
        SaveData(\"sample.csv\", FieldAssociation=\"Points\")
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [35396 35404])
                    ("proxy" variable nil (reparse-symbol function_parameters) [35406 35411])
                    ("extraArgs" variable nil (reparse-symbol function_parameters) [35418 35429]))                  )
                nil [35383 35973])
            ("WriteImage" function
               (:documentation "Saves the given view (or the active one if none is given) as an
    image. Optionally, you can specify the writer and the magnification
    using the Writer and Magnification named arguments. For example::

        WriteImage(\"foo.mypng\", aview, Writer=vtkPNGWriter, Magnification=2)

    If no writer is provided, the type is determined from the file extension.
    Currently supported extensions are png, bmp, ppm, tif, tiff, jpg and jpeg.
    The writer is a VTK class that is capable of writing images.
    Magnification is used to determine the size of the written image. The size
    is obtained by multiplying the size of the view with the magnification.
    Rendering may be done using tiling to obtain the correct size without
    resizing the view.

    ** DEPRECATED: Use SaveScreenshot() instead. **
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [36071 36079])
                    ("view" variable nil (reparse-symbol function_parameters) [36081 36085])
                    ("params" variable nil (reparse-symbol function_parameters) [36092 36100]))                  )
                nil [36056 37252])
            ("SaveScreenshot" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [37352 37360])
                ("view" variable nil (reparse-symbol function_parameters) [37366 37370])
                ("layout" variable nil (reparse-symbol function_parameters) [37377 37383])
                ("magnification" variable nil (reparse-symbol function_parameters) [37390 37403])
                ("quality" variable nil (reparse-symbol function_parameters) [37410 37417])
                ("params" variable nil (reparse-symbol function_parameters) [37424 37432]))              ) nil [37333 38126])
            ("WriteAnimation" function
               (:documentation "Writes the current animation as a file. Optionally one can specify
    arguments that qualify the saved animation files as keyword arguments.
    Accepted options are as follows:

    * **Magnification** *(integer)* : set the maginification factor for the saved
      animation.
    * **Quality** *(0 [worst] or 1 or 2 [best])* : set the quality of the generated
      movie (if applicable).
    * **Subsampling** *(integer)* : setting whether the movie encoder should use
      subsampling of the chrome planes or not, if applicable. Since the human
      eye is more sensitive to brightness than color variations, subsampling
      can be useful to reduce the bitrate. Default value is 0.
    * **BackgroundColor** *(3-tuple of doubles)* : set the RGB background color to
      use to fill empty spaces in the image.
    * **FrameRate** *(double)*: set the frame rate (if applicable).
    * **StartFileCount** *(int)*: set the first number used for the file name
      (23 => i.e. image-0023.png).
    * **PlaybackTimeWindow** *([double, double])*: set the time range that
      should be used to play a subset of the total animation time.
      (By default the whole application will play).
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [38227 38235])
                    ("params" variable nil (reparse-symbol function_parameters) [38237 38245]))                  )
                nil [38208 40126])
            ("WriteAnimationGeometry" function
               (:documentation "Save the animation geometry from a specific view to a file specified.
    The animation geometry is written out as a PVD file. If no view is
    specified, the active view will be used of possible."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [40154 40162])
                    ("view" variable nil (reparse-symbol function_parameters) [40164 40168]))                  )
                nil [40127 40735])
            ("HideUnusedScalarBars" function
               (:documentation "Hides all unused scalar bars from the view. A scalar bar is used if some
    data is shown in that view that is coloring using the transfer function
    shown by the scalar bar."
                :arguments 
                  ( ("view" variable nil (reparse-symbol function_parameters) [41036 41040]))                  )
                nil [41011 41528])
            ("HideScalarBarIfNotNeeded" function
               (:documentation "Hides the given scalar bar if it is not used by any of the displayed data."
                :arguments 
                  ( ("lut" variable nil (reparse-symbol function_parameters) [41558 41561])
                    ("view" variable nil (reparse-symbol function_parameters) [41563 41567]))                  )
                nil [41529 41939])
            ("UpdateScalarBars" function
               (:documentation "Hides all unused scalar bar and shows used scalar bars. A scalar bar is used
    if some data is shown in that view that is coloring using the transfer function
    shown by the scalar bar."
                :arguments 
                  ( ("view" variable nil (reparse-symbol function_parameters) [41962 41966]))                  )
                nil [41941 42496])
            ("GetScalarBar" function
               (:documentation "Returns the scalar bar for color transfer function in the given view.
    If view is None, the active view will be used, if possible.
    This will either return an existing scalar bar or create a new one."
                :arguments 
                  ( ("ctf" variable nil (reparse-symbol function_parameters) [42514 42517])
                    ("view" variable nil (reparse-symbol function_parameters) [42519 42523]))                  )
                nil [42497 43081])
            ("GetColorTransferFunction" function
               (:documentation "Get the color transfer function used to mapping a data array with the
    given name to colors. This may create a new color transfer function
    if none exists, or return an existing one"
                :arguments 
                  ( ("arrayname" variable nil (reparse-symbol function_parameters) [43191 43200])
                    ("params" variable nil (reparse-symbol function_parameters) [43202 43210]))                  )
                nil [43162 43793])
            ("GetOpacityTransferFunction" function
               (:documentation "Get the opacity transfer function used to mapping a data array with the
    given name to opacity. This may create a new opacity transfer function
    if none exists, or return an existing one"
                :arguments 
                  ( ("arrayname" variable nil (reparse-symbol function_parameters) [43825 43834])
                    ("params" variable nil (reparse-symbol function_parameters) [43836 43844]))                  )
                nil [43794 44434])
            ("ImportPresets" function
               (:documentation "Import presets from a file. The file can be in the legacy color map xml
    format or in the new JSON format. Returns True on success."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [44533 44541]))                  )
                nil [44515 44791])
            ("CreateLookupTable" function
               (:documentation "Create and return a lookup table.  Optionally, parameters can be given
    to assign to the lookup table.
    "
                :arguments 
                  ( ("params" variable nil (reparse-symbol function_parameters) [44894 44902]))                  )
                nil [44872 45270])
            ("CreatePiecewiseFunction" function
               (:documentation "Create and return a piecewise function.  Optionally, parameters can be
    given to assign to the piecewise function.
    "
                :arguments 
                  ( ("params" variable nil (reparse-symbol function_parameters) [45380 45388]))                  )
                nil [45352 45794])
            ("GetLookupTableForArray" function
               (:documentation "Used to get an existing lookuptable for a array or to create one if none
    exists. Keyword arguments can be passed in to initialize the LUT if a new
    one is created.
    *** DEPRECATED ***: Use GetColorTransferFunction instead"
                :arguments 
                  ( ("arrayname" variable nil (reparse-symbol function_parameters) [45903 45912])
                    ("num_components" variable nil (reparse-symbol function_parameters) [45914 45928])
                    ("params" variable nil (reparse-symbol function_parameters) [45930 45938]))                  )
                nil [45876 46240])
            ("_lutReader" variable nil nil [46365 46382])
            ("_GetLUTReaderInstance" function (:documentation " Internal api. Return the lookup table reader singleton. Create
    it if needed.") nil [46383 46648])
            ("AssignLookupTable" function
               (:documentation "Assign a lookup table to an array by lookup table name. The array
    may ber obtained from a ParaView source in it's point or cell data.
    The lookup tables available in ParaView's GUI are loaded by default.
    To get a list of the available lookup table names see GetLookupTableNames.
    To load a custom lookup table see LoadLookupTable."
                :arguments 
                  ( ("arrayObject" variable nil (reparse-symbol function_parameters) [46752 46763])
                    ("LUTName" variable nil (reparse-symbol function_parameters) [46765 46772])
                    ("rangeOveride" variable nil (reparse-symbol function_parameters) [46774 46786]))                  )
                nil [46730 47225])
            ("GetLookupTableNames" function (:documentation "Return a list containing the currently available lookup table names.
    A name maybe used to assign a lookup table to an array. See
    AssignLookupTable.
    ") nil [47307 47554])
            ("LoadLookupTable" function
               (:documentation "Read the lookup tables in the named file and append them to the
    global collection of lookup tables. The newly loaded lookup tables
    may then be used with AssignLookupTable function.
    "
                :arguments 
                  ( ("fileName" variable nil (reparse-symbol function_parameters) [47656 47664]))                  )
                nil [47636 47921])
            ("CreateScalarBar" function
               (:documentation "Create and return a scalar bar widget.  The returned widget may
    be added to a render view by appending it to the view's representations
    The widget must have a valid lookup table before it is added to a view.
    It is possible to pass the lookup table (and other properties) as arguments
    to this method::

        lt = MakeBlueToRedLt(3.5, 7.5)
        bar = CreateScalarBar(LookupTable=lt, Title=\"Velocity\")
        GetRenderView().Representations.append(bar)

    By default the returned widget is selectable and resizable.
    "
                :arguments 
                  ( ("params" variable nil (reparse-symbol function_parameters) [48023 48031]))                  )
                nil [48003 48816])
            ("MakeBlueToRedLT" function
               (:documentation "
    Create a LookupTable that go from blue to red using the scalar range
    provided by the min and max arguments.
    "
                :arguments 
                  ( ("min" variable nil (reparse-symbol function_parameters) [49037 49040])
                    ("max" variable nil (reparse-symbol function_parameters) [49042 49045]))                  )
                nil [49017 49414])
            ("AddCameraLink" function
               (:documentation "Create a camera link between two view proxies.  A name must be given
    so that the link can be referred to by name.  If a link with the given
    name already exists it will be removed first."
                :arguments 
                  ( ("viewProxy" variable nil (reparse-symbol function_parameters) [49615 49624])
                    ("viewProxyOther" variable nil (reparse-symbol function_parameters) [49626 49640])
                    ("linkName" variable nil (reparse-symbol function_parameters) [49642 49650]))                  )
                nil [49597 50247])
            ("RemoveCameraLink" function
               (:documentation "Remove a camera link with the given name."
                :arguments 
                  ( ("linkName" variable nil (reparse-symbol function_parameters) [50350 50358]))                  )
                nil [50329 50471])
            ("GetTimeKeeper" function (:documentation "Returns the time-keeper for the active session. Timekeeper is often used
    to manage time step information known to the ParaView application.") nil [50653 51084])
            ("GetAnimationScene" function (:documentation "Returns the application-wide animation scene. ParaView has only one
    global animation scene. This method provides access to that. Users are
    free to create additional animation scenes directly, but those scenes
    won't be shown in the ParaView GUI.") nil [51085 51636])
            ("AnimateReader" function
               (:documentation "This is a utility function that, given a reader and a view
    animates over all time steps of the reader. If the optional
    filename is provided, a movie is created (type depends on the
    extension of the filename."
                :arguments 
                  ( ("reader" variable nil (reparse-symbol function_parameters) [51736 51742])
                    ("view" variable nil (reparse-symbol function_parameters) [51749 51753])
                    ("filename" variable nil (reparse-symbol function_parameters) [51760 51768]))                  )
                nil [51718 52180])
            ("_GetRepresentationAnimationHelper" function
               (:documentation "Internal method that returns the representation animation helper for a
       source proxy. It creates a new one if none exists."
                :arguments 
                  ( ("sourceproxy" variable nil (reparse-symbol function_parameters) [52300 52311]))                  )
                nil [52262 52868])
            ("GetAnimationTrack" function
               (:documentation "Returns an animation cue for the property. If one doesn't exist then a
    new one will be created.
    Typical usage::

      track = GetAnimationTrack(\"Center\", 0, sphere) or
      track = GetAnimationTrack(sphere.GetProperty(\"Radius\")) or

      # this returns the track to animate visibility of the active source in
      # all views.
      track = GetAnimationTrack(\"Visibility\")

    For animating properties on implicit planes etc., use the following
    signatures::

      track = GetAnimationTrack(slice.SliceType.GetProperty(\"Origin\"), 0) or
      track = GetAnimationTrack(\"Origin\", 0, slice.SliceType)
    "
                :arguments 
                  ( ("propertyname_or_property" variable nil (reparse-symbol function_parameters) [52972 52996])
                    ("index" variable nil (reparse-symbol function_parameters) [52998 53003])
                    ("proxy" variable nil (reparse-symbol function_parameters) [53010 53015]))                  )
                nil [52950 55233])
            ("GetCameraTrack" function
               (:documentation "Returns the camera animation track for the given view. If no view is
    specified, active view will be used. If no exisiting camera animation track
    is found, a new one will be created."
                :arguments 
                  ( ("view" variable nil (reparse-symbol function_parameters) [55334 55338]))                  )
                nil [55315 55979])
            ("GetTimeTrack" function (:documentation "Returns the animation track used to control the time requested from all
    readers/filters during playback.
    This is the \"TimeKeeper - Time\" track shown in ParaView's 'Animation View'.") nil [56061 56496])
            ("LoadXML" function
               (:documentation "Given a server manager XML as a string, parse and process it.
    If you loaded the simple module with from paraview.simple import *,
    make sure to pass globals() as the second arguments:
    LoadXML(xmlstring, globals())
    Otherwise, the new functions will not appear in the global namespace."
                :arguments 
                  ( ("xmlstring" variable nil (reparse-symbol function_parameters) [56690 56699])
                    ("ns" variable nil (reparse-symbol function_parameters) [56701 56703]))                  )
                nil [56678 57118])
            ("LoadPlugin" function
               (:documentation "Loads a ParaView plugin and updates this module with new constructors
    if any. The remote argument (default to True) is to specify whether
    the plugin will be loaded on client (remote=False) or on server (remote=True).
    If you loaded the simple module with from paraview.simple import *,
    make sure to pass globals() as an argument::

        LoadPlugin(\"myplugin\", False, globals()) # to load on client
        LoadPlugin(\"myplugin\", True, globals())  # to load on server
        LoadPlugin(\"myplugin\", ns=globals())     # to load on server

    Otherwise, the new functions will not appear in the global namespace."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [57215 57223])
                    ("remote" variable nil (reparse-symbol function_parameters) [57225 57231])
                    ("ns" variable nil (reparse-symbol function_parameters) [57238 57240]))                  )
                nil [57200 57996])
            ("LoadDistributedPlugin" function
               (:documentation "Loads a plugin that's distributed with the executable. This uses the
    information known about plugins distributed with ParaView to locate the
    shared library for the plugin to load. Raises a RuntimeError if the plugin
    was not found."
                :arguments 
                  ( ("pluginname" variable nil (reparse-symbol function_parameters) [58104 58114])
                    ("remote" variable nil (reparse-symbol function_parameters) [58116 58122])
                    ("ns" variable nil (reparse-symbol function_parameters) [58129 58131]))                  )
                nil [58078 58989])
            ("LoadCustomFilters" function
               (:documentation "Loads a custom filter XML file and updates this module with new
    constructors if any.
    If you loaded the simple module with from paraview.simple import *,
    make sure to pass globals() as an argument."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [59200 59208])
                    ("ns" variable nil (reparse-symbol function_parameters) [59210 59212]))                  )
                nil [59178 59585])
            ("_select" function (:arguments 
              ( ("seltype" variable nil (reparse-symbol function_parameters) [59781 59788])
                ("query" variable nil (reparse-symbol function_parameters) [59790 59795])
                ("proxy" variable nil (reparse-symbol function_parameters) [59802 59807]))              ) nil [59769 60328])
            ("SelectCells" function
               (:documentation "Select cells satisfying the query. If query is None, then all cells are
    selected. If proxy is None, then the active source is used."
                :arguments 
                  ( ("query" variable nil (reparse-symbol function_parameters) [60426 60431])
                    ("proxy" variable nil (reparse-symbol function_parameters) [60438 60443]))                  )
                nil [60410 60638])
            ("SelectPoints" function
               (:documentation "Select points satisfying the query. If query is None, then all points are
    selected. If proxy is None, then the active source is used."
                :arguments 
                  ( ("query" variable nil (reparse-symbol function_parameters) [60737 60742])
                    ("proxy" variable nil (reparse-symbol function_parameters) [60749 60754]))                  )
                nil [60720 60952])
            ("ClearSelection" function
               (:documentation "Clears the selection on the active source."
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [61053 61058]))                  )
                nil [61034 61305])
            ("Show3DWidgets" function
               (:documentation "If possible in the current environment, this method will
    request the application to show the 3D widget(s) for proxy"
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [61511 61516]))                  )
                nil [61493 61857])
            ("Hide3DWidgets" function
               (:documentation "If possible in the current environment, this method will
    request the application to hide the 3D widget(s) for proxy"
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [61876 61881]))                  )
                nil [61858 62222])
            ("_Invoke3DWidgetUserEvent" function
               (:documentation "Internal method used by Show3DWidgets/Hide3DWidgets"
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [62252 62257])
                    ("event" variable nil (reparse-symbol function_parameters) [62259 62264]))                  )
                nil [62223 62896])
            ("ExportView" function
               (:documentation "Export a view to the specified output file."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [62912 62920])
                    ("view" variable nil (reparse-symbol function_parameters) [62922 62926])
                    ("params" variable nil (reparse-symbol function_parameters) [62933 62941]))                  )
                nil [62897 63633])
            ("demo1" function (:documentation "
    Simple demo that create the following pipeline::

       sphere - shrink +
       cone            + > append

    ") nil [63821 64578])
            ("demo2" function
               (:documentation "This demo shows the use of readers, data information and display
    properties."
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [64670 64675]))                  )
                nil [64660 66546])
            ("_initializeSession" function
               (:documentation "Internal method used to initialize a session. Users don't need to
    call this directly. Whenever a new session is created this method is called
    by API in this module."
                :arguments 
                  ( ("connection" variable nil (reparse-symbol function_parameters) [66759 66769]))                  )
                nil [66736 67150])
            ("_create_func" function (:arguments 
              ( ("key" variable nil (reparse-symbol function_parameters) [67168 67171])
                ("module" variable nil (reparse-symbol function_parameters) [67173 67179])
                ("skipRegisteration" variable nil (reparse-symbol function_parameters) [67181 67198]))              ) nil [67151 69707])
            ("_create_doc" function (:arguments 
              ( ("new" variable nil (reparse-symbol function_parameters) [69805 69808])
                ("old" variable nil (reparse-symbol function_parameters) [69810 69813]))              ) nil [69789 70025])
            ("_func_name_valid" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [70128 70132]))              ) nil [70107 70289])
            ("_add_functions" function (:arguments 
              ( ("g" variable nil (reparse-symbol function_parameters) [70390 70391]))              ) nil [70371 71155])
            ("_get_generated_proxies" function nil nil [71237 71681])
            ("_remove_functions" function (:arguments 
              ( ("g" variable nil (reparse-symbol function_parameters) [71784 71785]))              ) nil [71762 72155])
            ("_find_writer" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [72304 72312]))              ) nil [72287 72969])
            ("_switchToActiveConnectionCallback" function
               (:documentation "Callback called when the active session/connection changes in the
        ServerManager. We update the Python state to reflect the change."
                :arguments 
                  ( ("caller" variable nil (reparse-symbol function_parameters) [73089 73095])
                    ("event" variable nil (reparse-symbol function_parameters) [73097 73102]))                  )
                nil [73051 73472])
            ("_active_session_observer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("pxm" variable nil (reparse-symbol indented_block_body) [73724 73779])
                            ("self" variable nil (reparse-symbol indented_block_body) [73788 73895]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73709 73713]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [73696 73896])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73913 73917]))                          )
                        (reparse-symbol indented_block_body) [73901 74041]))                  
                :type "class")
                nil [73660 74041])
            ("_active_objects" type
               (:documentation "This class manages the active objects (source and view). The active
    objects are shared between Python and the user interface. This class
    is for internal use. Use the :ref:`SetActiveSource`,
    :ref:`GetActiveSource`, :ref:`SetActiveView`, and :ref:`GetActiveView`
    methods for setting and getting active objects."
                :superclasses ("object")
                :members 
                  ( ("__get_selection_model" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74519 74523])
                            ("name" variable nil (reparse-symbol function_parameters) [74525 74529])
                            ("session" variable nil (reparse-symbol function_parameters) [74531 74538]))                          )
                        (reparse-symbol indented_block_body) [74493 74992])
                    ("set_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75010 75014])
                            ("view" variable nil (reparse-symbol function_parameters) [75016 75020]))                          )
                        (reparse-symbol indented_block_body) [74997 75536])
                    ("get_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75554 75558]))                          )
                        (reparse-symbol indented_block_body) [75541 75710])
                    ("set_source" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75730 75734])
                            ("source" variable nil (reparse-symbol function_parameters) [75736 75742]))                          )
                        (reparse-symbol indented_block_body) [75715 76332])
                    ("__convert_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76357 76361])
                            ("px" variable nil (reparse-symbol function_parameters) [76363 76365]))                          )
                        (reparse-symbol indented_block_body) [76337 76680])
                    ("get_source" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76700 76704]))                          )
                        (reparse-symbol indented_block_body) [76685 76854])
                    ("get_selected_sources" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76884 76888]))                          )
                        (reparse-symbol indented_block_body) [76859 77203])
                    ("view" variable nil (reparse-symbol indented_block_body) [77208 77243])
                    ("source" variable nil (reparse-symbol indented_block_body) [77248 77289]))                  
                :type "class")
                nil [74123 77290])
            ("_funcs_internals" type
               (:members 
                  ( ("\"Internal class.\"" code nil (reparse-symbol indented_block_body) [77400 77417])
                    ("first_render" variable nil (reparse-symbol indented_block_body) [77422 77441]))                  
                :type "class")
                nil [77372 77442])
            ("active_session_observer" variable nil nil [77657 77709])
            ("if" code nil nil [77711 77800])
            ("active_objects" variable nil nil [77801 77835]))          
      :file "simple.py"
      :pointmax 77836
      :fsize 77835
      :lastmodtime '(22546 35181 395231 246000)
      :unmatched-syntax '((NAME 63002 . 63006) (IF 63014 . 63016) (ELSE 63022 . 63026) (NAME 62023 . 62028) (IF 62037 . 62039) (ELSE 62046 . 62050) (NAME 61658 . 61663) (IF 61672 . 61674) (ELSE 61681 . 61685) (NAME 42751 . 42755) (IF 42763 . 42765) (ELSE 42771 . 42775) (NAME 40388 . 40392) (IF 40400 . 40402) (ELSE 40408 . 40412) (NAME 37775 . 37788) (IF 37810 . 37812) (ELSE 37836 . 37840) (NAME 37602 . 37614) (IF 37630 . 37632) (ELSE 37646 . 37650) (NAME 37558 . 37570) (IF 37578 . 37580) (ELSE 37586 . 37590) (NAME 19838 . 19841) (IF 19848 . 19850) (ELSE 19855 . 19859) (NAME 14520 . 14526) (IF 14536 . 14538) (ELSE 14546 . 14550)))
    (semanticdb-table "servermanager.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"servermanager is a module for using paraview server manager in Python.
One can always use the server manager API directly. However, this module
provides an interface easier to use from Python by wrapping several VTK
classes around Python classes.

Note that, upon load, this module will create several sub-modules: sources,
filters and rendering. These modules can be used to instantiate specific
proxy types. For a list, try \"dir(servermanager.sources)\"

Usually users should use the paraview.simple module instead as it provide a
more user friendly API.

A simple example::

  from paraview.servermanager import *

  # Creates a new built-in session and makes it the active session.
  Connect()

  # Creates a new render view on the active session.
  renModule = CreateRenderView()

  # Create a new sphere proxy on the active session and register it
  # in the sources group.
  sphere = sources.SphereSource(registrationGroup=\"sources\", ThetaResolution=16, PhiResolution=32)

  # Create a representation for the sphere proxy and adds it to the render
  # module.
  display = CreateRepresentation(sphere, renModule)

  renModule.StillRender()

\"\"\"" code nil nil [1 1154])
            ("__future__" include nil nil [1725 1762])
            ("atexit" include nil nil [1763 1815])
            ("sys" include nil nil [1763 1815])
            ("types" include nil nil [1763 1815])
            ("os.path" include nil nil [1763 1815])
            ("os" include nil nil [1763 1815])
            ("re" include nil nil [1763 1815])
            ("paraview" include nil nil [1763 1815])
            ("paraview" include nil nil [1891 1915])
            ("paraview" include nil nil [1916 1973])
            ("vtk.vtkPVServerImplementationCore" include nil nil [1975 2022])
            ("vtk.vtkPVClientServerCoreCore" include nil nil [2023 2066])
            ("vtk.vtkPVServerManagerCore" include nil nil [2067 2107])
            ("try" code nil nil [2109 2241])
            ("try" code nil nil [2241 2377])
            ("try" code nil nil [2377 2517])
            ("try" code nil nil [2517 2627])
            ("vtk.vtkPVCommon" include nil nil [2627 2656])
            ("_wrap_property" function
               (:documentation " Internal function.
    Given a server manager property and its domains, returns the
    appropriate python object.
    "
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [2677 2682])
                    ("smproperty" variable nil (reparse-symbol function_parameters) [2684 2694]))                  )
                nil [2658 4875])
            ("ParaViewPipelineController" type
               (:documentation "ParaViewPipelineController wraps vtkSMParaViewPipelineController class
    to manage conversion of arguments passed around from Pyhton Proxy objects to
    vtkSMProxy instances are vice-versa."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Constructor. Creates a new instance of
        vtkSMParaViewPipelineController.\"\"\"" code nil (reparse-symbol indented_block_body) [5153 5238])
                            ("self" variable nil (reparse-symbol indented_block_body) [5247 5300]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5138 5142]))                          
                        :documentation "Constructor. Creates a new instance of
        vtkSMParaViewPipelineController."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5125 5301])
                    ("__ConvertArgumentsAndCall" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5336 5340])
                            ("args" variable nil (reparse-symbol function_parameters) [5342 5347]))                          )
                        (reparse-symbol indented_block_body) [5306 6163])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6184 6188])
                            ("name" variable nil (reparse-symbol function_parameters) [6190 6194]))                          
                        :documentation "Returns attribute from the ParaViewPipelineController.")
                        (reparse-symbol indented_block_body) [6168 6503]))                  
                :type "class")
                nil [4876 6503])
            ("Proxy" type
               (:documentation "Proxy for a server side object. A proxy manages the lifetime of
    one or more server manager objects. It also provides an interface
    to set and get the properties of the server side objects. These
    properties are presented as Python properties. For example,
    you can set a property Foo using the following::

       proxy.Foo = (1,2)

    or

       proxy.Foo.SetData((1,2))

    or

       proxy.Foo[0:2] = (1,2)

    For more information, see the documentation of the property which
    you can obtain with
    help(proxy.Foo).

    This class also provides an iterator which can be used to iterate
    over all properties.
    eg::

        proxy = Proxy(proxy=smproxy)
        for property in proxy:
            print (property)


    For advanced users:
    This is a python class that wraps a vtkSMProxy.. Makes it easier to
    set/get properties.
    Instead of::

        proxy.GetProperty(\"Foo\").SetElement(0, 1)
        proxy.GetProperty(\"Foo\").SetElement(0, 2)

    you can do::

        proxy.Foo = (1,2)

    or

        proxy.Foo.SetData((1,2))

    or

        proxy.Foo[0:2] = (1,2)

    Instead of::

        proxy.GetProperty(\"Foo\").GetElement(0)

    you can do::

        proxy.Foo.GetData()[0]

    or

        proxy.Foo[0]

    For proxy properties, you can use append:
     proxy.GetProperty(\"Bar\").AddProxy(foo)
    you can do:
     proxy.Bar.append(foo)
    Properties support most of the list API. See VectorProperty and
    ProxyProperty documentation for details.

    Please note that some of the methods accessible through the Proxy
    class are not listed by help() because the Proxy objects forward
    unresolved attributes to the underlying object. To get the full list,
    see also dir(proxy.SMProxy). See also the doxygen based documentation
    of the vtkSMProxy C++ class.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\" Default constructor. It can be used to initialize properties
        by passing keyword arguments where the key is the name of the
        property. In addition registrationGroup and registrationName (optional)
        can be specified (as keyword arguments) to automatically register
        the proxy with the proxy manager. \"\"\"" code nil (reparse-symbol indented_block_body) [8406 8740])
                            ("self" code nil (reparse-symbol indented_block_body) [8749 8785])
                            ("self" code nil (reparse-symbol indented_block_body) [8794 8831])
                            ("self" code nil (reparse-symbol indented_block_body) [8840 8884])
                            ("self" code nil (reparse-symbol indented_block_body) [8893 8941])
                            ("self" code nil (reparse-symbol indented_block_body) [8950 8985])
                            ("self" code nil (reparse-symbol indented_block_body) [8994 9023])
                            ("if" code nil (reparse-symbol indented_block_body) [9033 9118])
                            ("update" variable nil (reparse-symbol indented_block_body) [9127 9140])
                            ("if" code nil (reparse-symbol indented_block_body) [9149 9272])
                            ("if" code nil (reparse-symbol indented_block_body) [9281 9439])
                            ("if" code nil (reparse-symbol indented_block_body) [9447 9907])
                            ("if" code nil (reparse-symbol indented_block_body) [9915 9962])
                            ("for" code nil (reparse-symbol indented_block_body) [9970 10036])
                            ("for" code nil (reparse-symbol indented_block_body) [10100 10135]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8383 8387])
                            ("args" variable nil (reparse-symbol function_parameters) [8389 8395]))                          
                        :documentation " Default constructor. It can be used to initialize properties
        by passing keyword arguments where the key is the name of the
        property. In addition registrationGroup and registrationName (optional)
        can be specified (as keyword arguments) to automatically register
        the proxy with the proxy manager. "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8370 10135])
                    ("__setattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10156 10160])
                            ("name" variable nil (reparse-symbol function_parameters) [10162 10166])
                            ("value" variable nil (reparse-symbol function_parameters) [10168 10173]))                          )
                        (reparse-symbol indented_block_body) [10140 11536])
                    ("add_attribute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11559 11563])
                            ("name" variable nil (reparse-symbol function_parameters) [11565 11569])
                            ("value" variable nil (reparse-symbol function_parameters) [11571 11576]))                          )
                        (reparse-symbol indented_block_body) [11541 11615])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11632 11636]))                          
                        :documentation "Destructor. Cleans up all observers as well as remove
        the proxy from the _pyproxies dictionary")
                        (reparse-symbol indented_block_body) [11620 12154])
                    ("InitializeFromProxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12183 12187])
                            ("aProxy" variable nil (reparse-symbol function_parameters) [12189 12195])
                            ("update" variable nil (reparse-symbol function_parameters) [12197 12203]))                          
                        :documentation "Constructor. Assigns proxy to self.SMProxy, updates the server
        object as well as register the proxy in _pyproxies dictionary.")
                        (reparse-symbol indented_block_body) [12159 12541])
                    ("Initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12561 12565]))                          )
                        (reparse-symbol indented_block_body) [12546 12640])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12656 12660])
                            ("other" variable nil (reparse-symbol function_parameters) [12662 12667]))                          )
                        (reparse-symbol indented_block_body) [12645 12993])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13009 13013])
                            ("other" variable nil (reparse-symbol function_parameters) [13015 13020]))                          )
                        (reparse-symbol indented_block_body) [12998 13127])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13145 13149]))                          )
                        (reparse-symbol indented_block_body) [13132 13240])
                    ("SetPropertyWithName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13269 13273])
                            ("pname" variable nil (reparse-symbol function_parameters) [13275 13280])
                            ("arg" variable nil (reparse-symbol function_parameters) [13282 13285]))                          
                        :documentation "Generic method for setting the value of a property.")
                        (reparse-symbol indented_block_body) [13245 13557])
                    ("GetPropertyValue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13583 13587])
                            ("name" variable nil (reparse-symbol function_parameters) [13589 13593]))                          
                        :documentation "Returns a scalar for properties with 1 elements, the property
        itself for vectors.")
                        (reparse-symbol indented_block_body) [13562 14598])
                    ("GetProperty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14619 14623])
                            ("name" variable nil (reparse-symbol function_parameters) [14625 14629]))                          
                        :documentation "Given a property name, returns the property object.")
                        (reparse-symbol indented_block_body) [14603 15427])
                    ("ListProperties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15451 15455]))                          
                        :documentation "Returns a list of all property names on this proxy.")
                        (reparse-symbol indented_block_body) [15432 15761])
                    ("__ConvertArgumentsAndCall" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15796 15800])
                            ("args" variable nil (reparse-symbol function_parameters) [15802 15807]))                          
                        :documentation " Internal function.
        Used to call a function on SMProxy. Converts input and
        output values as appropriate.
        ")
                        (reparse-symbol indented_block_body) [15766 16477])
                    ("__GetActiveCamera" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16504 16508]))                          
                        :documentation " This method handles GetActiveCamera specially. It adds
        an observer to the camera such that everytime it is modified
        the render view updated")
                        (reparse-symbol indented_block_body) [16482 16979])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17000 17004])
                            ("name" variable nil (reparse-symbol function_parameters) [17006 17010]))                          
                        :documentation "With the exception of a few overloaded methods,
        returns the SMProxy method")
                        (reparse-symbol indented_block_body) [16984 18081]))                  
                :type "class")
                nil [6504 18081])
            ("SourceProxy" type
               (:documentation "Proxy for a source object. This class adds a few methods to Proxy
    that are specific to sources. It also provides access to the output
    ports. Output ports can be accessed by name or index:
    > op = source[0]
    or
    > op = source['some name'].
    "
                :superclasses ("Proxy")
                :members 
                  ( ("UpdatePipeline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18402 18406])
                            ("time" variable nil (reparse-symbol function_parameters) [18408 18412]))                          
                        :documentation "This method updates the server-side VTK pipeline and the associated
        data information. Make sure to update a source to validate the output
        meta-data.")
                        (reparse-symbol indented_block_body) [18383 18937])
                    ("FileNameChanged" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18962 18966]))                          )
                        (reparse-symbol indented_block_body) [18942 19075])
                    ("UpdatePipelineInformation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19110 19114]))                          
                        :documentation "This method updates the meta-data of the server-side VTK pipeline and
        the associated information properties")
                        (reparse-symbol indented_block_body) [19080 19296])
                    ("GetDataInformation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19324 19328])
                            ("idx" variable nil (reparse-symbol function_parameters) [19330 19333]))                          
                        :documentation "This method returns a DataInformation wrapper around a
        vtkPVDataInformation")
                        (reparse-symbol indented_block_body) [19301 19645])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19666 19670])
                            ("idx" variable nil (reparse-symbol function_parameters) [19672 19675]))                          
                        :documentation "Given a slice, int or string, returns the corresponding
        output port")
                        (reparse-symbol indented_block_body) [19650 20284])
                    ("GetPointDataInformation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20317 20321]))                          
                        :documentation "Returns the associated point data information.")
                        (reparse-symbol indented_block_body) [20289 20489])
                    ("GetCellDataInformation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20521 20525]))                          
                        :documentation "Returns the associated cell data information.")
                        (reparse-symbol indented_block_body) [20494 20691])
                    ("GetFieldDataInformation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20724 20728]))                          
                        :documentation "Returns the associated cell data information.")
                        (reparse-symbol indented_block_body) [20696 20895])
                    ("PointData" variable nil (reparse-symbol indented_block_body) [20900 20991])
                    ("CellData" variable nil (reparse-symbol indented_block_body) [20996 21084])
                    ("FieldData" variable nil (reparse-symbol indented_block_body) [21089 21180]))                  
                :type "class")
                nil [18082 21181])
            ("ExodusIIReaderProxy" type
               (:documentation "Special class to define convenience functions for array
    selection."
                :superclasses ("SourceProxy")
                :members 
                  ( ("if" code nil (reparse-symbol indented_block_body) [21309 22131]))                  
                :type "class")
                nil [21183 22131])
            ("ViewLayoutProxy" type
               (:documentation "Special class to define convenience methods for View Layout"
                :superclasses ("Proxy")
                :members 
                  ( ("SplitViewHorizontal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22261 22265])
                            ("view" variable nil (reparse-symbol function_parameters) [22267 22271])
                            ("fraction" variable nil (reparse-symbol function_parameters) [22273 22281]))                          
                        :documentation "Split the cell containing the specified view horizontally.
        If no fraction is specified, the frame is split into equal parts.
        On success returns a positve number that identifying the new cell
        location that can be used to assign view to, or split further.
        Return -1 on failure.")
                        (reparse-symbol indented_block_body) [22237 22941])
                    ("SplitViewVertical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22968 22972])
                            ("view" variable nil (reparse-symbol function_parameters) [22974 22978])
                            ("fraction" variable nil (reparse-symbol function_parameters) [22985 22993]))                          
                        :documentation "Split the cell containing the specified view horizontally.
        If no view is specified, active view is used.
        If no fraction is specified, the frame is split into equal parts.
        On success returns a positve number that identifying the new cell
        location that can be used to assign view to, or split further.
        Return -1 on failure.")
                        (reparse-symbol indented_block_body) [22946 23705])
                    ("AssignView" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23725 23729])
                            ("location" variable nil (reparse-symbol function_parameters) [23731 23739])
                            ("view" variable nil (reparse-symbol function_parameters) [23741 23745]))                          
                        :documentation "Assign a view at a particular location. Note that the view's position may
        be changed by subsequent Split() calls. Returns true on success.")
                        (reparse-symbol indented_block_body) [23710 24057])
                    ("GetViewLocation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24082 24086])
                            ("view" variable nil (reparse-symbol function_parameters) [24088 24092]))                          )
                        (reparse-symbol indented_block_body) [24062 24213]))                  
                :type "class")
                nil [22132 24213])
            ("Property" type
               (:documentation "Generic property object that provides access to one of the properties of
    a server object. This class does not allow setting/getting any values but
    provides an interface to update a property using __call__. This can be used
    for command properties that correspond to function calls without arguments.
    For example,
    > proxy.Foo()
    would push a Foo property which may cause the proxy to call a Foo method
    on the actual VTK object.

    For advanced users:
    Python wrapper around a vtkSMProperty with a simple interface.
    In addition to all method provided by vtkSMProperty (obtained by
    forwarding unknown attributes requests to the underlying SMProxy),
    Property and sub-class provide a list API.

    Please note that some of the methods accessible through the Property
    class are not listed by help() because the Property objects forward
    unresolved attributes to the underlying object. To get the full list,
    see also dir(proxy.SMProperty). See also the doxygen based documentation
    of the vtkSMProperty C++ class.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Default constructor. Stores a reference to the proxy.\"\"\"" code nil (reparse-symbol indented_block_body) [25369 25428])
                            ("weakref" include nil (reparse-symbol indented_block_body) [25437 25451])
                            ("self" variable nil (reparse-symbol indented_block_body) [25460 25488])
                            ("self" variable nil (reparse-symbol indented_block_body) [25497 25515]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25335 25339])
                            ("proxy" variable nil (reparse-symbol function_parameters) [25341 25346])
                            ("smproperty" variable nil (reparse-symbol function_parameters) [25348 25358]))                          
                        :documentation "Default constructor. Stores a reference to the proxy."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25322 25516])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25534 25538]))                          
                        :documentation "Returns a string representation containing property name
        and value")
                        (reparse-symbol indented_block_body) [25521 26046])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26064 26068]))                          
                        :documentation "Forces a property update using InvokeCommand.")
                        (reparse-symbol indented_block_body) [26051 26314])
                    ("_FindPropertyName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26341 26345]))                          )
                        (reparse-symbol indented_block_body) [26319 26452])
                    ("_UpdateProperty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26477 26481]))                          )
                        (reparse-symbol indented_block_body) [26457 27031])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27052 27056])
                            ("name" variable nil (reparse-symbol function_parameters) [27058 27062]))                          )
                        (reparse-symbol indented_block_body) [27036 27177])
                    ("Name" variable nil (reparse-symbol indented_block_body) [27182 27276]))                  
                :type "class")
                nil [24214 27277])
            ("GenericIterator" type
               (:documentation "Iterator for container type objects"
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [27393 27410])
                            ("self" variable nil (reparse-symbol indented_block_body) [27419 27433]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27373 27377])
                            ("obj" variable nil (reparse-symbol function_parameters) [27379 27382]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27360 27434])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27452 27456]))                          )
                        (reparse-symbol indented_block_body) [27439 27479])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27493 27497]))                          )
                        (reparse-symbol indented_block_body) [27484 27657])
                    ("__next__" variable nil (reparse-symbol indented_block_body) [27661 27676]))                  
                :type "class")
                nil [27278 27704])
            ("VectorProperty" type
               (:documentation "A VectorProperty provides access to one or more values. You can use
    a slice to get one or more property values:
    > val = property[2]
    or
    > vals = property[0:5:2]
    You can use a slice to set one or more property values:
    > property[2] = val
    or
    > property[1:3] = (1,2)
    "
                :superclasses ("Property")
                :members 
                  ( ("ConvertValue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28068 28072])
                            ("value" variable nil (reparse-symbol function_parameters) [28074 28079]))                          )
                        (reparse-symbol indented_block_body) [28051 28103])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28120 28124]))                          
                        :documentation "Returns the number of elements.")
                        (reparse-symbol indented_block_body) [28108 28226])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28244 28248]))                          
                        :documentation "Implementation of the sequence API")
                        (reparse-symbol indented_block_body) [28231 28337])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28358 28362])
                            ("idx" variable nil (reparse-symbol function_parameters) [28364 28367])
                            ("value" variable nil (reparse-symbol function_parameters) [28369 28374]))                          
                        :documentation "Given a list or tuple of values, sets a slice of values [min, max)")
                        (reparse-symbol indented_block_body) [28342 28884])
                    ("GetElement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28904 28908])
                            ("index" variable nil (reparse-symbol function_parameters) [28910 28915]))                          )
                        (reparse-symbol indented_block_body) [28889 28967])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28988 28992])
                            ("idx" variable nil (reparse-symbol function_parameters) [28994 28997]))                          
                        :documentation "Returns the range [min, max) of elements. Raises an IndexError
        exception if an argument is out of bounds.")
                        (reparse-symbol indented_block_body) [28972 29557])
                    ("GetData" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29574 29578]))                          )
                        (reparse-symbol indented_block_body) [29562 29896])
                    ("SetData" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29913 29917])
                            ("values" variable nil (reparse-symbol function_parameters) [29919 29925]))                          
                        :documentation "Allows setting of all values at once. Requires a single value or
        a iterable object.")
                        (reparse-symbol indented_block_body) [29901 31124])
                    ("Clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31139 31143]))                          )
                        (reparse-symbol indented_block_body) [31129 31258]))                  
                :type "class")
                nil [27705 31258])
            ("DoubleMapProperty" type
               (:documentation "A DoubleMapProperty provides access to a map of double vector values."
                :superclasses ("Property")
                :members 
                  ( ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31391 31395]))                          
                        :documentation "Returns the number of elements.")
                        (reparse-symbol indented_block_body) [31379 31497])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31518 31522])
                            ("key" variable nil (reparse-symbol function_parameters) [31524 31527]))                          
                        :documentation "Returns the values for key.")
                        (reparse-symbol indented_block_body) [31502 31607])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31628 31632])
                            ("key" variable nil (reparse-symbol function_parameters) [31634 31637])
                            ("values" variable nil (reparse-symbol function_parameters) [31639 31645]))                          
                        :documentation "Sets the values for key.")
                        (reparse-symbol indented_block_body) [31612 31824])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31846 31850])
                            ("key" variable nil (reparse-symbol function_parameters) [31852 31855]))                          
                        :documentation "Returns True if the property contains key.")
                        (reparse-symbol indented_block_body) [31829 31949])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31963 31967]))                          
                        :documentation "Returns the keys.")
                        (reparse-symbol indented_block_body) [31954 32039])
                    ("GetData" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32056 32060]))                          
                        :documentation "Returns all the elements as a dictionary")
                        (reparse-symbol indented_block_body) [32044 32485])
                    ("SetData" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32502 32506])
                            ("elements" variable nil (reparse-symbol function_parameters) [32508 32516]))                          
                        :documentation "Sets all the elements at once.")
                        (reparse-symbol indented_block_body) [32490 32814])
                    ("Clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32829 32833]))                          
                        :documentation "Removes all elements.")
                        (reparse-symbol indented_block_body) [32819 32943]))                  
                :type "class")
                nil [31259 32943])
            ("EnumerationProperty" type
               (:documentation "Subclass of VectorProperty that is applicable for enumeration type
    properties."
                :superclasses ("VectorProperty")
                :members 
                  ( ("GetElement" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33100 33104])
                            ("index" variable nil (reparse-symbol function_parameters) [33106 33111]))                          
                        :documentation "Returns the text for the given element if available. Returns
        the numerical values otherwise.")
                        (reparse-symbol indented_block_body) [33085 33570])
                    ("ConvertValue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33592 33596])
                            ("value" variable nil (reparse-symbol function_parameters) [33598 33603]))                          
                        :documentation "Converts value to type suitable for vtSMProperty::SetElement()")
                        (reparse-symbol indented_block_body) [33575 34098])
                    ("GetAvailable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34120 34124]))                          )
                        (reparse-symbol indented_block_body) [34103 34465])
                    ("Available" variable nil (reparse-symbol indented_block_body) [34470 34619]))                  
                :type "class")
                nil [32944 34620])
            ("FileNameProperty" type
               (:documentation "Property to set/get one or more file names.
    This property updates the pipeline information everytime its value changes.
    This is used to keep the array lists up to date."
                :superclasses ("VectorProperty")
                :members 
                  ( ("_UpdateProperty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34874 34878]))                          )
                        (reparse-symbol indented_block_body) [34854 35022]))                  
                :type "class")
                nil [34622 35022])
            ("ArraySelectionProperty" type
               (:superclasses ("VectorProperty")
                :members 
                  ( ("\"Property to select an array to be processed by a filter.\"" code nil (reparse-symbol indented_block_body) [35073 35131])
                    ("GetAssociation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35156 35160]))                          )
                        (reparse-symbol indented_block_body) [35137 35290])
                    ("GetArrayName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35312 35316]))                          )
                        (reparse-symbol indented_block_body) [35295 35353])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35370 35374]))                          
                        :documentation "Returns the number of elements.")
                        (reparse-symbol indented_block_body) [35358 35440])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35461 35465])
                            ("idx" variable nil (reparse-symbol function_parameters) [35467 35470])
                            ("value" variable nil (reparse-symbol function_parameters) [35472 35477]))                          )
                        (reparse-symbol indented_block_body) [35445 35562])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35583 35587])
                            ("idx" variable nil (reparse-symbol function_parameters) [35589 35592]))                          
                        :documentation "Returns attribute type for index 0, array name for index 1")
                        (reparse-symbol indented_block_body) [35567 36249])
                    ("SetData" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36266 36270])
                            ("values" variable nil (reparse-symbol function_parameters) [36272 36278]))                          
                        :documentation "Allows setting of all values at once. Requires a single value,
        a tuple or list.")
                        (reparse-symbol indented_block_body) [36254 37305])
                    ("UpdateDefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37328 37332]))                          )
                        (reparse-symbol indented_block_body) [37310 37729]))                  
                :type "class")
                nil [35023 37729])
            ("ArrayListProperty" type
               (:documentation "This property provides a simpler interface for selecting arrays.
    Simply assign a list of arrays that should be loaded by the reader.
    Use the Available property to get a list of available arrays."
                :superclasses ("VectorProperty")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("VectorProperty" code nil (reparse-symbol indented_block_body) [38036 38084])
                            ("self" variable nil (reparse-symbol indented_block_body) [38093 38111]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38002 38006])
                            ("proxy" variable nil (reparse-symbol function_parameters) [38008 38013])
                            ("smproperty" variable nil (reparse-symbol function_parameters) [38015 38025]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37989 38112])
                    ("GetAvailable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38134 38138]))                          )
                        (reparse-symbol indented_block_body) [38117 38364])
                    ("Available" variable nil (reparse-symbol indented_block_body) [38369 38509])
                    ("SelectAll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38529 38533]))                          )
                        (reparse-symbol indented_block_body) [38515 38603])
                    ("DeselectAll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38624 38628]))                          )
                        (reparse-symbol indented_block_body) [38608 38688])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38706 38710]))                          
                        :documentation "Implementation of the sequence API")
                        (reparse-symbol indented_block_body) [38693 38799])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38816 38820]))                          
                        :documentation "Returns the number of elements.")
                        (reparse-symbol indented_block_body) [38804 38904])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38925 38929])
                            ("idx" variable nil (reparse-symbol function_parameters) [38931 38934])
                            ("value" variable nil (reparse-symbol function_parameters) [38936 38941]))                          
                        :documentation "Given a list or tuple of values, sets a slice of values [min, max)")
                        (reparse-symbol indented_block_body) [38909 39417])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39438 39442])
                            ("idx" variable nil (reparse-symbol function_parameters) [39444 39447]))                          
                        :documentation "Returns the range [min, max) of elements. Raises an IndexError
      exception if an argument is out of bounds.")
                        (reparse-symbol indented_block_body) [39422 39898])
                    ("SetData" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39915 39919])
                            ("values" variable nil (reparse-symbol function_parameters) [39921 39927]))                          
                        :documentation "Allows setting of all values at once. Requires a single value,
        a tuple or list.")
                        (reparse-symbol indented_block_body) [39903 41292])
                    ("GetData" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41309 41313]))                          )
                        (reparse-symbol indented_block_body) [41297 41801]))                  
                :type "class")
                nil [37730 41801])
            ("ProxyProperty" type
               (:documentation "A ProxyProperty provides access to one or more proxies. You can use
    a slice to get one or more property values:
    > proxy = property[2]
    or
    > proxies = property[0:5:2]
    You can use a slice to set one or more property values:
    > property[2] = proxy
    or
    > property[1:3] = (proxy1, proxy2)
    You can also append and delete:
    > property.append(proxy)
    and
    > del property[1:2]

    You can also remove all elements with Clear().

    Note that some properties expect only 1 proxy and will complain if
    you set the number of values to be something else.
    "
                :superclasses ("Property")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Default constructor.  Stores a reference to the proxy.  Also looks
        at domains to find valid values.\"\"\"" code nil (reparse-symbol indented_block_body) [42488 42601])
                            ("Property" code nil (reparse-symbol indented_block_body) [42610 42652])
                            ("listdomain" variable nil (reparse-symbol indented_block_body) [42793 42834])
                            ("if" code nil (reparse-symbol indented_block_body) [42843 43623]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42454 42458])
                            ("proxy" variable nil (reparse-symbol function_parameters) [42460 42465])
                            ("smproperty" variable nil (reparse-symbol function_parameters) [42467 42477]))                          
                        :documentation "Default constructor.  Stores a reference to the proxy.  Also looks
        at domains to find valid values."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42441 43623])
                    ("GetAvailable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43645 43649]))                          
                        :documentation "If this proxy has a list domain, then this function returns the
        strings you can use to select from the domain.  If there is no such
        list domain, the returned list is empty.")
                        (reparse-symbol indented_block_body) [43628 44129])
                    ("Available" variable nil (reparse-symbol indented_block_body) [44134 44405])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44424 44428]))                          
                        :documentation "Implementation of the sequence API")
                        (reparse-symbol indented_block_body) [44411 44517])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44534 44538]))                          
                        :documentation "Returns the number of elements.")
                        (reparse-symbol indented_block_body) [44522 44639])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44655 44659])
                            ("proxy" variable nil (reparse-symbol function_parameters) [44661 44666]))                          
                        :documentation "Removes the first occurence of the proxy from the property.")
                        (reparse-symbol indented_block_body) [44644 44825])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44846 44850])
                            ("idx" variable nil (reparse-symbol function_parameters) [44852 44855])
                            ("value" variable nil (reparse-symbol function_parameters) [44857 44862]))                          
                        :documentation "Given a list or tuple of values, sets a slice of values [min, max)")
                        (reparse-symbol indented_block_body) [44830 45308])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45329 45333])
                            ("idx" variable nil (reparse-symbol function_parameters) [45334 45337]))                          
                        :documentation "Removes the element idx")
                        (reparse-symbol indented_block_body) [45313 45957])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45978 45982])
                            ("idx" variable nil (reparse-symbol function_parameters) [45984 45987]))                          
                        :documentation "Returns the range [min, max) of elements. Raises an IndexError
      exception if an argument is out of bounds.")
                        (reparse-symbol indented_block_body) [45962 46451])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46472 46476])
                            ("name" variable nil (reparse-symbol function_parameters) [46478 46482]))                          )
                        (reparse-symbol indented_block_body) [46456 46597])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46612 46616])
                            ("proxy" variable nil (reparse-symbol function_parameters) [46618 46623]))                          )
                        (reparse-symbol indented_block_body) [46602 46796])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46812 46816])
                            ("proxy" variable nil (reparse-symbol function_parameters) [46818 46823]))                          )
                        (reparse-symbol indented_block_body) [46801 46963])
                    ("GetData" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46980 46984]))                          )
                        (reparse-symbol indented_block_body) [46968 47341])
                    ("SetData" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47358 47362])
                            ("values" variable nil (reparse-symbol function_parameters) [47364 47370]))                          
                        :documentation "Allows setting of all values at once. Requires a single value,
        a tuple or list.")
                        (reparse-symbol indented_block_body) [47346 48194])
                    ("Clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48209 48213]))                          )
                        (reparse-symbol indented_block_body) [48199 48322]))                  
                :type "class")
                nil [41802 48322])
            ("InputProperty" type
               (:documentation "An InputProperty allows making pipeline connections. You can set either
    a source proxy or an OutputProperty to an input property:

    > property[0] = proxy
    or
    > property[0] = OuputPort(proxy, 1)

    > property.append(proxy)
    or
    > property.append(OutputPort(proxy, 0))
    "
                :superclasses ("ProxyProperty")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48683 48687])
                            ("idx" variable nil (reparse-symbol function_parameters) [48689 48692])
                            ("value" variable nil (reparse-symbol function_parameters) [48694 48699]))                          
                        :documentation "Given a list or tuple of values, sets a slice of values [min, max)")
                        (reparse-symbol indented_block_body) [48667 49215])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49236 49240])
                            ("idx" variable nil (reparse-symbol function_parameters) [49242 49245]))                          
                        :documentation "Returns the range [min, max) of elements. Raises an IndexError
      exception if an argument is out of bounds.")
                        (reparse-symbol indented_block_body) [49220 49987])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50003 50007])
                            ("value" variable nil (reparse-symbol function_parameters) [50009 50014]))                          
                        :documentation "Appends the given proxy to the property values.
        Accepts Proxy or OutputPort objects.")
                        (reparse-symbol indented_block_body) [49992 50225])
                    ("GetData" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50242 50246]))                          
                        :documentation "Returns all elements as either a list of OutputPort objects or
        a single OutputPort object.")
                        (reparse-symbol indented_block_body) [50230 50743])
                    ("SetData" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50760 50764])
                            ("values" variable nil (reparse-symbol function_parameters) [50766 50772]))                          
                        :documentation "Allows setting of all values at once. Requires a single value,
        a tuple or list. Accepts Proxy or OutputPort objects.")
                        (reparse-symbol indented_block_body) [50748 51339])
                    ("_UpdateProperty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51364 51368]))                          )
                        (reparse-symbol indented_block_body) [51344 51638]))                  
                :type "class")
                nil [48323 51638])
            ("DataInformation" type
               (:documentation "DataInformation is a contained for meta-data associated with an
    output data.

    DataInformation is a python wrapper around a vtkPVDataInformation.
    In addition to proving all methods of a vtkPVDataInformation, it provides
    a few convenience methods.

    Please note that some of the methods accessible through the DataInformation
    class are not listed by help() because the DataInformation objects forward
    unresolved attributes to the underlying object. To get the full list,
    see also dir(proxy.DataInformation).
    See also the doxygen based documentation of the vtkPVDataInformation C++
    class.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Default constructor. Requires a vtkPVDataInformation, a source proxy
        and an output port id.\"\"\"" code nil (reparse-symbol indented_block_body) [52372 52477])
                            ("self" variable nil (reparse-symbol indented_block_body) [52486 52524])
                            ("self" variable nil (reparse-symbol indented_block_body) [52533 52551])
                            ("self" variable nil (reparse-symbol indented_block_body) [52560 52574]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52328 52332])
                            ("dataInformation" variable nil (reparse-symbol function_parameters) [52334 52349])
                            ("proxy" variable nil (reparse-symbol function_parameters) [52351 52356])
                            ("idx" variable nil (reparse-symbol function_parameters) [52358 52361]))                          
                        :documentation "Default constructor. Requires a vtkPVDataInformation, a source proxy
        and an output port id."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52315 52575])
                    ("Update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52591 52595]))                          
                        :documentation "****Deprecated**** There is no reason anymore to use this method
        explicitly, it is called automatically when one gets any value from the
        data information object.
        Update the data information if necessary. Note that this
        does not cause execution of the underlying object. In certain
        cases, you may have to call UpdatePipeline() on the proxy.")
                        (reparse-symbol indented_block_body) [52580 53067])
                    ("GetDataSetType" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53091 53095]))                          
                        :documentation "Returns the dataset type as defined in vtkDataObjectTypes.")
                        (reparse-symbol indented_block_body) [53072 53481])
                    ("GetDataSetTypeAsString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53513 53517]))                          
                        :documentation "Returns the dataset type as a user-friendly string. This is
        not the same as the enumaration used by VTK")
                        (reparse-symbol indented_block_body) [53486 53730])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53751 53755])
                            ("name" variable nil (reparse-symbol function_parameters) [53757 53761]))                          
                        :documentation "Forwards unknown attribute requests to the underlying
        vtkPVInformation.")
                        (reparse-symbol indented_block_body) [53735 54061]))                  
                :type "class")
                nil [51640 54061])
            ("ArrayInformation" type
               (:documentation "Meta-information associated with an array. Use the Name
    attribute to get the array name.

    Please note that some of the methods accessible through the ArrayInformation
    class are not listed by help() because the ArrayInformation objects forward
    unresolved attributes to the underlying object.
    See the doxygen based documentation of the vtkPVArrayInformation C++
    class for a full list.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [54568 54586])
                            ("self" variable nil (reparse-symbol indented_block_body) [54595 54617])
                            ("self" variable nil (reparse-symbol indented_block_body) [54626 54642]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54533 54537])
                            ("proxy" variable nil (reparse-symbol function_parameters) [54539 54544])
                            ("field" variable nil (reparse-symbol function_parameters) [54546 54551])
                            ("name" variable nil (reparse-symbol function_parameters) [54553 54557]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [54520 54643])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54664 54668])
                            ("name" variable nil (reparse-symbol function_parameters) [54670 54674]))                          
                        :documentation "Forward unknown methods to vtkPVArrayInformation")
                        (reparse-symbol indented_block_body) [54648 54887])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54905 54909]))                          
                        :documentation "Returns a user-friendly representation string.")
                        (reparse-symbol indented_block_body) [54892 55010])
                    ("GetRange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55028 55032])
                            ("component" variable nil (reparse-symbol function_parameters) [55034 55043]))                          
                        :documentation "Given a component, returns its value range as a tuple of 2 values.")
                        (reparse-symbol indented_block_body) [55015 55293])
                    ("if" code nil (reparse-symbol indented_block_body) [55298 55425]))                  
                :type "class")
                nil [54062 55425])
            ("FieldDataInformationIterator" type
               (:documentation "Iterator for FieldDataInformation"
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [55566 55598])
                            ("self" variable nil (reparse-symbol indented_block_body) [55607 55621])
                            ("self" variable nil (reparse-symbol indented_block_body) [55630 55648]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55532 55536])
                            ("info" variable nil (reparse-symbol function_parameters) [55538 55542])
                            ("items" variable nil (reparse-symbol function_parameters) [55544 55549]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [55519 55649])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55667 55671]))                          )
                        (reparse-symbol indented_block_body) [55654 55694])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55708 55712]))                          )
                        (reparse-symbol indented_block_body) [55699 55994])
                    ("__next__" variable nil (reparse-symbol indented_block_body) [55998 56013]))                  
                :type "class")
                nil [55426 56041])
            ("FieldDataInformation" type
               (:documentation "Meta-data for a field of an output object (point data, cell data etc...).
    Provides easy access to the arrays using the slice interface:
    > narrays = len(field_info)
    > for i in range(narrays):
    >   array_info = field_info[i]

    Full slice interface is supported:
    > arrays = field_info[0:5:3]
    where arrays is a list.

    Array access by name is also possible:
    > array_info = field_info['Temperature']

    The number of arrays can also be accessed using the NumberOfArrays
    property.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [56659 56677])
                            ("self" variable nil (reparse-symbol indented_block_body) [56686 56707])
                            ("self" variable nil (reparse-symbol indented_block_body) [56716 56738]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56625 56629])
                            ("proxy" variable nil (reparse-symbol function_parameters) [56631 56636])
                            ("idx" variable nil (reparse-symbol function_parameters) [56638 56641])
                            ("field" variable nil (reparse-symbol function_parameters) [56643 56648]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [56612 56739])
                    ("GetFieldData" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56761 56765]))                          
                        :documentation "Convenience method to get the underlying
        vtkPVDataSetAttributesInformation")
                        (reparse-symbol indented_block_body) [56744 56975])
                    ("GetNumberOfArrays" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57002 57006]))                          
                        :documentation "Returns the number of arrays.")
                        (reparse-symbol indented_block_body) [56980 57144])
                    ("GetArray" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57162 57166])
                            ("idx" variable nil (reparse-symbol function_parameters) [57168 57171]))                          
                        :documentation "Given an index or a string, returns an array information.
        Raises IndexError if the index is out of bounds.")
                        (reparse-symbol indented_block_body) [57149 57693])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57710 57714]))                          
                        :documentation "Returns the number of arrays.")
                        (reparse-symbol indented_block_body) [57698 57801])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57822 57826])
                            ("idx" variable nil (reparse-symbol function_parameters) [57828 57831]))                          
                        :documentation "Implements the [] operator. Accepts an array name.")
                        (reparse-symbol indented_block_body) [57806 58164])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58178 58182]))                          
                        :documentation "Implementation of the dictionary API")
                        (reparse-symbol indented_block_body) [58169 58399])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58415 58419]))                          
                        :documentation "Implementation of the dictionary API")
                        (reparse-symbol indented_block_body) [58404 58629])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58648 58652]))                          
                        :documentation "Implementation of the dictionary API")
                        (reparse-symbol indented_block_body) [58634 58762])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58777 58781]))                          
                        :documentation "Implementation of the dictionary API")
                        (reparse-symbol indented_block_body) [58767 59027])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59044 59048])
                            ("key" variable nil (reparse-symbol function_parameters) [59050 59053]))                          
                        :documentation "Implementation of the dictionary API")
                        (reparse-symbol indented_block_body) [59032 59183])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59201 59205]))                          
                        :documentation "Implementation of the dictionary API")
                        (reparse-symbol indented_block_body) [59188 59309])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59330 59334])
                            ("name" variable nil (reparse-symbol function_parameters) [59336 59340]))                          
                        :documentation "Forwards unknown attributes to the underlying
        vtkPVDataSetAttributesInformation")
                        (reparse-symbol indented_block_body) [59314 59597])
                    ("NumberOfArrays" variable nil (reparse-symbol indented_block_body) [59602 59691]))                  
                :type "class")
                nil [56043 59692])
            ("OutputPort" function (:arguments 
              ( ("proxy" variable nil (reparse-symbol function_parameters) [59708 59713])
                ("outputPort" variable nil (reparse-symbol function_parameters) [59715 59725]))              ) nil [59693 60165])
            ("ProxyManager" type
               (:documentation "When running scripts from the python shell in the ParaView application,
    registering proxies with the proxy manager is the only mechanism to
    notify the graphical user interface (GUI) that a proxy
    exists. Therefore, unless a proxy is registered, it will not show up in
    the user interface. Also, the proxy manager is the only way to get
    access to proxies created using the GUI. Proxies created using the GUI
    are automatically registered under an appropriate group (sources,
    filters, representations and views). To get access to these objects,
    you can use proxyManager.GetProxy(group, name). The name is the same
    as the name shown in the pipeline browser.

    This class is a python wrapper for vtkSMProxyManager. Note that the
    underlying vtkSMProxyManager is a singleton. All instances of this
    class will refer to the same object. In addition to all methods provided by
    vtkSMProxyManager (all unknown attribute requests are forwarded
    to the vtkSMProxyManager), this class provides several convenience
    methods.

    Please note that some of the methods accessible through the ProxyManager
    class are not listed by help() because the ProxyManager objects forwards
    unresolved attributes to the underlying object. To get the full list,
    see also dir(proxy.SMProxyManager). See also the doxygen based documentation
    of the vtkSMProxyManager C++ class.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Constructor. Assigned self.SMProxyManager to
        vtkSMProxyManager.GetProxyManager().\"\"\"" code nil (reparse-symbol indented_block_body) [61670 61765])
                            ("global" code nil (reparse-symbol indented_block_body) [61774 61797])
                            ("if" code nil (reparse-symbol indented_block_body) [61806 61869])
                            ("self" variable nil (reparse-symbol indented_block_body) [61877 61931]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61641 61645])
                            ("session" variable nil (reparse-symbol function_parameters) [61647 61654]))                          
                        :documentation "Constructor. Assigned self.SMProxyManager to
        vtkSMProxyManager.GetProxyManager()."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [61628 61932])
                    ("RegisterProxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61955 61959])
                            ("group" variable nil (reparse-symbol function_parameters) [61961 61966])
                            ("name" variable nil (reparse-symbol function_parameters) [61968 61972])
                            ("aProxy" variable nil (reparse-symbol function_parameters) [61974 61980]))                          
                        :documentation "Registers a proxy (either SMProxy or proxy) with the
        server manager")
                        (reparse-symbol indented_block_body) [61937 62267])
                    ("NewProxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62285 62289])
                            ("group" variable nil (reparse-symbol function_parameters) [62291 62296])
                            ("name" variable nil (reparse-symbol function_parameters) [62298 62302]))                          
                        :documentation "Creates a new proxy of given group and name and returns an SMProxy.
        Note that this is a server manager object. You should normally create
        proxies using the class objects. For example:
        obj = servermanager.sources.SphereSource()")
                        (reparse-symbol indented_block_body) [62272 62790])
                    ("GetProxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62808 62812])
                            ("group" variable nil (reparse-symbol function_parameters) [62814 62819])
                            ("name" variable nil (reparse-symbol function_parameters) [62821 62825]))                          
                        :documentation "Returns a Proxy registered under a group and name")
                        (reparse-symbol indented_block_body) [62795 63093])
                    ("GetPrototypeProxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63120 63124])
                            ("group" variable nil (reparse-symbol function_parameters) [63126 63131])
                            ("name" variable nil (reparse-symbol function_parameters) [63133 63137]))                          
                        :documentation "Returns a prototype proxy given a group and name. This is an
        SMProxy. This is a low-level method. You should not normally
        have to call it.")
                        (reparse-symbol indented_block_body) [63098 63506])
                    ("GetProxiesInGroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63533 63537])
                            ("groupname" variable nil (reparse-symbol function_parameters) [63539 63548]))                          
                        :documentation "Returns a map of proxies in a particular group.")
                        (reparse-symbol indented_block_body) [63511 63809])
                    ("UnRegisterProxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63834 63838])
                            ("groupname" variable nil (reparse-symbol function_parameters) [63840 63849])
                            ("proxyname" variable nil (reparse-symbol function_parameters) [63851 63860])
                            ("aProxy" variable nil (reparse-symbol function_parameters) [63862 63868]))                          
                        :documentation "Unregisters a proxy.")
                        (reparse-symbol indented_block_body) [63814 64150])
                    ("GetProxies" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64170 64174])
                            ("groupname" variable nil (reparse-symbol function_parameters) [64176 64185])
                            ("proxyname" variable nil (reparse-symbol function_parameters) [64187 64196]))                          
                        :documentation "Returns all proxies registered under the given group with the
        given name. Note that it is possible to register more than one
        proxy with the same name in the same group. Because the proxies
        are different, there is no conflict. Use this method instead of
        GetProxy() if you know that there are more than one proxy registered
        with this name.")
                        (reparse-symbol indented_block_body) [64155 64989])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65007 65011]))                          
                        :documentation "Returns a new ProxyIterator.")
                        (reparse-symbol indented_block_body) [64994 65129])
                    ("NewGroupIterator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65155 65159])
                            ("group_name" variable nil (reparse-symbol function_parameters) [65161 65171]))                          
                        :documentation "Returns a ProxyIterator for a group. The resulting object
        can be used to traverse the proxies that are in the given
        group.")
                        (reparse-symbol indented_block_body) [65134 65442])
                    ("NewDefinitionIterator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65473 65477])
                            ("groupname" variable nil (reparse-symbol function_parameters) [65479 65488]))                          
                        :documentation "Returns an iterator that can be used to iterate over
           all groups and types of proxies that the proxy manager
           can create.")
                        (reparse-symbol indented_block_body) [65447 65942])
                    ("__ConvertArgumentsAndCall" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65977 65981])
                            ("args" variable nil (reparse-symbol function_parameters) [65983 65988]))                          )
                        (reparse-symbol indented_block_body) [65947 66401])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66422 66426])
                            ("name" variable nil (reparse-symbol function_parameters) [66428 66432]))                          
                        :documentation "Returns attribute from the ProxyManager")
                        (reparse-symbol indented_block_body) [66406 66730])
                    ("LoadState" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66749 66753])
                            ("filename" variable nil (reparse-symbol function_parameters) [66755 66763])
                            ("loader" variable nil (reparse-symbol function_parameters) [66765 66771]))                          )
                        (reparse-symbol indented_block_body) [66735 66840])
                    ("SaveState" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66859 66863])
                            ("filename" variable nil (reparse-symbol function_parameters) [66865 66873]))                          )
                        (reparse-symbol indented_block_body) [66845 66927]))                  
                :type "class")
                nil [60166 66927])
            ("PropertyIterator" type
               (:documentation "Wrapper for a vtkSMPropertyIterator class to satisfy
       the python iterator protocol. Note that the list of
       properties can also be obtained from the class object's
       dictionary.
       See the doxygen documentation for vtkSMPropertyIterator C++
       class for details.
       "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [67306 67352])
                            ("if" code nil (reparse-symbol indented_block_body) [67361 67462])
                            ("self" variable nil (reparse-symbol indented_block_body) [67470 67485])
                            ("self" variable nil (reparse-symbol indented_block_body) [67494 67519])
                            ("self" variable nil (reparse-symbol indented_block_body) [67528 67547]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67283 67287])
                            ("aProxy" variable nil (reparse-symbol function_parameters) [67289 67295]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [67270 67548])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67566 67570]))                          )
                        (reparse-symbol indented_block_body) [67553 67593])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67607 67611]))                          )
                        (reparse-symbol indented_block_body) [67598 67964])
                    ("__next__" variable nil (reparse-symbol indented_block_body) [67968 67983])
                    ("GetProxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68029 68033]))                          
                        :documentation "Returns the proxy for the property last returned by the call to
        'next()'")
                        (reparse-symbol indented_block_body) [68016 68157])
                    ("GetKey" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68173 68177]))                          
                        :documentation "Returns the key for the property last returned by the call to
        'next()' ")
                        (reparse-symbol indented_block_body) [68162 68298])
                    ("GetProperty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68319 68323]))                          
                        :documentation "Returns the property last returned by the call to 'next()' ")
                        (reparse-symbol indented_block_body) [68303 68448])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68469 68473])
                            ("name" variable nil (reparse-symbol function_parameters) [68475 68479]))                          
                        :documentation "returns attributes from the vtkSMPropertyIterator.")
                        (reparse-symbol indented_block_body) [68453 68593]))                  
                :type "class")
                nil [66928 68593])
            ("ProxyDefinitionIterator" type
               (:documentation "Wrapper for a vtkPVProxyDefinitionIterator class to satisfy
       the python iterator protocol.
       See the doxygen documentation of the vtkPVProxyDefinitionIterator
       C++ class for more information."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [68890 68912])
                            ("if" code nil (reparse-symbol indented_block_body) [68921 69030])
                            ("self" variable nil (reparse-symbol indented_block_body) [69038 69055])
                            ("self" variable nil (reparse-symbol indented_block_body) [69064 69079]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68869 68873])
                            ("iter" variable nil (reparse-symbol function_parameters) [68875 68879]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [68856 69080])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69098 69102]))                          )
                        (reparse-symbol indented_block_body) [69085 69125])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69139 69143]))                          )
                        (reparse-symbol indented_block_body) [69130 69481])
                    ("__next__" variable nil (reparse-symbol indented_block_body) [69485 69500])
                    ("GetProxyName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69550 69554]))                          
                        :documentation "Returns the key for the proxy definition last returned by the call
        to 'next()' ")
                        (reparse-symbol indented_block_body) [69533 69683])
                    ("GetGroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69701 69705]))                          
                        :documentation "Returns the group for the proxy definition last returned by the
        call to 'next()' ")
                        (reparse-symbol indented_block_body) [69688 69838])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69859 69863])
                            ("name" variable nil (reparse-symbol function_parameters) [69865 69869]))                          
                        :documentation "returns attributes from the vtkPVProxyDefinitionIterator.")
                        (reparse-symbol indented_block_body) [69843 69990]))                  
                :type "class")
                nil [68594 69990])
            ("ProxyIterator" type
               (:documentation "Wrapper for a vtkSMProxyIterator class to satisfy the
     python iterator protocol.
     See the doxygen documentation of vtkSMProxyIterator C++ class for
     more information.
     "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [70248 70286])
                            ("self" code nil (reparse-symbol indented_block_body) [70295 70347])
                            ("self" code nil (reparse-symbol indented_block_body) [70356 70379])
                            ("self" variable nil (reparse-symbol indented_block_body) [70388 70406])
                            ("self" variable nil (reparse-symbol indented_block_body) [70415 70432])
                            ("self" variable nil (reparse-symbol indented_block_body) [70441 70456]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70233 70237]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [70220 70457])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70475 70479]))                          )
                        (reparse-symbol indented_block_body) [70462 70502])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70516 70520]))                          )
                        (reparse-symbol indented_block_body) [70507 70918])
                    ("__next__" variable nil (reparse-symbol indented_block_body) [70922 70937])
                    ("GetProxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70983 70987]))                          
                        :documentation "Returns the proxy last returned by the call to 'next()'")
                        (reparse-symbol indented_block_body) [70970 71087])
                    ("GetKey" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71103 71107]))                          
                        :documentation "Returns the key for the proxy last returned by the call to
        'next()' ")
                        (reparse-symbol indented_block_body) [71092 71225])
                    ("GetGroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71243 71247]))                          
                        :documentation "Returns the group for the proxy last returned by the call to
        'next()' ")
                        (reparse-symbol indented_block_body) [71230 71369])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71390 71394])
                            ("name" variable nil (reparse-symbol function_parameters) [71396 71400]))                          
                        :documentation "returns attributes from the vtkSMProxyIterator.")
                        (reparse-symbol indented_block_body) [71374 71511]))                  
                :type "class")
                nil [69992 71511])
            ("_update_definitions_callback" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [71685 71689]))                  )
                nil [71652 72059])
            ("Connection" type
               (:documentation "
      This is a python representation for a session/connection.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Default constructor. Creates a Connection with the given
        ID, all other data members initialized to None.\"\"\"" code nil (reparse-symbol indented_block_body) [72221 72339])
                            ("global" code nil (reparse-symbol indented_block_body) [72348 72371])
                            ("self" variable nil (reparse-symbol indented_block_body) [72380 72402])
                            ("self" variable nil (reparse-symbol indented_block_body) [72411 72433])
                            ("self" variable nil (reparse-symbol indented_block_body) [72442 72467])
                            ("self" variable nil (reparse-symbol indented_block_body) [72476 72493])
                            ("self" variable nil (reparse-symbol indented_block_body) [72502 72532])
                            ("self" variable nil (reparse-symbol indented_block_body) [72541 72577])
                            ("ActiveConnection" variable nil (reparse-symbol indented_block_body) [72659 72682])
                            ("_createModules" code nil (reparse-symbol indented_block_body) [72759 72787])
                            ("self" code nil (reparse-symbol indented_block_body) [72871 72901])
                            ("ActiveConnection" variable nil (reparse-symbol indented_block_body) [72911 72934]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72183 72187])
                            ("connectionId" variable nil (reparse-symbol function_parameters) [72189 72201])
                            ("session" variable nil (reparse-symbol function_parameters) [72203 72210]))                          
                        :documentation "Default constructor. Creates a Connection with the given
        ID, all other data members initialized to None."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [72170 72935])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72986 72990])
                            ("other" variable nil (reparse-symbol function_parameters) [72992 72997]))                          )
                        (reparse-symbol indented_block_body) [72975 73253])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73271 73275]))                          
                        :documentation "User friendly string representation")
                        (reparse-symbol indented_block_body) [73258 73401])
                    ("GetURI" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73417 73421]))                          
                        :documentation "Get URI of the connection")
                        (reparse-symbol indented_block_body) [73406 73501])
                    ("IsRemote" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73519 73523]))                          
                        :documentation "Returns True if the connection to a remote server, False if
        it is local (built-in)")
                        (reparse-symbol indented_block_body) [73506 73727])
                    ("GetNumberOfDataPartitions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73762 73766]))                          
                        :documentation "Returns the number of partitions on the data server for this
           connection")
                        (reparse-symbol indented_block_body) [73732 73940])
                    ("AttachDefinitionUpdater" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73973 73977]))                          
                        :documentation "Attach observer to automatically update modules when needed.")
                        (reparse-symbol indented_block_body) [73945 74414])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74429 74433]))                          )
                        (reparse-symbol indented_block_body) [74419 74756])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74773 74777]))                          )
                        (reparse-symbol indented_block_body) [74761 74827]))                  
                :type "class")
                nil [72060 74827])
            ("SaveState" function
               (:documentation "Given a state filename, saves the state of objects registered
    with the proxy manager."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [74842 74850]))                  )
                nil [74828 75004])
            ("LoadState" function
               (:documentation "Given a state filename and an optional connection, loads the server
    manager state."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [75019 75027])
                    ("connection" variable nil (reparse-symbol function_parameters) [75029 75039]))                  )
                nil [75005 75740])
            ("Connect" function
               (:documentation "
    Use this function call to create a new session. On success,
    it returns a vtkSMSession object that abstracts the connection.
    Otherwise, it returns None.
    There are several ways in which this function can be called:
    * When called with no arguments, it creates a new session
      to the built-in server on the client itself.
    * When called with ds_host and ds_port arguments, it
      attempts to connect to a server(data and render server on the same server)
      on the indicated host:port.
    * When called with ds_host, ds_port, rs_host, rs_port, it
      creates a new connection to the data server on ds_host:ds_port and to the
      render server on rs_host: rs_port.
    "
                :arguments 
                  ( ("ds_host" variable nil (reparse-symbol function_parameters) [75753 75760])
                    ("ds_port" variable nil (reparse-symbol function_parameters) [75767 75774])
                    ("rs_host" variable nil (reparse-symbol function_parameters) [75782 75789])
                    ("rs_port" variable nil (reparse-symbol function_parameters) [75796 75803]))                  )
                nil [75741 77149])
            ("ReverseConnect" function
               (:documentation "
    Use this function call to create a new session. On success,
    it returns a Session object that abstracts the connection.
    Otherwise, it returns None.
    In reverse connection mode, the client waits for a connection
    from the server (client has to be started first). The server
    then connects to the client (run pvserver with -rc and -ch
    option).
    The optional port specified the port to listen to.
    "
                :arguments 
                  ( ("port" variable nil (reparse-symbol function_parameters) [77169 77173]))                  )
                nil [77150 78009])
            ("Disconnect" function
               (:documentation "Disconnects the connection. Make sure to clear the proxy manager
    first."
                :arguments 
                  ( ("connection" variable nil (reparse-symbol function_parameters) [78025 78035]))                  )
                nil [78010 78285])
            ("CreateProxy" function
               (:documentation "Creates a proxy. If session is set, the proxy's session is
    set accordingly. If session is None, the current Session is used, if
    present. You should not have to use method normally. Instantiate the
    appropriate class from the appropriate module, for example:
    sph = servermanager.sources.SphereSource()"
                :arguments 
                  ( ("xml_group" variable nil (reparse-symbol function_parameters) [78302 78311])
                    ("xml_name" variable nil (reparse-symbol function_parameters) [78313 78321])
                    ("session" variable nil (reparse-symbol function_parameters) [78323 78330]))                  )
                nil [78286 78924])
            ("GetRenderView" function
               (:documentation "Return the render view in use.  If more than one render view is in
    use, return the first one."
                :arguments 
                  ( ("connection" variable nil (reparse-symbol function_parameters) [78943 78953]))                  )
                nil [78925 79254])
            ("GetRenderViews" function
               (:documentation "Returns the set of all render views."
                :arguments 
                  ( ("connection" variable nil (reparse-symbol function_parameters) [79274 79284]))                  )
                nil [79255 79548])
            ("GetContextViews" function
               (:documentation "Returns the set of all context views."
                :arguments 
                  ( ("connection" variable nil (reparse-symbol function_parameters) [79569 79579]))                  )
                nil [79549 79812])
            ("CreateRenderView" function
               (:documentation "Creates a render window on the particular session. If session
    is not specified, then the active session is used, if available.

    This method can also be used to initialize properties by passing
    keyword arguments where the key is the name of the property. In addition
    registrationGroup and registrationName (optional) can be specified (as
    keyword arguments) to automatically register the proxy with the proxy
    manager."
                :arguments 
                  ( ("session" variable nil (reparse-symbol function_parameters) [79834 79841])
                    ("extraArgs" variable nil (reparse-symbol function_parameters) [79848 79859]))                  )
                nil [79813 80372])
            ("_create_view" function
               (:documentation "Creates a view on the particular session. If session
    is not specified, then the active session is used, if available.
    This method can also be used to initialize properties by passing
    keyword arguments where the key is the name of the property."
                :arguments 
                  ( ("view_xml_name" variable nil (reparse-symbol function_parameters) [80390 80403])
                    ("session" variable nil (reparse-symbol function_parameters) [80405 80412])
                    ("extraArgs" variable nil (reparse-symbol function_parameters) [80419 80430]))                  )
                nil [80373 81066])
            ("GetRepresentation" function (:arguments 
              ( ("aProxy" variable nil (reparse-symbol function_parameters) [81089 81095])
                ("view" variable nil (reparse-symbol function_parameters) [81097 81101]))              ) nil [81067 81199])
            ("CreateRepresentation" function
               (:documentation "Creates a representation for the proxy and adds it to the render
    module.

    This method can also be used to initialize properties by passing
    keyword arguments where the key is the name of the property.In addition
    registrationGroup and registrationName (optional) can be specified (as
    keyword arguments) to automatically register the proxy with the proxy
    manager.

    This method tries to create the best possible representation for the given
    proxy in the given view. Additionally, the user can specify proxyName
    (optional) to create a representation of a particular type."
                :arguments 
                  ( ("aProxy" variable nil (reparse-symbol function_parameters) [81225 81231])
                    ("view" variable nil (reparse-symbol function_parameters) [81233 81237])
                    ("extraArgs" variable nil (reparse-symbol function_parameters) [81239 81250]))                  )
                nil [81200 82576])
            ("_ModuleLoader" type
               (:superclasses ("object")
                :members 
                  ( ("find_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82626 82630])
                            ("fullname" variable nil (reparse-symbol function_parameters) [82632 82640])
                            ("path" variable nil (reparse-symbol function_parameters) [82642 82646]))                          )
                        (reparse-symbol indented_block_body) [82610 82766])
                    ("load_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82786 82790])
                            ("fullname" variable nil (reparse-symbol function_parameters) [82792 82800]))                          )
                        (reparse-symbol indented_block_body) [82770 83331]))                  
                :type "class")
                nil [82577 83331])
            ("LoadXML" function
               (:documentation "DEPRECATED. Given a server manager XML as a string, parse and process it."
                :arguments 
                  ( ("xmlstring" variable nil (reparse-symbol function_parameters) [83344 83353]))                  )
                nil [83332 83508])
            ("LoadPlugin" function
               (:documentation " Given a filename and a session (optional, otherwise uses
    ActiveConnection), loads a plugin. It then updates the sources,
    filters and rendering modules."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [83525 83533])
                    ("remote" variable nil (reparse-symbol function_parameters) [83536 83542])
                    ("connection" variable nil (reparse-symbol function_parameters) [83549 83559]))                  )
                nil [83510 84413])
            ("Fetch" function
               (:documentation "
    A convenience method that moves data from the server to the client,
    optionally performing some operation on the data as it moves.
    The input argument is the name of the (proxy for a) source or filter
    whose output is needed on the client.

    You can use Fetch to do three things:

    If arg1 is None (the default) then all of the data is brought to the client.
    In parallel runs an appropriate append Filter merges the
    data on each processor into one data object. The filter chosen will be
    vtkAppendPolyData for vtkPolyData, vtkAppendRectilinearGrid for
    vtkRectilinearGrid, vtkMultiBlockDataGroupFilter for vtkCompositeData,
    and vtkAppendFilter for anything else.

    If arg1 is an integer then one particular processor's output is brought to
    the client. In serial runs the arg is ignored. If you have a filter that
    computes results in parallel and brings them to the root node, then set
    arg to be 0.

    If arg1 and arg2 are a algorithms, for example vtkMinMax, the algorithm
    will be applied to the data to obtain some result. Here arg1 will be
    applied pre-gather and arg2 will be applied post-gather. In parallel
    runs the algorithm will be run on each processor to make intermediate
    results and then again on the root processor over all of the
    intermediate results to create a global result.

    Optional argument idx is used to specify the output port number to fetch the
    data from. Default is port 0.
    "
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [84425 84430])
                    ("arg1" variable nil (reparse-symbol function_parameters) [84432 84436])
                    ("arg2" variable nil (reparse-symbol function_parameters) [84443 84447])
                    ("idx" variable nil (reparse-symbol function_parameters) [84454 84457]))                  )
                nil [84415 87761])
            ("AnimateReader" function
               (:documentation "This is a utility function that, given a reader and a view
    animates over all time steps of the reader. If the optional
    filename is provided, a movie is created (type depends on the
    extension of the filename."
                :arguments 
                  ( ("reader" variable nil (reparse-symbol function_parameters) [87780 87786])
                    ("view" variable nil (reparse-symbol function_parameters) [87788 87792])
                    ("filename" variable nil (reparse-symbol function_parameters) [87794 87802]))                  )
                nil [87762 89677])
            ("GetProgressPrintingIsEnabled" function nil nil [89678 89757])
            ("SetProgressPrintingEnabled" function
               (:documentation "Turn on/off printing of progress (by default, it is on). You can
    always turn progress off and add your own observer to the process
    module to handle progress in a custom way. See _printProgress for
    an example event observer."
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [89789 89794]))                  )
                nil [89758 90650])
            ("ToggleProgressPrinting" function (:documentation "Turn on/off printing of progress.  See SetProgressPrintingEnabled.") nil [90651 90825])
            ("Finalize" function (:documentation "Although not required, this can be called at exit to cleanup.") nil [90826 91084])
            ("_getPyProxy" function
               (:documentation "Returns a python wrapper for a server manager proxy. This method
    first checks if there is already such an object by looking in the
    _pyproxies group and returns it if found. Otherwise, it creates a
    new one. Proxies register themselves in _pyproxies upon creation."
                :arguments 
                  ( ("smproxy" variable nil (reparse-symbol function_parameters) [91121 91128])
                    ("outputPort" variable nil (reparse-symbol function_parameters) [91130 91140]))                  )
                nil [91105 92912])
            ("_makeUpdateCameraMethod" function
               (:documentation " This internal method is used to create observer methods "
                :arguments 
                  ( ("rv" variable nil (reparse-symbol function_parameters) [92941 92943]))                  )
                nil [92913 93440])
            ("_createInitialize" function
               (:documentation "Internal method to create an Initialize() method for the sub-classes
    of Proxy"
                :arguments 
                  ( ("group" variable nil (reparse-symbol function_parameters) [93463 93468])
                    ("name" variable nil (reparse-symbol function_parameters) [93470 93474]))                  )
                nil [93441 94184])
            ("_createGetProperty" function
               (:documentation "Internal method to create a GetXXX() method where XXX == pName."
                :arguments 
                  ( ("pName" variable nil (reparse-symbol function_parameters) [94208 94213]))                  )
                nil [94185 94527])
            ("_createSetProperty" function
               (:documentation "Internal method to create a SetXXX() method where XXX == pName."
                :arguments 
                  ( ("pName" variable nil (reparse-symbol function_parameters) [94551 94556]))                  )
                nil [94528 94768])
            ("_findClassForProxy" function
               (:documentation "Given the xmlName for a proxy, returns a Proxy class. Note
    that if there are duplicates, the first one is returned."
                :arguments 
                  ( ("xmlName" variable nil (reparse-symbol function_parameters) [94792 94799])
                    ("xmlGroup" variable nil (reparse-symbol function_parameters) [94801 94809]))                  )
                nil [94769 95887])
            ("_printProgress" function
               (:documentation "The default event handler for progress. Prints algorithm
    name and 1 '.' per 10% progress."
                :arguments 
                  ( ("caller" variable nil (reparse-symbol function_parameters) [95907 95913])
                    ("event" variable nil (reparse-symbol function_parameters) [95915 95920]))                  )
                nil [95888 97036])
            ("updateModules" function
               (:documentation "Called when a plugin is loaded, this method updates
    the proxy class object in all known modules."
                :arguments 
                  ( ("m" variable nil (reparse-symbol function_parameters) [97055 97056]))                  )
                nil [97037 97970])
            ("_createModules" function
               (:documentation "Called when the module is loaded, this creates sub-
    modules for all know proxy groups."
                :arguments 
                  ( ("m" variable nil (reparse-symbol function_parameters) [97990 97991]))                  )
                nil [97971 98904])
            ("PVModule" type
               (:superclasses ("object")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [98933 98937]))                  
                :type "class")
                nil [98905 98938])
            ("_make_name_valid" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [98960 98964]))              ) nil [98939 99009])
            ("_createClass" function
               (:documentation "Defines a new class type for the proxy."
                :arguments 
                  ( ("groupName" variable nil (reparse-symbol function_parameters) [99027 99036])
                    ("proxyName" variable nil (reparse-symbol function_parameters) [99038 99047])
                    ("apxm" variable nil (reparse-symbol function_parameters) [99049 99053]))                  )
                nil [99010 101264])
            ("createModule" function
               (:documentation "Populates a module with proxy classes defined in the given group.
    If mdl is not specified, it also creates the module"
                :arguments 
                  ( ("groupName" variable nil (reparse-symbol function_parameters) [101282 101291])
                    ("mdl" variable nil (reparse-symbol function_parameters) [101293 101296]))                  )
                nil [101265 102369])
            ("__determineGroup" function
               (:documentation "Internal method"
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [102392 102397]))                  )
                nil [102371 103396])
            ("__nameCounter" variable nil nil [103397 103415])
            ("__determineName" function (:arguments 
              ( ("proxy" variable nil (reparse-symbol function_parameters) [103436 103441])
                ("group" variable nil (reparse-symbol function_parameters) [103443 103448]))              ) nil [103416 103759])
            ("__getName" function (:arguments 
              ( ("proxy" variable nil (reparse-symbol function_parameters) [103774 103779])
                ("group" variable nil (reparse-symbol function_parameters) [103781 103786]))              ) nil [103760 103937])
            ("MissingRegistrationInformation" type
               (:documentation "Exception for missing registration information. Raised when a name or group
    is not specified or when a group cannot be deduced."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [104133 104137]))                  
                :type "class")
                nil [103938 104138])
            ("MissingProxy" type
               (:documentation "Exception fired when the requested proxy is missing."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [104237 104241]))                  
                :type "class")
                nil [104139 104242])
            ("Register" function
               (:documentation "Registers a proxy with the proxy manager. If no 'registrationGroup' is
    specified, then the group is inferred from the type of the proxy.
    'registrationName' may be specified to register with a particular name
    otherwise a default name will be created."
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [104256 104261])
                    ("extraArgs" variable nil (reparse-symbol function_parameters) [104263 104274]))                  )
                nil [104243 105250])
            ("UnRegister" function
               (:documentation "UnRegisters proxies registered using Register()."
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [105266 105271])
                    ("extraArgs" variable nil (reparse-symbol function_parameters) [105273 105284]))                  )
                nil [105251 105940])
            ("demo1" function (:documentation "This simple demonstration creates a sphere, renders it and delivers
    it to the client using Fetch. It returns a tuple of (data, render
    view)") nil [105941 106766])
            ("demo2" function
               (:documentation "This method demonstrates the user of a reader, representation and
    view. It also demonstrates how meta-data can be obtained using proxies.
    Make sure to pass the full path to an exodus file. Also note that certain
    parameters are hard-coded for disk_out_ref.ex2 which can be found
    in ParaViewData. This method returns the render view."
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [106777 106782]))                  )
                nil [106767 109650])
            ("demo3" function (:documentation "This method demonstrates the use of servermanager with numpy as
    well as pylab for plotting. It creates an artificial data sources,
    probes it with a line, delivers the result to the client using Fetch
    and plots it using pylab. This demo requires numpy and pylab installed.
    It returns a tuple of (data, render view).") nil [109651 111996])
            ("demo4" function
               (:documentation "This method demonstrates the user of AnimateReader for
    creating animations."
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [112007 112012]))                  )
                nil [111997 112484])
            ("demo5" function (:documentation " Simple sphere animation") nil [112486 113661])
            ("ASSOCIATIONS" variable nil nil [113662 113759])
            ("_LEGACY_ASSOCIATIONS" variable nil nil [113760 113820])
            ("GetAssociationAsString" function
               (:documentation "Returns array association string from its integer value"
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [113849 113852]))                  )
                nil [113822 114180])
            ("GetAssociationFromString" function
               (:documentation "Returns array association interger value from its string representation"
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [114210 114213]))                  )
                nil [114181 114590])
            ("ActiveConnection" variable nil nil [114780 114803])
            ("\"\"\"Keeps track of all connection objects. Unless the process was run with
--multi-servers flag set to True, this will generally be just 1 item long at the
most.\"\"\"" code nil nil [114805 114968])
            ("Connections" variable nil nil [114969 114985])
            ("SetActiveConnection" function
               (:documentation "Set the active connection. If the process was run without multi-server
       enabled and this method is called with a non-None argument while an
       ActiveConnection is present, it will raise a RuntimeError."
                :arguments 
                  ( ("connection" variable nil (reparse-symbol function_parameters) [115011 115021]))                  )
                nil [114987 115963])
            ("if" code nil nil [116412 116907])
            ("progressObserverTag" variable nil nil [117003 117029])
            ("currentAlgorithm" variable nil nil [117030 117054])
            ("currentProgress" variable nil nil [117055 117074])
            ("if" code nil nil [117075 117129])
            ("_pyproxies" variable nil nil [117130 117145])
            ("loader" variable nil nil [117311 117335])
            ("sys" code nil nil [117336 117364])
            ("__exposeActiveModules__" function (:documentation "Update servermanager submodules to point to the current
    ActiveConnection.Modules.*") nil [117367 117776])
            ("GetConnectionFromId" function
               (:documentation "Returns the Connection object corresponding a connection identified by
       the id."
                :arguments 
                  ( ("id" variable nil (reparse-symbol function_parameters) [117801 117803]))                  )
                nil [117777 118038])
            ("GetConnectionFromSession" function
               (:documentation "Retuns the Connection object corresponding to a vtkSMSession instance."
                :arguments 
                  ( ("session" variable nil (reparse-symbol function_parameters) [118068 118075]))                  )
                nil [118039 118632])
            ("__connectionCreatedCallback" function
               (:documentation "Callback called when a new session is created."
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [118666 118669])
                    ("string" variable nil (reparse-symbol function_parameters) [118671 118677]))                  )
                nil [118634 118947])
            ("__connectionClosedCallback" function
               (:documentation "Callback called when a new session is closed."
                :arguments 
                  ( ("obg" variable nil (reparse-symbol function_parameters) [118979 118982])
                    ("string" variable nil (reparse-symbol function_parameters) [118984 118990]))                  )
                nil [118948 119464])
            ("__initialize" function (:documentation "Does initialization of the module, ensuring that the module's state
        correctly reflects that of the ProcessModule/ServerManager.") nil [119465 120519])
            ("__initialize" code nil nil [120520 120534])
            ("if" code nil nil [120536 120667]))          
      :file "servermanager.py"
      :pointmax 120667
      :fsize 120666
      :lastmodtime '(22546 35181 395231 246000)
      :unmatched-syntax nil)
    (semanticdb-table "_backwardscompatibilityhelper.py"
      :file "_backwardscompatibilityhelper.py"
      :fsize 4842
      :lastmodtime '(22546 35181 391231 335000)))
  :file "!home!nshetty!apps!pv!ParaView!Wrapping!Python!paraview!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
