;; Object OpticalTracking/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "OpticalTracking/"
  :tables
  (list
    (semanticdb-table "makefile"
      :major-mode 'makefile-gmake-mode
      :tags 
        '( ("INSTALLDIR" variable (:default-value ("$(HOME)/Vrui-3.2")) nil [1575 1606])
            ("VRUI_PACKAGEROOT" variable (:default-value ("$(shell pwd)")) nil [1875 1908])
            ("VRUI_MAKEDIR" variable (:default-value ("$(VRUI_PACKAGEROOT)/BuildRoot")) nil [1908 1954])
            ("$(VRUI_MAKEDIR)/SystemDefinitions" include nil nil [2037 2079])
            ("$(VRUI_MAKEDIR)/Packages.System" include nil nil [2079 2119])
            ("$(VRUI_MAKEDIR)/Packages.Vrui" include nil nil [3910 3948])
            ("USE_RPATH" variable (:default-value ("1")) nil [4631 4645])
            ("GLSUPPORT_USE_TLS" variable (:default-value ("0")) nil [5308 5330])
            ("LINUX_INPUT_H_HAS_STRUCTS" variable (:default-value ("1")) nil [5642 5672])
            ("VRUI_VRWINDOW_USE_SWAPGROUPS" variable (:default-value ("0")) nil [6013 6046])
            ("VRDEVICES_USE_INPUT_ABSTRACTION" variable (:default-value ("0")) nil [6237 6273])
            ("VRDEVICES_USE_BLUETOOTH" variable (:default-value ("$(SYSTEM_HAVE_BLUETOOTH)")) nil [6696 6747])
            ("VRUI_VERSION" variable (:default-value ("3002001")) nil [6997 7020])
            ("MAJORLIBVERSION" variable (:default-value ("3")) nil [7020 7040])
            ("MINORLIBVERSION" variable (:default-value ("2")) nil [7040 7060])
            ("VRUI_NAME" variable (:default-value ("Vrui-$(MAJORLIBVERSION).$(MINORLIBVERSION)")) nil [7060 7116])
            ("LIBDESTDIR" variable (:default-value ("$(VRUI_PACKAGEROOT)/$(MYLIBEXT)")) nil [7245 7291])
            ("VRUI_INCLUDEDIR" variable (:default-value ("$(VRUI_PACKAGEROOT)")) nil [7352 7390])
            ("VRUI_LIBDIR" variable (:default-value ("$(VRUI_PACKAGEROOT)/$(MYLIBEXT)")) nil [7390 7436])
            ("PLUGININSTALLDIR" variable (:default-value ("$(LIBINSTALLDIR)")) nil [8980 9016])
            ("PACKAGES" variable nil nil [10155 10167])
            ("LIBRARIES" variable nil nil [10343 10356])
            ("PLUGINS" variable nil nil [10356 10367])
            ("EXECUTABLES" variable nil nil [10367 10382])
            ("LIBRARY_NAMES" variable (:default-value ("libMisc" "libRealtime" "libThreads")) nil [10411 10503])
            ("LIBRARY_NAMES" variable (:default-value ("libRawHID" "libIO" "libPlugins" "libComm" "libCluster" "libMath" "libGeometry" "libGLWrappers" "libGLSupport" "libGLXSupport" "libGLGeometry" "libImages" "libGLMotif" "libSound" "libVideo" "libALSupport" "libSceneGraph" "libVrui")) nil [10568 11139])
            ("LIBRARIES" variable (:default-value ("$(LIBRARY_NAMES:%=$(call LIBRARYNAME,%))")) nil [11140 11194])
            ("VRTOOLS_SOURCES" variable (:default-value ("$(wildcard Vrui/Tools/*.cpp)")) nil [11238 11285])
            ("VRTOOLSDIREXT" variable (:default-value ("VRTools")) nil [11286 11310])
            ("VRTOOLSDIR" variable (:default-value ("$(LIBDESTDIR)/$(VRTOOLSDIREXT)")) nil [11310 11353])
            ("VRTOOLS" variable (:default-value ("$(VRTOOLS_SOURCES:Vrui/Tools/%.cpp=$(VRTOOLSDIR)/lib%.$(PLUGINFILEEXT))")) nil [11353 11435])
            ("PLUGINS" variable (:default-value ("$(VRTOOLS)")) nil [11435 11457])
            ("VRVISLETS_SOURCES" variable (:default-value ("$(wildcard Vrui/Vislets/*.cpp)")) nil [11500 11551])
            ("VRVISLETSDIREXT" variable (:default-value ("VRVislets")) nil [11552 11580])
            ("VRVISLETSDIR" variable (:default-value ("$(LIBDESTDIR)/$(VRVISLETSDIREXT)")) nil [11580 11628])
            ("VRVISLETS" variable (:default-value ("$(VRVISLETS_SOURCES:Vrui/Vislets/%.cpp=$(VRVISLETSDIR)/lib%.$(PLUGINFILEEXT))")) nil [11628 11718])
            ("PLUGINS" variable (:default-value ("$(VRVISLETS)")) nil [11718 11742])
            ("EXECUTABLES" variable (:default-value ("$(EXEDIR)/VRDeviceDaemon")) nil [11779 11819])
            ("VRDEVICES_IGNORE_SOURCES" variable (:default-value ("VRDeviceDaemon/VRDevices/Joystick.cpp" "VRDeviceDaemon/VRDevices/VRPNConnection.cpp" "VRDeviceDaemon/VRDevices/Wiimote.cpp" "VRDeviceDaemon/VRDevices/WiimoteTracker.cpp" "VRDeviceDaemon/VRDevices/RazerHydra.cpp" "VRDeviceDaemon/VRDevices/RazerHydraDevice.cpp" "VRDeviceDaemon/VRDevices/OculusRift.cpp")) nil [11932 12422])
            ("VRDEVICES_SOURCES" variable (:default-value ("$(filter-out $(VRDEVICES_IGNORE_SOURCES),$(wildcard VRDeviceDaemon/VRDevices/*.cpp))")) nil [12423 12528])
            ("VRDEVICESDIREXT" variable (:default-value ("VRDevices")) nil [12924 12952])
            ("VRDEVICESDIR" variable (:default-value ("$(LIBDESTDIR)/$(VRDEVICESDIREXT)")) nil [12952 13000])
            ("VRDEVICES" variable (:default-value ("$(VRDEVICES_SOURCES:VRDeviceDaemon/VRDevices/%.cpp=$(VRDEVICESDIR)/lib%.$(PLUGINFILEEXT))")) nil [13000 13102])
            ("PLUGINS" variable (:default-value ("$(VRDEVICES)")) nil [13102 13126])
            ("VRCALIBRATORS_SOURCES" variable (:default-value ("$(wildcard VRDeviceDaemon/VRCalibrators/*.cpp)")) nil [13170 13241])
            ("VRCALIBRATORSDIREXT" variable (:default-value ("VRCalibrators")) nil [13242 13278])
            ("VRCALIBRATORSDIR" variable (:default-value ("$(LIBDESTDIR)/$(VRCALIBRATORSDIREXT)")) nil [13278 13334])
            ("VRCALIBRATORS" variable (:default-value ("$(VRCALIBRATORS_SOURCES:VRDeviceDaemon/VRCalibrators/%.cpp=$(VRCALIBRATORSDIR)/lib%.$(PLUGINFILEEXT))")) nil [13334 13452])
            ("PLUGINS" variable (:default-value ("$(VRCALIBRATORS)")) nil [13452 13480])
            ("EXECUTABLES" variable (:default-value ("$(EXEDIR)/DeviceTest")) nil [13525 13561])
            ("EXECUTABLES" variable (:default-value ("$(EXEDIR)/EyeCalibrator")) nil [13603 13642])
            ("EXECUTABLES" variable (:default-value ("$(EXEDIR)/PrintInputDeviceDataFile")) nil [13694 13744])
            ("EXECUTABLES" variable (:default-value ("$(EXEDIR)/XBackground" "$(EXEDIR)/MeasureEnvironment" "$(EXEDIR)/ScreenCalibrator" "$(EXEDIR)/AlignTrackingMarkers" "$(EXEDIR)/SampleTrackerField")) nil [13784 14005])
            ("MAKECONFIGFILE" variable (:default-value ("BuildRoot/Configuration.Vrui")) nil [14295 14341])
            ("PKGCONFIGFILE" variable (:default-value ("Share/Vrui.pc")) nil [14391 14421])
            ("ALL" variable (:default-value ("$(LIBRARIES)" "$(EXECUTABLES)" "$(PLUGINS)")) nil [14484 14529])
            (".PHONY" function (:arguments ("all")) nil [14530 14542])
            ("all" function (:arguments ("$(ALL)")) nil [14542 14554])
            ("$(PLUGINS)" function (:arguments ("|" "$(LIBRARIES)")) nil [14613 14640])
            ("$(EXECUTABLES)" function (:arguments ("|" "$(LIBRARIES)")) nil [14640 14671])
            (".PHONY" function (:arguments ("config" "config-invalidate")) nil [14890 14923])
            ("config" function (:arguments ("config-invalidate" "$(DEPDIR)/config")) nil [14923 14966])
            ("config-invalidate" function nil nil [14967 15020])
            ("$(DEPDIR)" function nil nil [15021 15116])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Realtime" "$(DEPDIR)/Configure-Threads" "$(DEPDIR)/Configure-USB" "$(DEPDIR)/Configure-GLSupport" "$(DEPDIR)/Configure-Images" "$(DEPDIR)/Configure-Sound" "$(DEPDIR)/Configure-ALSupport" "$(DEPDIR)/Configure-Video" "$(DEPDIR)/Configure-SceneGraph" "$(DEPDIR)/Configure-Vrui" "$(DEPDIR)/Configure-VRDeviceDaemon")) nil [15280 15981])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Install")) nil [17233 17371])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Makefiles")) nil [17372 17445])
            (".PHONY" function (:arguments ("extraclean")) nil [17651 17670])
            ("extraclean" function nil nil [17670 17867])
            (".PHONY" function (:arguments ("extrasqueakyclean")) nil [17868 17894])
            ("extrasqueakyclean" function nil nil [17894 18090])
            ("$(VRUI_MAKEDIR)/BasicMakefile" include nil nil [18116 18154])
            ("MISC_HEADERS" variable (:default-value ("$(wildcard Misc/*.h)" "$(wildcard Misc/*.icpp)")) nil [18399 18476])
            ("MISC_SOURCES" variable (:default-value ("$(wildcard Misc/*.cpp)")) nil [18477 18515])
            ("$(MISC_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [18516 18572])
            ("$(call LIBRARYNAME,libMisc)" function (:arguments ("PACKAGES" "+=" "$(MYMISC_DEPENDS)")) nil [18573 18632])
            ("$(call LIBRARYNAME,libMisc)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYMISC_INCLUDE)")) nil [18632 18701])
            ("$(call LIBRARYNAME,libMisc)" function (:arguments ("|" "$(call DEPENDENCIES,MYMISC)")) nil [18701 18760])
            ("$(call LIBRARYNAME,libMisc)" function (:arguments ("$(MISC_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [18760 18825])
            (".PHONY" function (:arguments ("libMisc")) nil [18825 18841])
            ("libMisc" function (:arguments ("$(call LIBRARYNAME,libMisc)")) nil [18841 18878])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Begin")) nil [18930 18986])
            ("REALTIME_HEADERS" variable (:default-value ("$(wildcard Realtime/*.h)" "$(wildcard Realtime/*.icpp)")) nil [19625 19718])
            ("REALTIME_SOURCES" variable (:default-value ("$(wildcard Realtime/*.cpp)")) nil [19719 19765])
            ("$(REALTIME_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [19766 19826])
            ("$(call LIBRARYNAME,libRealtime)" function (:arguments ("PACKAGES" "+=" "$(MYREALTIME_DEPENDS)")) nil [19827 19894])
            ("$(call LIBRARYNAME,libRealtime)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYREALTIME_INCLUDE)")) nil [19894 19971])
            ("$(call LIBRARYNAME,libRealtime)" function (:arguments ("|" "$(call DEPENDENCIES,MYREALTIME)")) nil [19971 20038])
            ("$(call LIBRARYNAME,libRealtime)" function (:arguments ("$(REALTIME_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [20038 20111])
            (".PHONY" function (:arguments ("libRealtime")) nil [20111 20131])
            ("libRealtime" function (:arguments ("$(call LIBRARYNAME,libRealtime)")) nil [20131 20176])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Realtime")) nil [20225 20283])
            ("THREADS_HEADERS" variable (:default-value ("$(wildcard Threads/*.h)" "$(wildcard Threads/*.icpp)")) nil [21532 21621])
            ("THREADS_SOURCES" variable (:default-value ("$(wildcard Threads/*.cpp)")) nil [21622 21666])
            ("$(THREADS_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [21667 21726])
            ("$(call LIBRARYNAME,libThreads)" function (:arguments ("PACKAGES" "+=" "$(MYTHREADS_DEPENDS)")) nil [21727 21792])
            ("$(call LIBRARYNAME,libThreads)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYTHREADS_INCLUDE)")) nil [21792 21867])
            ("$(call LIBRARYNAME,libThreads)" function (:arguments ("|" "$(call DEPENDENCIES,MYTHREADS)")) nil [21867 21932])
            ("$(call LIBRARYNAME,libThreads)" function (:arguments ("$(THREADS_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [21932 22003])
            (".PHONY" function (:arguments ("libThreads")) nil [22003 22022])
            ("libThreads" function (:arguments ("$(call LIBRARYNAME,libThreads)")) nil [22022 22065])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Threads")) nil [22103 22156])
            ("USB_HEADERS" variable (:default-value ("$(wildcard USB/*.h)" "$(wildcard USB/*.icpp)")) nil [22874 22947])
            ("USB_SOURCES" variable (:default-value ("$(wildcard USB/*.cpp)")) nil [22948 22984])
            ("$(USB_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [22985 23040])
            ("$(call LIBRARYNAME,libUSB)" function (:arguments ("PACKAGES" "+=" "$(MYUSB_DEPENDS)")) nil [23041 23098])
            ("$(call LIBRARYNAME,libUSB)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYUSB_INCLUDE)")) nil [23098 23165])
            ("$(call LIBRARYNAME,libUSB)" function (:arguments ("|" "$(call DEPENDENCIES,MYUSB)")) nil [23165 23222])
            ("$(call LIBRARYNAME,libUSB)" function (:arguments ("$(USB_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [23222 23285])
            (".PHONY" function (:arguments ("libUSB")) nil [23285 23300])
            ("libUSB" function (:arguments ("$(call LIBRARYNAME,libUSB)")) nil [23300 23335])
            ("RAWHID_HEADERS" variable (:default-value ("$(wildcard RawHID/*.h)" "$(wildcard RawHID/*.icpp)")) nil [23381 23466])
            ("RAWHID_SOURCES" variable (:default-value ("$(wildcard RawHID/*.cpp)" "$(wildcard RawHID/Internal/*.cpp)")) nil [23467 23562])
            ("$(call LIBRARYNAME,libRawHID)" function (:arguments ("PACKAGES" "+=" "$(MYRAWHID_DEPENDS)")) nil [23563 23626])
            ("$(call LIBRARYNAME,libRawHID)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYRAWHID_INCLUDE)")) nil [23626 23699])
            ("$(call LIBRARYNAME,libRawHID)" function (:arguments ("|" "$(call DEPENDENCIES,MYRAWHID)")) nil [23699 23762])
            ("$(call LIBRARYNAME,libRawHID)" function (:arguments ("$(RAWHID_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [23762 23831])
            (".PHONY" function (:arguments ("libRawHID")) nil [23831 23849])
            ("libRawHID" function (:arguments ("$(call LIBRARYNAME,libRawHID)")) nil [23849 23890])
            ("IO_HEADERS" variable (:default-value ("$(wildcard IO/*.h)" "$(wildcard IO/*.icpp)")) nil [23927 23996])
            ("IO_SOURCES" variable (:default-value ("$(wildcard IO/*.cpp)")) nil [23997 24031])
            ("$(IO_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [24032 24086])
            ("$(call LIBRARYNAME,libIO)" function (:arguments ("PACKAGES" "+=" "$(MYIO_DEPENDS)")) nil [24087 24142])
            ("$(call LIBRARYNAME,libIO)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYIO_INCLUDE)")) nil [24142 24207])
            ("$(call LIBRARYNAME,libIO)" function (:arguments ("|" "$(call DEPENDENCIES,MYIO)")) nil [24207 24262])
            ("$(call LIBRARYNAME,libIO)" function (:arguments ("$(IO_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [24262 24323])
            (".PHONY" function (:arguments ("libIO")) nil [24323 24337])
            ("libIO" function (:arguments ("$(call LIBRARYNAME,libIO)")) nil [24337 24370])
            ("PLUGINS_HEADERS" variable (:default-value ("$(wildcard Plugins/*.h)" "$(wildcard Plugins/*.icpp)")) nil [24417 24506])
            ("PLUGINS_SOURCES" variable (:default-value ("$(wildcard Plugins/*.cpp)")) nil [24507 24551])
            ("$(PLUGINS_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [24552 24611])
            ("$(call LIBRARYNAME,libPlugins)" function (:arguments ("PACKAGES" "+=" "$(MYPLUGINS_DEPENDS)")) nil [24612 24677])
            ("$(call LIBRARYNAME,libPlugins)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYPLUGINS_INCLUDE)")) nil [24677 24752])
            ("$(call LIBRARYNAME,libPlugins)" function (:arguments ("|" "$(call DEPENDENCIES,MYPLUGINS)")) nil [24752 24817])
            ("$(call LIBRARYNAME,libPlugins)" function (:arguments ("$(PLUGINS_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [24817 24888])
            (".PHONY" function (:arguments ("libPlugins")) nil [24888 24907])
            ("libPlugins" function (:arguments ("$(call LIBRARYNAME,libPlugins)")) nil [24907 24950])
            ("COMM_HEADERS" variable (:default-value ("$(wildcard Comm/*.h)" "$(wildcard Comm/*.icpp)")) nil [25001 25078])
            ("COMM_SOURCES" variable (:default-value ("$(wildcard Comm/*.cpp)")) nil [25079 25117])
            ("$(COMM_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [25118 25174])
            ("$(call LIBRARYNAME,libComm)" function (:arguments ("PACKAGES" "+=" "$(MYCOMM_DEPENDS)")) nil [25175 25234])
            ("$(call LIBRARYNAME,libComm)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYCOMM_INCLUDE)")) nil [25234 25303])
            ("$(call LIBRARYNAME,libComm)" function (:arguments ("|" "$(call DEPENDENCIES,MYCOMM)")) nil [25303 25362])
            ("$(call LIBRARYNAME,libComm)" function (:arguments ("$(COMM_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [25362 25427])
            (".PHONY" function (:arguments ("libComm")) nil [25427 25443])
            ("libComm" function (:arguments ("$(call LIBRARYNAME,libComm)")) nil [25443 25480])
            ("CLUSTER_HEADERS" variable (:default-value ("$(wildcard Cluster/*.h)" "$(wildcard Cluster/*.icpp)")) nil [25530 25619])
            ("CLUSTER_SOURCES" variable (:default-value ("$(wildcard Cluster/*.cpp)")) nil [25620 25664])
            ("$(CLUSTER_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [25665 25724])
            ("$(call LIBRARYNAME,libCluster)" function (:arguments ("PACKAGES" "+=" "$(MYCLUSTER_DEPENDS)")) nil [25725 25790])
            ("$(call LIBRARYNAME,libCluster)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYCLUSTER_INCLUDE)")) nil [25790 25865])
            ("$(call LIBRARYNAME,libCluster)" function (:arguments ("|" "$(call DEPENDENCIES,MYCLUSTER)")) nil [25865 25930])
            ("$(call LIBRARYNAME,libCluster)" function (:arguments ("$(CLUSTER_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [25930 26001])
            (".PHONY" function (:arguments ("libCluster")) nil [26001 26020])
            ("libCluster" function (:arguments ("$(call LIBRARYNAME,libCluster)")) nil [26020 26063])
            ("MATH_HEADERS" variable (:default-value ("$(wildcard Math/*.h)" "$(wildcard Math/*.icpp)")) nil [26107 26184])
            ("MATH_SOURCES" variable (:default-value ("$(wildcard Math/*.cpp)")) nil [26185 26223])
            ("$(MATH_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [26224 26280])
            ("$(call LIBRARYNAME,libMath)" function (:arguments ("PACKAGES" "+=" "$(MYMATH_DEPENDS)")) nil [26281 26340])
            ("$(call LIBRARYNAME,libMath)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYMATH_INCLUDE)")) nil [26340 26409])
            ("$(call LIBRARYNAME,libMath)" function (:arguments ("|" "$(call DEPENDENCIES,MYMATH)")) nil [26409 26468])
            ("$(call LIBRARYNAME,libMath)" function (:arguments ("$(MATH_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [26468 26533])
            (".PHONY" function (:arguments ("libMath")) nil [26533 26549])
            ("libMath" function (:arguments ("$(call LIBRARYNAME,libMath)")) nil [26549 26586])
            ("GEOMETRY_HEADERS" variable (:default-value ("$(wildcard Geometry/*.h)" "$(wildcard Geometry/*.icpp)")) nil [26638 26731])
            ("GEOMETRY_SOURCES" variable (:default-value ("$(wildcard Geometry/*.cpp)")) nil [26732 26778])
            ("$(GEOMETRY_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [26779 26839])
            ("$(call LIBRARYNAME,libGeometry)" function (:arguments ("PACKAGES" "+=" "$(MYGEOMETRY_DEPENDS)")) nil [26840 26907])
            ("$(call LIBRARYNAME,libGeometry)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYGEOMETRY_INCLUDE)")) nil [26907 26984])
            ("$(call LIBRARYNAME,libGeometry)" function (:arguments ("|" "$(call DEPENDENCIES,MYGEOMETRY)")) nil [26984 27051])
            ("$(call LIBRARYNAME,libGeometry)" function (:arguments ("$(GEOMETRY_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [27051 27124])
            (".PHONY" function (:arguments ("libGeometry")) nil [27124 27144])
            ("libGeometry" function (:arguments ("$(call LIBRARYNAME,libGeometry)")) nil [27144 27189])
            ("MACOSX_HEADERS" variable (:default-value ("$(wildcard MacOSX/*.h)" "$(wildcard MacOSX/*.icpp)")) nil [27234 27319])
            ("GLWRAPPERS_HEADERS" variable (:default-value ("GL/GLTexCoordTemplates.h" "GL/GLMultiTexCoordTemplates.h" "GL/GLColorTemplates.h" "GL/GLSecondaryColorTemplates.h" "GL/GLNormalTemplates.h" "GL/GLVertexTemplates.h" "GL/GLIndexTemplates.h" "GL/GLPrimitiveTemplates.h" "GL/GLScalarLimits.h" "GL/GLScalarConverter.h" "GL/GLColor.h" "GL/GLColorOperations.h" "GL/GLVector.h" "GL/GLBox.h" "GL/GLVertexArrayTemplates.h" "GL/GLVertexArrayParts.h" "GL/GLVertex.h" "GL/GLVertex.icpp" "GL/GLFogEnums.h" "GL/GLFogTemplates.h" "GL/GLFog.h" "GL/GLLightEnums.h" "GL/GLLightTemplates.h" "GL/GLLight.h" "GL/GLLightModelEnums.h" "GL/GLLightModelTemplates.h" "GL/GLMaterialEnums.h" "GL/GLMaterialTemplates.h" "GL/GLMaterial.h" "GL/GLTexEnvEnums.h" "GL/GLTexEnvTemplates.h" "GL/GLMatrixEnums.h" "GL/GLMatrixTemplates.h" "GL/GLMiscTemplates.h" "GL/GLGetTemplates.h" "GL/GLGetPrimitiveTemplates.h" "GL/GLGetFogTemplates.h" "GL/GLGetLightTemplates.h" "GL/GLGetMaterialTemplates.h" "GL/GLGetTexEnvTemplates.h" "GL/GLGetMatrixTemplates.h" "GL/GLGetMiscTemplates.h")) nil [27371 29219])
            ("GLWRAPPERS_SOURCES" variable (:default-value ("GL/GLScalarLimits.cpp" "GL/GLColor.cpp" "GL/GLVertex.cpp" "GL/GLFog.cpp" "GL/GLLight.cpp" "GL/GLMaterial.cpp")) nil [29220 29455])
            ("$(GLWRAPPERS_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [29456 29518])
            ("$(call LIBRARYNAME,libGLWrappers)" function (:arguments ("PACKAGES" "+=" "$(MYGLWRAPPERS_DEPENDS)")) nil [29519 29590])
            ("$(call LIBRARYNAME,libGLWrappers)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYGLWRAPPERS_INCLUDE)")) nil [29590 29671])
            ("$(call LIBRARYNAME,libGLWrappers)" function (:arguments ("CFLAGS" "+=" "$(MYGLWRAPPERS_CFLAGS)")) nil [29671 29739])
            ("$(call LIBRARYNAME,libGLWrappers)" function (:arguments ("|" "$(call DEPENDENCIES,MYGLWRAPPERS)")) nil [29739 29810])
            ("$(call LIBRARYNAME,libGLWrappers)" function (:arguments ("$(GLWRAPPERS_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [29810 29887])
            (".PHONY" function (:arguments ("libGLWrappers")) nil [29887 29909])
            ("libGLWrappers" function (:arguments ("$(call LIBRARYNAME,libGLWrappers)")) nil [29909 29958])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-USB")) nil [30005 30060])
            ("GLSUPPORT_HEADERS" variable (:default-value ("GL/Config.h" "GL/GLPrintError.h" "GL/GLMarshallers.h" "GL/GLMarshallers.icpp" "GL/GLValueCoders.h" "GL/GLLightTracker.h" "GL/GLClipPlaneTracker.h" "GL/TLSHelper.h" "GL/GLObject.h" "GL/GLContextData.h" "GL/GLExtensions.h" "GL/GLExtensionManager.h" "GL/GLTextureObject.h" "GL/GLShader.h" "GL/GLGeometryShader.h" "GL/GLAutomaticShader.h" "GL/GLLineLightingShader.h" "GL/GLColorMap.h" "GL/GLNumberRenderer.h" "GL/GLFont.h" "GL/GLString.h" "GL/GLLabel.h" "GL/GLLineIlluminator.h" "GL/GLModels.h")) nil [30946 31894])
            ("GLSUPPORTEXTENSION_HEADERS" variable (:default-value ("$(wildcard GL/Extensions/*.h)" "$(wildcard GL/Extensions/*.icpp)")) nil [31895 32018])
            ("GLSUPPORT_SOURCES" variable (:default-value ("GL/GLPrintError.cpp" "GL/GLMarshallers.cpp" "GL/GLValueCoders.cpp" "GL/GLLightTracker.cpp" "GL/GLClipPlaneTracker.cpp" "GL/GLObject.cpp" "GL/Internal/GLThingManager.cpp" "GL/GLContextData.cpp" "GL/GLExtensions.cpp" "GL/GLExtensionManager.cpp" "$(wildcard GL/Extensions/*.cpp)" "GL/GLTextureObject.cpp" "GL/GLShader.cpp" "GL/GLGeometryShader.cpp" "GL/GLAutomaticShader.cpp" "GL/GLLineLightingShader.cpp" "GL/GLColorMap.cpp" "GL/GLNumberRenderer.cpp" "GL/GLFont.cpp" "GL/GLString.cpp" "GL/GLLabel.cpp" "GL/GLLineIlluminator.cpp" "GL/GLModels.cpp")) nil [32019 33009])
            ("$(GLSUPPORT_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [33010 33071])
            ("$(call LIBRARYNAME,libGLSupport)" function (:arguments ("PACKAGES" "+=" "$(MYGLSUPPORT_DEPENDS)")) nil [33072 33141])
            ("$(call LIBRARYNAME,libGLSupport)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYGLSUPPORT_INCLUDE)")) nil [33141 33220])
            ("$(call LIBRARYNAME,libGLSupport)" function (:arguments ("CFLAGS" "+=" "$(MYGLSUPPORT_CFLAGS)")) nil [33220 33286])
            ("$(call LIBRARYNAME,libGLSupport)" function (:arguments ("|" "$(call DEPENDENCIES,MYGLSUPPORT)")) nil [33286 33355])
            ("$(call LIBRARYNAME,libGLSupport)" function (:arguments ("$(GLSUPPORT_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [33355 33430])
            (".PHONY" function (:arguments ("libGLSupport")) nil [33430 33451])
            ("libGLSupport" function (:arguments ("$(call LIBRARYNAME,libGLSupport)")) nil [33451 33498])
            ("GLXSUPPORT_HEADERS" variable (:default-value ("GL/GLContext.h" "GL/GLWindow.h")) nil [33550 33623])
            ("GLXSUPPORT_SOURCES" variable (:default-value ("GL/GLContext.cpp" "GL/GLWindow.cpp")) nil [33624 33701])
            ("$(GLXSUPPORT_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [33702 33764])
            ("$(call LIBRARYNAME,libGLXSupport)" function (:arguments ("PACKAGES" "+=" "$(MYGLXSUPPORT_DEPENDS)")) nil [33765 33836])
            ("$(call LIBRARYNAME,libGLXSupport)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYGLXSUPPORT_INCLUDE)")) nil [33836 33917])
            ("$(call LIBRARYNAME,libGLXSupport)" function (:arguments ("CFLAGS" "+=" "$(MYGLXSUPPORT_CFLAGS)")) nil [33917 33985])
            ("$(call LIBRARYNAME,libGLXSupport)" function (:arguments ("|" "$(call DEPENDENCIES,MYGLXSUPPORT)")) nil [33985 34056])
            ("$(call LIBRARYNAME,libGLXSupport)" function (:arguments ("$(GLXSUPPORT_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [34056 34133])
            (".PHONY" function (:arguments ("libGLXSupport")) nil [34133 34155])
            ("libGLXSupport" function (:arguments ("$(call LIBRARYNAME,libGLXSupport)")) nil [34155 34204])
            ("GLGEOMETRY_HEADERS" variable (:default-value ("GL/GLGeometryWrappers.h" "GL/GLGeometryVertex.h" "GL/GLGeometryVertex.icpp" "GL/GLTransformationWrappers.h" "GL/GLTransformationWrappers.icpp" "GL/GLFrustum.h" "GL/GLFrustum.icpp" "GL/GLPolylineTube.h")) nil [34289 34589])
            ("GLGEOMETRY_SOURCES" variable (:default-value ("GL/GLGeometryVertex.cpp" "GL/GLTransformationWrappers.cpp" "GL/GLFrustum.cpp" "GL/GLPolylineTube.cpp")) nil [34590 34775])
            ("$(GLGEOMETRY_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [34776 34838])
            ("$(call LIBRARYNAME,libGLGeometry)" function (:arguments ("PACKAGES" "+=" "$(MYGLGEOMETRY_DEPENDS)")) nil [34839 34910])
            ("$(call LIBRARYNAME,libGLGeometry)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYGLGEOMETRY_INCLUDE)")) nil [34910 34991])
            ("$(call LIBRARYNAME,libGLGeometry)" function (:arguments ("|" "$(call DEPENDENCIES,MYGLGEOMETRY)")) nil [34991 35062])
            ("$(call LIBRARYNAME,libGLGeometry)" function (:arguments ("$(GLGEOMETRY_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [35062 35139])
            (".PHONY" function (:arguments ("libGLGeometry")) nil [35139 35161])
            ("libGLGeometry" function (:arguments ("$(call LIBRARYNAME,libGLGeometry)")) nil [35161 35210])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-GLSupport")) nil [35254 35312])
            ("IMAGES_HEADERS" variable (:default-value ("$(wildcard Images/*.h)" "$(wildcard Images/*.icpp)")) nil [36173 36258])
            ("IMAGES_SOURCES" variable (:default-value ("$(wildcard Images/*.cpp)")) nil [36259 36301])
            ("$(IMAGES_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [36302 36360])
            ("$(call LIBRARYNAME,libImages)" function (:arguments ("PACKAGES" "+=" "$(MYIMAGES_DEPENDS)")) nil [36361 36424])
            ("$(call LIBRARYNAME,libImages)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYIMAGES_INCLUDE)")) nil [36424 36497])
            ("$(call LIBRARYNAME,libImages)" function (:arguments ("|" "$(call DEPENDENCIES,MYIMAGES)")) nil [36497 36560])
            ("$(call LIBRARYNAME,libImages)" function (:arguments ("$(IMAGES_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [36560 36629])
            (".PHONY" function (:arguments ("libImages")) nil [36629 36647])
            ("libImages" function (:arguments ("$(call LIBRARYNAME,libImages)")) nil [36647 36688])
            ("GLMOTIF_HEADERS" variable (:default-value ("$(wildcard GLMotif/*.h)" "$(wildcard GLMotif/*.icpp)")) nil [36754 36843])
            ("GLMOTIF_SOURCES" variable (:default-value ("$(wildcard GLMotif/*.cpp)")) nil [36844 36888])
            ("$(GLMOTIF_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [36889 36948])
            ("$(call LIBRARYNAME,libGLMotif)" function (:arguments ("PACKAGES" "+=" "$(MYGLMOTIF_DEPENDS)")) nil [36949 37014])
            ("$(call LIBRARYNAME,libGLMotif)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYGLMOTIF_INCLUDE)")) nil [37014 37089])
            ("$(call LIBRARYNAME,libGLMotif)" function (:arguments ("|" "$(call DEPENDENCIES,MYGLMOTIF)")) nil [37089 37154])
            ("$(call LIBRARYNAME,libGLMotif)" function (:arguments ("$(GLMOTIF_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [37154 37225])
            (".PHONY" function (:arguments ("libGLMotif")) nil [37225 37244])
            ("libGLMotif" function (:arguments ("$(call LIBRARYNAME,libGLMotif)")) nil [37244 37287])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Images")) nil [37327 37381])
            ("SOUND_HEADERS" variable (:default-value ("$(wildcard Sound/*.h)" "$(wildcard Sound/*.icpp)")) nil [38037 38118])
            ("SOUND_SOURCES" variable (:default-value ("$(wildcard Sound/*.cpp)")) nil [38485 38525])
            ("$(SOUND_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [38851 38908])
            ("$(call LIBRARYNAME,libSound)" function (:arguments ("PACKAGES" "+=" "$(MYSOUND_DEPENDS)")) nil [38909 38970])
            ("$(call LIBRARYNAME,libSound)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYSOUND_INCLUDE)")) nil [38970 39041])
            ("$(call LIBRARYNAME,libSound)" function (:arguments ("|" "$(call DEPENDENCIES,MYSOUND)")) nil [39041 39102])
            ("$(call LIBRARYNAME,libSound)" function (:arguments ("$(SOUND_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [39102 39169])
            (".PHONY" function (:arguments ("libSound")) nil [39169 39186])
            ("libSound" function (:arguments ("$(call LIBRARYNAME,libSound)")) nil [39186 39225])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Sound")) nil [39265 39318])
            ("VIDEO_HEADERS" variable (:default-value ("Video/Config.h" "Video/VideoDataFormat.h" "Video/FrameBuffer.h" "Video/ImageExtractor.h" "Video/VideoDevice.h" "Video/Colorspaces.h" "Video/ImageExtractorRGB8.h" "Video/ImageExtractorY10B.h" "Video/ImageExtractorYUYV.h" "Video/ImageExtractorUYVY.h" "Video/ImageExtractorYV12.h" "Video/BayerPattern.h" "Video/ImageExtractorBA81.h" "Video/YpCbCr420Texture.h" "Video/VideoPane.h")) nil [40224 40840])
            ("VIDEO_SOURCES" variable (:default-value ("Video/VideoDataFormat.cpp" "Video/VideoDevice.cpp" "Video/ImageExtractorRGB8.cpp" "Video/ImageExtractorY10B.cpp" "Video/ImageExtractorYUYV.cpp" "Video/ImageExtractorUYVY.cpp" "Video/ImageExtractorYV12.cpp" "Video/ImageExtractorBA81.cpp" "Video/YpCbCr420Texture.cpp" "Video/VideoPane.cpp")) nil [41647 42094])
            ("$(VIDEO_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [42802 42859])
            ("$(call LIBRARYNAME,libVideo)" function (:arguments ("PACKAGES" "+=" "$(MYVIDEO_DEPENDS)")) nil [42860 42921])
            ("$(call LIBRARYNAME,libVideo)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYVIDEO_INCLUDE)")) nil [42921 42992])
            ("$(call LIBRARYNAME,libVideo)" function (:arguments ("|" "$(call DEPENDENCIES,MYVIDEO)")) nil [42992 43053])
            ("$(call LIBRARYNAME,libVideo)" function (:arguments ("$(VIDEO_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [43053 43120])
            (".PHONY" function (:arguments ("libVideo")) nil [43120 43137])
            ("libVideo" function (:arguments ("$(call LIBRARYNAME,libVideo)")) nil [43137 43176])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Video")) nil [43223 43280])
            ("ALSUPPORT_HEADERS" variable (:default-value ("$(wildcard AL/*.h)" "$(wildcard AL/*.icpp)")) nil [43696 43779])
            ("ALSUPPORT_SOURCES" variable (:default-value ("$(wildcard AL/*.cpp)" "$(wildcard AL/Internal/*.cpp)")) nil [43780 43873])
            ("$(ALSUPPORT_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [43874 43935])
            ("$(call LIBRARYNAME,libALSupport)" function (:arguments ("PACKAGES" "+=" "$(MYALSUPPORT_DEPENDS)")) nil [43936 44005])
            ("$(call LIBRARYNAME,libALSupport)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYALSUPPORT_INCLUDE)")) nil [44005 44084])
            ("$(call LIBRARYNAME,libALSupport)" function (:arguments ("|" "$(call DEPENDENCIES,MYALSUPPORT)")) nil [44084 44153])
            ("$(call LIBRARYNAME,libALSupport)" function (:arguments ("$(ALSUPPORT_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [44153 44228])
            (".PHONY" function (:arguments ("libALSupport")) nil [44228 44249])
            ("libALSupport" function (:arguments ("$(call LIBRARYNAME,libALSupport)")) nil [44249 44296])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-ALSupport")) nil [44351 44875])
            ("SCENEGRAPH_HEADERS" variable (:default-value ("$(wildcard SceneGraph/*.h)" "$(wildcard SceneGraph/*.icpp)")) nil [44876 44977])
            ("SCENEGRAPH_SOURCES" variable (:default-value ("$(wildcard SceneGraph/*.cpp)" "$(wildcard SceneGraph/Internal/*.cpp)")) nil [44978 45089])
            ("$(SCENEGRAPH_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [45090 45152])
            ("$(call LIBRARYNAME,libSceneGraph)" function (:arguments ("PACKAGES" "+=" "$(MYSCENEGRAPH_DEPENDS)")) nil [45153 45224])
            ("$(call LIBRARYNAME,libSceneGraph)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYSCENEGRAPH_INCLUDE)")) nil [45224 45305])
            ("$(call LIBRARYNAME,libSceneGraph)" function (:arguments ("|" "$(call DEPENDENCIES,MYSCENEGRAPH)")) nil [45305 45376])
            ("$(call LIBRARYNAME,libSceneGraph)" function (:arguments ("$(SCENEGRAPH_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [45376 45453])
            (".PHONY" function (:arguments ("libSceneGraph")) nil [45453 45475])
            ("libSceneGraph" function (:arguments ("$(call LIBRARYNAME,libSceneGraph)")) nil [45475 45524])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-SceneGraph")) nil [45587 45644])
            ("VRUI_HEADERS" variable (:default-value ("$(wildcard Vrui/*.h)" "$(wildcard Vrui/*.icpp)")) nil [47863 47940])
            ("VRUI_IGNORE_SOURCES" variable (:default-value ("Vrui/Internal/InputDeviceDock.cpp" "Vrui/Internal/TheoraMovieSaver.cpp" "Vrui/Internal/KinectRecorder.cpp" "Vrui/Internal/KinectPlayback.cpp")) nil [48045 48274])
            ("VRUI_SOURCES" variable (:default-value ("$(wildcard Vrui/*.cpp)" "$(filter-out $(VRUI_IGNORE_SOURCES),$(wildcard Vrui/Internal/*.cpp))" "$(wildcard Vrui/Internal/$(OSSPECFILEINSERT)/*.cpp)")) nil [48275 48468])
            ("$(VRUI_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [48560 48616])
            ("$(OBJDIR)" function (:arguments ("CFLAGS" "+=" "-DVRUI_INTERNAL_CONFIG_TOOLDSONAMETEMPLATE='\"$(PLUGININSTALLDIR)/$(VRTOOLSDIREXT)/lib%s.$(PLUGINFILEEXT)\"'")) nil [48660 48807])
            ("$(OBJDIR)" function (:arguments ("CFLAGS" "+=" "-DVRUI_INTERNAL_CONFIG_VISLETDSONAMETEMPLATE='\"$(PLUGININSTALLDIR)/$(VRVISLETSDIREXT)/lib%s.$(PLUGINFILEEXT)\"'")) nil [48807 48960])
            ("$(OBJDIR)" function (:arguments ("CFLAGS" "+=" "-DVRUI_INTERNAL_CONFIG_LIBDIR='\"$(LIBINSTALLDIR)\"'" "-DVRUI_INTERNAL_CONFIG_EXECUTABLEDIR='\"$(EXECUTABLEINSTALLDIR)\"'" "-DVRUI_INTERNAL_CONFIG_PLUGINDIR='\"$(PLUGININSTALLDIR)\"'")) nil [48960 49293])
            ("$(call LIBRARYNAME,libVrui)" function (:arguments ("PACKAGES" "+=" "$(MYVRUI_DEPENDS)")) nil [49294 49353])
            ("$(call LIBRARYNAME,libVrui)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYVRUI_INCLUDE)")) nil [49353 49422])
            ("$(call LIBRARYNAME,libVrui)" function (:arguments ("|" "$(call DEPENDENCIES,MYVRUI)")) nil [49422 49481])
            ("$(call LIBRARYNAME,libVrui)" function (:arguments ("$(VRUI_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [49481 49546])
            (".PHONY" function (:arguments ("libVrui")) nil [49546 49562])
            ("libVrui" function (:arguments ("$(call LIBRARYNAME,libVrui)")) nil [49562 49599])
            ("$(VRTOOLSDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [49690 49746])
            ("$(VRTOOLSDIR)" function (:arguments ("CFLAGS" "+=" "$(CPLUGINFLAGS)")) nil [49746 49809])
            ("$(VRTOOLSDIR)" function (:arguments ("PLUGINDEPENDENCIES" "=")) nil [49809 49868])
            ("$(VRTOOLSDIR)" function (:arguments ("$(OBJDIR)/Vrui/Tools/%.o")) nil [50331 50418])
            ("$(VRTOOLS_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [50618 50677])
            (".SECONDARY" function (:arguments ("$(VRTOOLS_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [50727 50778])
            (".PHONY" function (:arguments ("VRTools")) nil [50779 50795])
            ("VRTools" function (:arguments ("$(VRTOOLS)")) nil [50795 50815])
            ("$(VRVISLETSDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [50904 50962])
            ("$(VRVISLETSDIR)" function (:arguments ("CFLAGS" "+=" "$(CPLUGINFLAGS)")) nil [50962 51027])
            ("$(VRVISLETSDIR)" function (:arguments ("PLUGINDEPENDENCIES" "=")) nil [51027 51088])
            ("$(VRVISLETSDIR)" function (:arguments ("$(OBJDIR)/Vrui/Vislets/%.o")) nil [51563 51656])
            ("$(VRVISLETSDIR)" function (:arguments ("PACKAGES" "+=" "MYSCENEGRAPH")) nil [51893 51972])
            ("$(VRVISLETS_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [51973 52034])
            (".SECONDARY" function (:arguments ("$(VRVISLETS_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [52083 52136])
            (".PHONY" function (:arguments ("VRVislets")) nil [52137 52155])
            ("VRVislets" function (:arguments ("$(VRVISLETS)")) nil [52155 52179])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Vrui")) nil [52216 52277])
            ("VRDEVICEDAEMON_SOURCES" variable (:default-value ("VRDeviceDaemon/VRDevice.cpp" "VRDeviceDaemon/VRCalibrator.cpp" "VRDeviceDaemon/VRDeviceManager.cpp" "Vrui/Internal/VRDeviceDescriptor.cpp" "Vrui/Internal/VRDevicePipe.cpp" "VRDeviceDaemon/VRDeviceServer.cpp" "VRDeviceDaemon/VRDeviceDaemon.cpp")) nil [54025 54443])
            ("$(VRDEVICEDAEMON_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [54444 54510])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYGEOMETRY" "MYCOMM" "MYIO" "MYTHREADS" "MYMISC" "DL")) nil [54511 54592])
            ("$(EXEDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYVRUI_INCLUDE)")) nil [54592 54658])
            ("$(EXEDIR)" function (:arguments ("CFLAGS" "+=" "-DVERBOSE")) nil [54658 54704])
            ("$(EXEDIR)" function (:arguments ("LINKFLAGS" "+=" "$(PLUGINHOSTLINKFLAGS)")) nil [54704 54766])
            ("$(EXEDIR)" function (:arguments ("$(VRDEVICEDAEMON_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [54766 54838])
            (".PHONY" function (:arguments ("VRDeviceDaemon")) nil [54838 54861])
            ("VRDeviceDaemon" function (:arguments ("$(EXEDIR)/VRDeviceDaemon")) nil [54861 54902])
            ("$(VRDEVICESDIR)" function (:arguments ("$(OBJDIR)/VRDeviceDaemon/VRDevices/VRPNConnection.o" "$(OBJDIR)/VRDeviceDaemon/VRDevices/VRPNClient.o")) nil [55104 55302])
            ("$(VRDEVICESDIR)" function (:arguments ("PLUGINDEPENDENCIES" "+=" "$(BLUETOOTH_LIBDIR)" "$(BLUETOOTH_LIBS)")) nil [55303 55415])
            ("$(VRDEVICESDIR)" function (:arguments ("$(OBJDIR)/VRDeviceDaemon/VRDevices/Wiimote.o" "$(OBJDIR)/VRDeviceDaemon/VRDevices/WiimoteTracker.o")) nil [55415 55618])
            ("$(VRDEVICESDIR)" function (:arguments ("PACKAGES" "+=" "MYUSB")) nil [55619 55691])
            ("$(VRDEVICESDIR)" function (:arguments ("PLUGINDEPENDENCIES" "+=" "$(MYUSB_LIBDIR)" "$(MYUSB_LIBS)")) nil [55691 55797])
            ("$(VRDEVICESDIR)" function (:arguments ("$(OBJDIR)/VRDeviceDaemon/VRDevices/RazerHydra.o" "$(OBJDIR)/VRDeviceDaemon/VRDevices/RazerHydraDevice.o")) nil [55982 56194])
            ("$(VRDEVICESDIR)" function (:arguments ("PACKAGES" "+=" "MYUSB")) nil [56195 56261])
            ("$(VRDEVICESDIR)" function (:arguments ("PLUGINDEPENDENCIES" "+=" "$(MYUSB_LIBDIR)" "$(MYUSB_LIBS)")) nil [56261 56361])
            ("$(VRDEVICESDIR)" function (:arguments ("PACKAGES" "+=" "MYGEOMETRY" "MYCOMM" "MYTHREADS" "MYMISC")) nil [56579 56665])
            ("$(VRDEVICESDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYVRUI_INCLUDE)")) nil [56665 56744])
            ("$(VRDEVICESDIR)" function (:arguments ("CFLAGS" "+=" "$(CPLUGINFLAGS)" "-DVERBOSE")) nil [56744 56819])
            ("$(VRDEVICESDIR)" function (:arguments ("PLUGINDEPENDENCIES" "=")) nil [56819 56880])
            ("$(VRDEVICESDIR)" function (:arguments ("$(OBJDIR)/VRDeviceDaemon/VRDevices/%.o")) nil [56880 56985])
            ("$(VRDEVICES_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [57185 57246])
            ("$(OBJDIR)" function (:arguments ("|" "$(DEPDIR)/config")) nil [57246 57411])
            ("$(OBJDIR)" function (:arguments ("|" "$(DEPDIR)/config")) nil [57246 57411])
            (".SECONDARY" function (:arguments ("$(VRDEVICES_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [57470 57523])
            ("$(VRCALIBRATORSDIR)" function (:arguments ("PACKAGES" "+=" "MYGEOMETRY" "MYCOMM" "MYTHREADS" "MYMISC")) nil [57605 57695])
            ("$(VRCALIBRATORSDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYVRUI_INCLUDE)")) nil [57695 57778])
            ("$(VRCALIBRATORSDIR)" function (:arguments ("CFLAGS" "+=" "$(CPLUGINFLAGS)")) nil [57778 57847])
            ("$(VRCALIBRATORSDIR)" function (:arguments ("PLUGINDEPENDENCIES" "=")) nil [57847 57912])
            ("$(VRCALIBRATORSDIR)" function (:arguments ("$(OBJDIR)/VRDeviceDaemon/VRCalibrators/%.o")) nil [57912 58029])
            ("$(VRCALIBRATORS_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [58229 58294])
            (".SECONDARY" function (:arguments ("$(VRCALIBRATORS_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [58350 58407])
            (".PHONY" function (:arguments ("VRCalibrators")) nil [58408 58430])
            ("VRCalibrators" function (:arguments ("$(VRCALIBRATORS)")) nil [58430 58462])
            ("UTILITIES_SOURCES" variable (:default-value ("$(wildcard Vrui/Utilities/*.cpp)" "$(wildcard Calibration/*.cpp)")) nil [58502 58610])
            ("$(UTILITIES_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [58610 58671])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [58714 58755])
            ("$(EXEDIR)" function (:arguments ("$(OBJDIR)/Vrui/Utilities/DeviceTest.o")) nil [58755 58815])
            (".PHONY" function (:arguments ("DeviceTest")) nil [58815 58834])
            ("DeviceTest" function (:arguments ("$(EXEDIR)/DeviceTest")) nil [58834 58867])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [58909 58953])
            ("$(EXEDIR)" function (:arguments ("$(OBJDIR)/Vrui/Utilities/EyeCalibrator.o")) nil [58953 59019])
            (".PHONY" function (:arguments ("EyeCalibrator")) nil [59019 59041])
            ("EyeCalibrator" function (:arguments ("$(EXEDIR)/EyeCalibrator")) nil [59041 59080])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [59129 59184])
            ("$(EXEDIR)" function (:arguments ("$(OBJDIR)/Vrui/Utilities/PrintInputDeviceDataFile.o")) nil [59184 59272])
            (".PHONY" function (:arguments ("PrintInputDeviceDataFile")) nil [59272 59305])
            ("PrintInputDeviceDataFile" function (:arguments ("$(EXEDIR)/PrintInputDeviceDataFile")) nil [59305 59366])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "X11")) nil [59409 59448])
            ("$(EXEDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "-ICalibration")) nil [59448 59507])
            ("$(EXEDIR)" function (:arguments ("$(OBJDIR)/Calibration/XBackground.o")) nil [59507 59566])
            (".PHONY" function (:arguments ("XBackground")) nil [59566 59586])
            ("XBackground" function (:arguments ("$(EXEDIR)/XBackground")) nil [59586 59621])
            ("MEASUREENVIRONMENT_SOURCES" variable (:default-value ("Calibration/TotalStation.cpp" "Calibration/NaturalPointClient.cpp" "Calibration/MeasureEnvironment.cpp")) nil [59654 59844])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [59845 59894])
            ("$(EXEDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "-ICalibration")) nil [59894 59960])
            ("$(EXEDIR)" function (:arguments ("$(MEASUREENVIRONMENT_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [59960 60040])
            (".PHONY" function (:arguments ("MeasureEnvironment")) nil [60040 60067])
            ("MeasureEnvironment" function (:arguments ("$(EXEDIR)/MeasureEnvironment")) nil [60067 60116])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [60167 60214])
            ("$(EXEDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "-ICalibration")) nil [60214 60278])
            ("$(EXEDIR)" function (:arguments ("$(OBJDIR)/Calibration/ScreenCalibrator.o")) nil [60278 60347])
            (".PHONY" function (:arguments ("ScreenCalibrator")) nil [60347 60372])
            ("ScreenCalibrator" function (:arguments ("$(EXEDIR)/ScreenCalibrator")) nil [60372 60417])
            ("ALIGNTRACKINGMARKERS_SOURCES" variable (:default-value ("Calibration/ReadOptiTrackMarkerFile.cpp" "Calibration/NaturalPointClient.cpp" "Calibration/AlignTrackingMarkers.cpp")) nil [60467 60676])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [60677 60728])
            ("$(EXEDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "-ICalibration")) nil [60728 60796])
            ("$(EXEDIR)" function (:arguments ("$(ALIGNTRACKINGMARKERS_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [60796 60880])
            (".PHONY" function (:arguments ("AlignTrackingMarkers")) nil [60880 60909])
            ("AlignTrackingMarkers" function (:arguments ("$(EXEDIR)/AlignTrackingMarkers")) nil [60909 60962])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [61006 61055])
            ("$(EXEDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "-ICalibration")) nil [61055 61121])
            ("$(EXEDIR)" function (:arguments ("$(OBJDIR)/Calibration/SampleTrackerField.o")) nil [61121 61194])
            (".PHONY" function (:arguments ("SampleTrackerField")) nil [61194 61221])
            ("SampleTrackerField" function (:arguments ("$(EXEDIR)/SampleTrackerField")) nil [61221 61270])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI" "MYUSB")) nil [61314 61367])
            ("$(EXEDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "-ICalibration")) nil [61367 61431])
            ("$(EXEDIR)" function (:arguments ("$(OBJDIR)/Calibration/OculusCalibrator.o")) nil [61431 61500])
            (".PHONY" function (:arguments ("OculusCalibrator")) nil [61500 61525])
            ("OculusCalibrator" function (:arguments ("$(EXEDIR)/OculusCalibrator")) nil [61525 61570])
            ("$(DEPDIR)" function (:arguments ("$(MAKEFILEFRAGMENT)" "$(MAKECONFIGFILE)" "$(PKGCONFIGFILE)")) nil [61830 62020])
            ("SYSTEMPACKAGES" variable (:default-value ("$(sort $(patsubst MY%,,$(PACKAGES_RECEXPAND)))")) nil [62021 62085])
            ("VRUIAPP_INCLUDEDIRS" variable (:default-value ("-I$$(VRUI_INCLUDEDIR)")) nil [62085 62129])
            ("VRUIAPP_INCLUDEDIRS" variable (:default-value ("$(sort $(foreach PACKAGENAME,$(SYSTEMPACKAGES),$($(PACKAGENAME)_INCLUDE)))")) nil [62129 62227])
            ("VRUIAPP_CFLAGS" variable (:default-value ("$(CSYSFLAGS)")) nil [62227 62257])
            ("VRUIAPP_CFLAGS" variable (:default-value ("$(sort $(foreach PACKAGENAME,$(PACKAGES_RECEXPAND),$($(PACKAGENAME)_CFLAGS)))")) nil [62257 62353])
            ("VRUIAPP_LDIRS" variable (:default-value ("-L$$(VRUI_LIBDIR)")) nil [62353 62387])
            ("VRUIAPP_LDIRS" variable (:default-value ("$(sort $(foreach PACKAGENAME,$(SYSTEMPACKAGES),$($(PACKAGENAME)_LIBDIR)))")) nil [62387 62478])
            ("VRUIAPP_LIBS" variable (:default-value ("$(patsubst lib%,-l%.$(LDEXT),$(LIBRARY_NAMES))")) nil [62478 62540])
            ("VRUIAPP_LIBS" variable (:default-value ("$(foreach PACKAGENAME,$(SYSTEMPACKAGES),$($(PACKAGENAME)_LIBS))")) nil [62540 62620])
            ("VRUIAPP_LFLAGS" variable nil nil [62620 62637])
            ("$(MAKEFILEFRAGMENT)" function (:arguments ("PACKAGES" "=" "MYVRUI")) nil [62835 62874])
            ("$(MAKEFILEFRAGMENT)" function (:arguments ("$(DEPDIR)/Configure-End")) nil [62874 63978])
            ("$(MAKECONFIGFILE)" function (:arguments ("$(DEPDIR)/Configure-End")) nil [64152 67083])
            ("ROGUE_SYSTEMPACKAGES" variable (:default-value ("$(filter %_,$(foreach PACKAGENAME,$(SYSTEMPACKAGES),$(PACKAGENAME)_$($(PACKAGENAME)_PKGNAME)))")) nil [67084 67202])
            ("ROGUE_INCLUDEDIRS" variable (:default-value ("$(sort $(foreach PACKAGENAME,$(ROGUE_SYSTEMPACKAGES),$($(PACKAGENAME)INCLUDE)))")) nil [67202 67302])
            ("ROGUE_LIBDIRS" variable (:default-value ("$(sort $(foreach PACKAGENAME,$(ROGUE_SYSTEMPACKAGES),$($(PACKAGENAME)LIBDIR)))")) nil [67302 67397])
            ("ROGUE_LIBS" variable (:default-value ("$(foreach PACKAGENAME,$(ROGUE_SYSTEMPACKAGES),$($(PACKAGENAME)LIBS))")) nil [67397 67479])
            ("$(PKGCONFIGFILE)" function (:arguments ("PACKAGES" "=" "MYVRUI")) nil [67537 67573])
            ("$(PKGCONFIGFILE)" function (:arguments ("$(DEPDIR)/Configure-End")) nil [67573 68213])
            ("install" function nil nil [68826 68835]))          
      :file "makefile"
      :pointmax 75262
      :fsize 75261
      :lastmodtime '(22569 43353 185908 650000)
      :unmatched-syntax '((shell-command 75207 . 75261) (bol 75206 . 75206) (shell-command 75177 . 75205) (bol 75176 . 75176) (shell-command 75122 . 75175) (bol 75121 . 75121) (shell-command 75017 . 75078) (bol 75016 . 75016) (shell-command 74981 . 75015) (bol 74980 . 74980) (shell-command 74914 . 74979) (bol 74913 . 74913) (shell-command 74815 . 74858) (bol 74814 . 74814) (shell-command 74762 . 74813) (bol 74761 . 74761) (shell-command 74731 . 74760) (bol 74730 . 74730) (shell-command 74676 . 74729) (bol 74675 . 74675) (shell-command 74567 . 74627) (bol 74566 . 74566) (shell-command 74494 . 74565) (bol 74493 . 74493) (shell-command 74358 . 74444) (bol 74357 . 74357) (shell-command 74307 . 74356) (bol 74306 . 74306) (shell-command 74267 . 74305) (bol 74266 . 74266) (shell-command 74199 . 74265) (bol 74198 . 74198) (shell-command 74158 . 74197) (bol 74157 . 74157) (shell-command 74092 . 74156) (bol 74091 . 74091) (shell-command 74052 . 74090) (bol 74051 . 74051) (shell-command 73996 . 74050) (bol 73995 . 73995) (shell-command 73904 . 73947) (bol 73903 . 73903) (shell-command 73832 . 73896) (bol 73831 . 73831) (shell-command 73695 . 73806) (bol 73694 . 73694) (shell-command 73519 . 73693) (bol 73518 . 73518) (shell-command 73358 . 73517) (bol 73357 . 73357) (shell-command 73328 . 73356) (bol 73327 . 73327) (shell-command 73267 . 73326) (bol 73266 . 73266) (shell-command 73145 . 73213) (bol 73144 . 73144) (shell-command 73089 . 73143) (bol 73088 . 73088) (shell-command 73027 . 73087) (bol 73026 . 73026) (shell-command 72975 . 73025) (bol 72974 . 72974) (shell-command 72913 . 72973) (bol 72912 . 72912) (shell-command 72861 . 72911) (bol 72860 . 72860) (shell-command 72803 . 72859) (bol 72802 . 72802) (shell-command 72753 . 72801) (bol 72752 . 72752) (shell-command 72700 . 72751) (bol 72699 . 72699) (shell-command 72619 . 72648) (bol 72618 . 72618) (shell-command 72550 . 72617) (bol 72549 . 72549) (shell-command 72470 . 72548) (bol 72469 . 72469) (shell-command 72397 . 72468) (bol 72396 . 72396) (shell-command 72344 . 72395) (bol 72343 . 72343) (shell-command 72271 . 72318) (bol 72270 . 72270) (shell-command 72234 . 72269) (bol 72233 . 72233) (shell-command 72174 . 72232) (bol 72173 . 72173) (shell-command 72055 . 72124) (bol 72054 . 72054) (shell-command 72017 . 72053) (bol 72016 . 72016) (shell-command 71977 . 72015) (bol 71976 . 71976) (shell-command 71947 . 71975) (bol 71946 . 71946) (shell-command 71896 . 71945) (bol 71895 . 71895) (shell-command 71786 . 71848) (bol 71785 . 71785) (shell-command 71748 . 71784) (bol 71747 . 71747) (shell-command 71672 . 71746) (bol 71671 . 71671) (shell-command 71628 . 71670) (bol 71627 . 71627) (shell-command 71561 . 71626) (bol 71560 . 71560) (shell-command 71525 . 71559) (bol 71524 . 71524) (ENDIF 71512 . 71517) (bol 71510 . 71510) (shell-command 71433 . 71509) (bol 71432 . 71432) (shell-command 71388 . 71431) (bol 71387 . 71387) (semantic-list 71352 . 71386) (IFNEQ 71346 . 71351) (bol 71344 . 71344) (shell-command 71256 . 71320) (bol 71255 . 71255) (shell-command 71217 . 71254) (bol 71216 . 71216) (ENDIF 71204 . 71209) (bol 71202 . 71202) (shell-command 71125 . 71201) (bol 71124 . 71124) (shell-command 71080 . 71123) (bol 71079 . 71079) (semantic-list 71044 . 71078) (IFNEQ 71038 . 71043) (bol 71036 . 71036) (shell-command 70948 . 71012) (bol 70947 . 70947) (shell-command 70909 . 70946) (bol 70908 . 70908) (shell-command 70839 . 70907) (bol 70838 . 70838) (shell-command 70798 . 70837) (bol 70797 . 70797) (shell-command 70730 . 70796) (bol 70729 . 70729) (shell-command 70690 . 70728) (bol 70689 . 70689) (shell-command 70622 . 70688) (bol 70621 . 70621) (shell-command 70554 . 70620) (bol 70553 . 70553) (shell-command 70467 . 70552) (bol 70466 . 70466) (shell-command 70420 . 70465) (bol 70419 . 70419) (shell-command 70353 . 70418) (bol 70352 . 70352) (shell-command 70285 . 70351) (bol 70284 . 70284) (shell-command 70249 . 70283) (bol 70248 . 70248) (shell-command 70175 . 70241) (bol 70174 . 70174) (shell-command 70135 . 70173) (bol 70134 . 70134) (shell-command 70039 . 70109) (bol 70038 . 70038) (shell-command 69997 . 70037) (bol 69996 . 69996) (shell-command 69933 . 69995) (bol 69932 . 69932) (shell-command 69895 . 69931) (bol 69894 . 69894) (shell-command 69825 . 69893) (bol 69824 . 69824) (shell-command 69784 . 69823) (bol 69783 . 69783) (shell-command 69720 . 69782) (bol 69719 . 69719) (shell-command 69682 . 69718) (bol 69681 . 69681) (shell-command 69612 . 69680) (bol 69611 . 69611) (shell-command 69571 . 69610) (bol 69570 . 69570) (shell-command 69511 . 69569) (bol 69510 . 69510) (shell-command 69475 . 69509) (bol 69474 . 69474) (shell-command 69407 . 69473) (bol 69406 . 69406) (shell-command 69367 . 69405) (bol 69366 . 69366) (shell-command 69305 . 69365) (bol 69304 . 69304) (shell-command 69268 . 69303) (bol 69267 . 69267) (shell-command 69198 . 69266) (bol 69197 . 69197) (shell-command 69157 . 69196) (bol 69156 . 69156) (shell-command 69085 . 69155) (bol 69084 . 69084) (shell-command 69043 . 69083) (bol 69042 . 69042) (shell-command 68979 . 69041) (bol 68978 . 68978) (shell-command 68941 . 68977) (bol 68940 . 68940) (shell-command 68884 . 68939) (bol 68883 . 68883) (shell-command 68724 . 68824) (bol 68723 . 68723) (ENDIF 68716 . 68721) (bol 68716 . 68716) (shell-command 68582 . 68715) (bol 68581 . 68581) (ENDIF 68570 . 68575) (bol 68568 . 68568) (shell-command 68434 . 68567) (bol 68433 . 68433) (ELSE 68428 . 68432) (bol 68426 . 68426) (shell-command 68270 . 68425) (bol 68269 . 68269) (semantic-list 68252 . 68268) (IFNEQ 68246 . 68251) (bol 68244 . 68244) (shell-command 64003 . 64092) (bol 64002 . 64002) (ENDIF 62744 . 62749) (bol 62742 . 62742) (semantic-list 62728 . 62741) (punctuation 62727 . 62728) (punctuation 62726 . 62727) (punctuation 62725 . 62726) (symbol 62719 . 62725) (punctuation 62718 . 62719) (symbol 62715 . 62718) (punctuation 62713 . 62714) (punctuation 62712 . 62713) (symbol 62697 . 62711) (bol 62693 . 62693) (semantic-list 62676 . 62692) (IFNEQ 62670 . 62675) (bol 62668 . 62668) (shell-command 58148 . 58221) (bol 58147 . 58147) (shell-command 58127 . 58146) (bol 58126 . 58126) (shell-command 58048 . 58120) (bol 58047 . 58047) (shell-command 57104 . 57177) (bol 57103 . 57103) (shell-command 57083 . 57102) (bol 57082 . 57082) (shell-command 57004 . 57076) (bol 57003 . 57003) (ENDIF 56528 . 56533) (bol 56526 . 56526) (semantic-list 56517 . 56525) (punctuation 56516 . 56517) (symbol 56515 . 56516) (semantic-list 56500 . 56515) (punctuation 56499 . 56500) (punctuation 56498 . 56499) (symbol 56492 . 56498) (punctuation 56491 . 56492) (symbol 56488 . 56491) (punctuation 56486 . 56487) (punctuation 56485 . 56486) (symbol 56469 . 56484) (punctuation 56467 . 56468) (semantic-list 56452 . 56467) (punctuation 56451 . 56452) (symbol 56436 . 56451) (semantic-list 56422 . 56436) (punctuation 56421 . 56422) (bol 56417 . 56417) (semantic-list 56400 . 56416) (IFNEQ 56394 . 56399) (bol 56392 . 56392) (ENDIF 55970 . 55975) (bol 55968 . 55968) (semantic-list 55959 . 55967) (punctuation 55958 . 55959) (symbol 55957 . 55958) (semantic-list 55942 . 55957) (punctuation 55941 . 55942) (punctuation 55940 . 55941) (symbol 55934 . 55940) (punctuation 55933 . 55934) (symbol 55930 . 55933) (punctuation 55928 . 55929) (punctuation 55927 . 55928) (symbol 55911 . 55926) (punctuation 55909 . 55910) (semantic-list 55894 . 55909) (punctuation 55893 . 55894) (symbol 55872 . 55893) (semantic-list 55858 . 55872) (punctuation 55857 . 55858) (bol 55853 . 55853) (semantic-list 55836 . 55852) (IFNEQ 55830 . 55835) (bol 55828 . 55828) (symbol 55082 . 55096) (symbol 55071 . 55081) (symbol 55065 . 55070) (symbol 55054 . 55064) (symbol 55047 . 55053) (symbol 55036 . 55046) (punctuation 55034 . 55035) (punctuation 55033 . 55034) (symbol 55014 . 55032) (punctuation 55012 . 55013) (semantic-list 54997 . 55012) (punctuation 54996 . 54997) (symbol 54982 . 54996) (semantic-list 54968 . 54982) (punctuation 54967 . 54968) (bol 54965 . 54965) (shell-command 53982 . 54023) (bol 53981 . 53981) (shell-command 53948 . 53980) (bol 53947 . 53947) (shell-command 53803 . 53946) (bol 53802 . 53802) (shell-command 53679 . 53801) (bol 53678 . 53678) (shell-command 53556 . 53677) (bol 53555 . 53555) (shell-command 53429 . 53554) (bol 53428 . 53428) (shell-command 53309 . 53427) (bol 53308 . 53308) (shell-command 53168 . 53307) (bol 53167 . 53167) (shell-command 53035 . 53166) (bol 53034 . 53034) (shell-command 52977 . 53033) (bol 52976 . 52976) (shell-command 52899 . 52969) (bol 52898 . 52898) (shell-command 52823 . 52892) (bol 52822 . 52822) (shell-command 52718 . 52782) (bol 52717 . 52717) (shell-command 52648 . 52711) (bol 52647 . 52647) (shell-command 52552 . 52603) (bol 52551 . 52551) (ENDIF 52540 . 52545) (bol 52538 . 52538) (shell-command 52477 . 52537) (bol 52476 . 52476) (ELSE 52471 . 52475) (bol 52469 . 52469) (shell-command 52416 . 52468) (bol 52415 . 52415) (semantic-list 52382 . 52414) (IFNEQ 52376 . 52381) (bol 52374 . 52374) (shell-command 52323 . 52373) (bol 52322 . 52322) (shell-command 51775 . 51848) (bol 51774 . 51774) (shell-command 51754 . 51773) (bol 51753 . 51753) (shell-command 51675 . 51747) (bol 51674 . 51674) (bol 51460 . 51460) (ENDIF 51454 . 51459) (bol 51452 . 51452) (ENDIF 51446 . 51451) (bol 51442 . 51442) (semantic-list 51424 . 51441) (punctuation 51423 . 51424) (symbol 51422 . 51423) (semantic-list 51404 . 51422) (punctuation 51403 . 51404) (punctuation 51402 . 51403) (symbol 51396 . 51402) (punctuation 51395 . 51396) (symbol 51392 . 51395) (punctuation 51390 . 51391) (punctuation 51389 . 51390) (symbol 51373 . 51388) (punctuation 51371 . 51372) (semantic-list 51356 . 51371) (punctuation 51355 . 51356) (symbol 51349 . 51355) (semantic-list 51335 . 51349) (punctuation 51334 . 51335) (bol 51328 . 51328) (semantic-list 51311 . 51327) (IFNEQ 51305 . 51310) (bol 51301 . 51301) (semantic-list 51276 . 51300) (IFNEQ 51270 . 51275) (bol 51268 . 51268) (semantic-list 51211 . 51267) (punctuation 51210 . 51211) (semantic-list 51195 . 51209) (punctuation 51194 . 51195) (symbol 51192 . 51194) (punctuation 51190 . 51191) (punctuation 51189 . 51190) (symbol 51173 . 51188) (punctuation 51171 . 51172) (semantic-list 51156 . 51171) (punctuation 51155 . 51156) (symbol 51149 . 51155) (semantic-list 51135 . 51149) (punctuation 51134 . 51135) (bol 51132 . 51132) (shell-command 50537 . 50610) (bol 50536 . 50536) (shell-command 50516 . 50535) (bol 50515 . 50515) (shell-command 50437 . 50509) (bol 50436 . 50436) (bol 50230 . 50230) (ENDIF 50224 . 50229) (bol 50222 . 50222) (ENDIF 50216 . 50221) (bol 50212 . 50212) (semantic-list 50196 . 50211) (punctuation 50195 . 50196) (symbol 50194 . 50195) (semantic-list 50176 . 50194) (punctuation 50175 . 50176) (punctuation 50174 . 50175) (symbol 50168 . 50174) (punctuation 50167 . 50168) (symbol 50164 . 50167) (punctuation 50162 . 50163) (punctuation 50161 . 50162) (symbol 50145 . 50160) (punctuation 50143 . 50144) (semantic-list 50128 . 50143) (punctuation 50127 . 50128) (symbol 50121 . 50127) (semantic-list 50109 . 50121) (punctuation 50108 . 50109) (bol 50102 . 50102) (semantic-list 50085 . 50101) (IFNEQ 50079 . 50084) (bol 50075 . 50075) (semantic-list 50050 . 50074) (IFNEQ 50044 . 50049) (bol 50042 . 50042) (semantic-list 49987 . 50041) (punctuation 49986 . 49987) (semantic-list 49973 . 49985) (punctuation 49972 . 49973) (symbol 49970 . 49972) (punctuation 49968 . 49969) (punctuation 49967 . 49968) (symbol 49951 . 49966) (punctuation 49949 . 49950) (semantic-list 49934 . 49949) (punctuation 49933 . 49934) (symbol 49927 . 49933) (semantic-list 49915 . 49927) (punctuation 49914 . 49915) (bol 49912 . 49912) (symbol 48518 . 48552) (punctuation 48516 . 48517) (punctuation 48515 . 48516) (symbol 48502 . 48514) (bol 48500 . 48500) (shell-command 47830 . 47861) (bol 47829 . 47829) (shell-command 47797 . 47828) (bol 47796 . 47796) (shell-command 47656 . 47795) (bol 47655 . 47655) (shell-command 47549 . 47654) (bol 47548 . 47548) (shell-command 47446 . 47547) (bol 47445 . 47445) (shell-command 47349 . 47444) (bol 47348 . 47348) (shell-command 47228 . 47347) (bol 47227 . 47227) (shell-command 47108 . 47226) (bol 47107 . 47107) (shell-command 46989 . 47106) (bol 46988 . 46988) (shell-command 46867 . 46987) (bol 46866 . 46866) (shell-command 46738 . 46865) (bol 46737 . 46737) (shell-command 46631 . 46736) (bol 46630 . 46630) (shell-command 46575 . 46629) (bol 46574 . 46574) (shell-command 46521 . 46567) (bol 46520 . 46520) (shell-command 46439 . 46514) (bol 46438 . 46438) (shell-command 46346 . 46394) (bol 46345 . 46345) (shell-command 46292 . 46339) (bol 46291 . 46291) (shell-command 46183 . 46252) (bol 46182 . 46182) (shell-command 46108 . 46176) (bol 46107 . 46107) (shell-command 46026 . 46068) (bol 46025 . 46025) (shell-command 45978 . 46019) (bol 45977 . 45977) (shell-command 45890 . 45938) (bol 45889 . 45889) (shell-command 45835 . 45883) (bol 45834 . 45834) (shell-command 45744 . 45795) (bol 45743 . 45743) (shell-command 45687 . 45737) (bol 45686 . 45686) (shell-command 43658 . 43694) (bol 43657 . 43657) (shell-command 43636 . 43656) (bol 43635 . 43635) (shell-command 43539 . 43634) (bol 43538 . 43538) (shell-command 43447 . 43537) (bol 43446 . 43446) (shell-command 43413 . 43445) (bol 43412 . 43412) (shell-command 43362 . 43405) (bol 43361 . 43361) (shell-command 43313 . 43355) (bol 43312 . 43312) (symbol 42771 . 42794) (symbol 42726 . 42749) (symbol 42683 . 42704) (symbol 42639 . 42661) (symbol 42594 . 42617) (symbol 42552 . 42572) (symbol 42511 . 42530) (symbol 42472 . 42489) (punctuation 42470 . 42471) (punctuation 42469 . 42470) (symbol 42455 . 42468) (bol 42453 . 42453) (symbol 42381 . 42414) (punctuation 42379 . 42380) (punctuation 42378 . 42379) (symbol 42364 . 42377) (bol 42362 . 42362) (symbol 42283 . 42323) (symbol 42230 . 42261) (punctuation 42228 . 42229) (punctuation 42227 . 42228) (symbol 42213 . 42226) (bol 42211 . 42211) (symbol 42146 . 42174) (punctuation 42144 . 42145) (punctuation 42143 . 42144) (symbol 42129 . 42142) (bol 42127 . 42127) (symbol 41618 . 41639) (symbol 41575 . 41596) (symbol 41534 . 41553) (symbol 41492 . 41512) (symbol 41449 . 41470) (symbol 41409 . 41427) (symbol 41370 . 41387) (symbol 41333 . 41348) (symbol 41296 . 41311) (punctuation 41294 . 41295) (punctuation 41293 . 41294) (symbol 41279 . 41292) (bol 41277 . 41277) (ENDIF 41233 . 41238) (bol 41231 . 41231) (symbol 41199 . 41230) (punctuation 41197 . 41198) (punctuation 41196 . 41197) (symbol 41176 . 41195) (bol 41172 . 41172) (semantic-list 41146 . 41171) (IFNEQ 41140 . 41145) (bol 41138 . 41138) (ENDIF 41132 . 41137) (bol 41130 . 41130) (symbol 41091 . 41129) (symbol 41032 . 41061) (punctuation 41030 . 41031) (punctuation 41029 . 41030) (symbol 41009 . 41028) (bol 41005 . 41005) (semantic-list 40981 . 41004) (IFNEQ 40975 . 40980) (bol 40973 . 40973) (punctuation 40970 . 40971) (symbol 40950 . 40969) (bol 40948 . 40948) (symbol 40892 . 40918) (punctuation 40890 . 40891) (punctuation 40889 . 40890) (symbol 40875 . 40888) (bol 40873 . 40873) (shell-command 40190 . 40222) (bol 40189 . 40189) (shell-command 40165 . 40188) (bol 40164 . 40164) (shell-command 40056 . 40163) (bol 40055 . 40055) (shell-command 39965 . 40054) (bol 39964 . 39964) (shell-command 39874 . 39963) (bol 39873 . 39873) (shell-command 39787 . 39872) (bol 39786 . 39786) (shell-command 39747 . 39785) (bol 39746 . 39746) (shell-command 39696 . 39739) (bol 39695 . 39695) (shell-command 39647 . 39689) (bol 39646 . 39646) (shell-command 39554 . 39607) (bol 39553 . 39553) (shell-command 39495 . 39547) (bol 39494 . 39494) (shell-command 39405 . 39455) (bol 39404 . 39404) (shell-command 39349 . 39398) (bol 39348 . 39348) (ENDIF 38838 . 38843) (bol 38836 . 38836) (symbol 38807 . 38835) (symbol 38755 . 38783) (punctuation 38753 . 38754) (punctuation 38752 . 38753) (symbol 38738 . 38751) (bol 38734 . 38734) (semantic-list 38709 . 38733) (IFNEQ 38703 . 38708) (bol 38701 . 38701) (ENDIF 38695 . 38700) (bol 38693 . 38693) (symbol 38654 . 38692) (symbol 38601 . 38630) (punctuation 38599 . 38600) (punctuation 38598 . 38599) (symbol 38584 . 38597) (bol 38580 . 38580) (semantic-list 38556 . 38579) (IFNEQ 38550 . 38555) (bol 38548 . 38548) (ENDIF 38472 . 38477) (bol 38470 . 38470) (symbol 38443 . 38469) (symbol 38387 . 38413) (punctuation 38385 . 38386) (punctuation 38384 . 38385) (symbol 38364 . 38383) (bol 38360 . 38360) (semantic-list 38335 . 38359) (IFNEQ 38329 . 38334) (bol 38327 . 38327) (ENDIF 38321 . 38326) (bol 38319 . 38319) (symbol 38282 . 38318) (symbol 38225 . 38252) (punctuation 38223 . 38224) (punctuation 38222 . 38223) (symbol 38202 . 38221) (bol 38198 . 38198) (semantic-list 38174 . 38197) (IFNEQ 38168 . 38173) (bol 38166 . 38166) (punctuation 38163 . 38164) (symbol 38143 . 38162) (bol 38141 . 38141) (shell-command 38003 . 38035) (bol 38002 . 38002) (shell-command 37978 . 38001) (bol 37977 . 37977) (shell-command 37869 . 37976) (bol 37868 . 37868) (shell-command 37780 . 37867) (bol 37779 . 37779) (shell-command 37693 . 37778) (bol 37692 . 37692) (shell-command 37653 . 37691) (bol 37652 . 37652) (shell-command 37596 . 37645) (bol 37595 . 37595) (shell-command 37541 . 37589) (bol 37540 . 37540) (shell-command 37460 . 37502) (bol 37459 . 37459) (shell-command 37412 . 37453) (bol 37411 . 37411) (shell-command 36138 . 36171) (bol 36137 . 36137) (shell-command 36112 . 36136) (bol 36111 . 36111) (shell-command 35999 . 36110) (bol 35998 . 35998) (shell-command 35907 . 35997) (bol 35906 . 35906) (shell-command 35815 . 35905) (bol 35814 . 35814) (shell-command 35725 . 35813) (bol 35724 . 35724) (shell-command 35683 . 35723) (bol 35682 . 35682) (shell-command 35636 . 35675) (bol 35635 . 35635) (shell-command 35591 . 35629) (bol 35590 . 35590) (shell-command 35512 . 35550) (bol 35511 . 35511) (shell-command 35468 . 35505) (bol 35467 . 35467) (shell-command 35389 . 35427) (bol 35388 . 35388) (shell-command 35345 . 35382) (bol 35344 . 35344) (shell-command 30908 . 30944) (bol 30907 . 30907) (shell-command 30886 . 30906) (bol 30885 . 30885) (shell-command 30789 . 30884) (bol 30788 . 30788) (shell-command 30686 . 30787) (bol 30685 . 30685) (shell-command 30592 . 30684) (bol 30591 . 30591) (shell-command 30505 . 30590) (bol 30504 . 30504) (shell-command 30391 . 30503) (bol 30390 . 30390) (shell-command 30357 . 30389) (bol 30356 . 30356) (shell-command 30294 . 30355) (bol 30293 . 30293) (shell-command 30246 . 30286) (bol 30245 . 30245) (ENDIF 30234 . 30239) (bol 30232 . 30232) (shell-command 30179 . 30231) (bol 30178 . 30178) (ELSE 30173 . 30177) (bol 30171 . 30171) (shell-command 30123 . 30170) (bol 30122 . 30122) (semantic-list 30099 . 30121) (IFNEQ 30093 . 30098) (bol 30091 . 30091) (shell-command 22842 . 22872) (bol 22841 . 22841) (shell-command 22819 . 22840) (bol 22818 . 22818) (shell-command 22718 . 22817) (bol 22717 . 22717) (shell-command 22615 . 22716) (bol 22614 . 22614) (shell-command 22526 . 22613) (bol 22525 . 22525) (shell-command 22490 . 22524) (bol 22489 . 22489) (shell-command 22420 . 22482) (bol 22419 . 22419) (ENDIF 22408 . 22413) (bol 22406 . 22406) (shell-command 22347 . 22405) (bol 22346 . 22346) (ELSE 22341 . 22345) (bol 22339 . 22339) (shell-command 22288 . 22338) (bol 22287 . 22287) (semantic-list 22253 . 22286) (IFNEQ 22247 . 22252) (bol 22245 . 22245) (shell-command 22190 . 22244) (bol 22189 . 22189) (shell-command 21496 . 21530) (bol 21495 . 21495) (shell-command 21469 . 21494) (bol 21468 . 21468) (shell-command 21352 . 21467) (bol 21351 . 21351) (shell-command 21251 . 21350) (bol 21250 . 21250) (shell-command 21150 . 21249) (bol 21149 . 21149) (shell-command 21045 . 21148) (bol 21044 . 21044) (shell-command 20948 . 21043) (bol 20947 . 20947) (shell-command 20904 . 20946) (bol 20903 . 20903) (shell-command 20843 . 20896) (bol 20842 . 20842) (shell-command 20791 . 20836) (bol 20790 . 20790) (shell-command 20683 . 20744) (bol 20682 . 20682) (shell-command 20634 . 20676) (bol 20633 . 20633) (shell-command 20519 . 20591) (bol 20518 . 20518) (shell-command 20469 . 20512) (bol 20468 . 20468) (shell-command 20375 . 20428) (bol 20374 . 20374) (shell-command 20313 . 20368) (bol 20312 . 20312) (shell-command 19588 . 19623) (bol 19587 . 19587) (shell-command 19560 . 19586) (bol 19559 . 19559) (shell-command 19439 . 19558) (bol 19438 . 19438) (shell-command 19340 . 19437) (bol 19339 . 19339) (shell-command 19241 . 19338) (bol 19240 . 19240) (shell-command 19195 . 19239) (bol 19194 . 19194) (shell-command 19145 . 19187) (bol 19144 . 19144) (shell-command 19104 . 19143) (bol 19103 . 19103) (shell-command 19057 . 19097) (bol 19056 . 19056) (shell-command 19015 . 19055) (bol 19014 . 19014) (shell-command 17197 . 17231) (bol 17196 . 17196) (shell-command 17102 . 17195) (bol 17101 . 17101) (shell-command 17006 . 17100) (bol 17005 . 17005) (shell-command 16922 . 17004) (bol 16921 . 16921) (shell-command 16844 . 16920) (bol 16843 . 16843) (shell-command 16774 . 16842) (bol 16773 . 16773) (shell-command 16698 . 16772) (bol 16697 . 16697) (shell-command 16627 . 16696) (bol 16626 . 16626) (shell-command 16555 . 16625) (bol 16554 . 16554) (shell-command 16483 . 16553) (bol 16482 . 16482) (shell-command 16413 . 16481) (bol 16412 . 16412) (shell-command 16340 . 16411) (bol 16339 . 16339) (shell-command 16263 . 16338) (bol 16262 . 16262) (shell-command 16193 . 16261) (bol 16192 . 16192) (shell-command 16120 . 16191) (bol 16119 . 16119) (shell-command 16053 . 16118) (bol 16052 . 16052) (shell-command 16002 . 16045) (bol 16001 . 16001) (shell-command 15246 . 15278) (bol 15245 . 15245) (shell-command 15192 . 15238) (bol 15191 . 15191) (shell-command 15140 . 15185) (bol 15139 . 15139) (symbol 14218 . 14240) (punctuation 14216 . 14217) (symbol 14199 . 14215) (bol 14197 . 14197) (symbol 14163 . 14191) (punctuation 14161 . 14162) (symbol 14144 . 14160) (bol 14142 . 14142) (symbol 14064 . 14081) (semantic-list 14056 . 14064) (punctuation 14055 . 14056) (punctuation 14053 . 14054) (punctuation 14052 . 14053) (symbol 14040 . 14051) (bol 14038 . 14038) (symbol 12877 . 12916) (symbol 12806 . 12851) (punctuation 12804 . 12805) (punctuation 12803 . 12804) (symbol 12785 . 12802) (bol 12783 . 12783) (symbol 12700 . 12743) (punctuation 12698 . 12699) (punctuation 12697 . 12698) (symbol 12679 . 12696) (bol 12677 . 12677) (symbol 12596 . 12633) (punctuation 12594 . 12595) (punctuation 12593 . 12594) (symbol 12575 . 12592) (bol 12573 . 12573) (symbol 10555 . 10561) (punctuation 10553 . 10554) (punctuation 10552 . 10553) (symbol 10538 . 10551) (bol 10536 . 10536) (semantic-list 9880 . 9903) (punctuation 9879 . 9880) (symbol 9878 . 9879) (semantic-list 9866 . 9878) (punctuation 9865 . 9866) (punctuation 9863 . 9864) (symbol 9851 . 9862) (bol 9849 . 9849) (semantic-list 9837 . 9848) (punctuation 9836 . 9837) (punctuation 9834 . 9835) (punctuation 9833 . 9834) (symbol 9826 . 9832) (bol 9824 . 9824) (symbol 9812 . 9818) (punctuation 9810 . 9811) (symbol 9800 . 9809) (bol 9798 . 9798) (symbol 9795 . 9797) (semantic-list 9788 . 9795) (punctuation 9787 . 9788) (symbol 9786 . 9787) (semantic-list 9783 . 9786) (punctuation 9782 . 9783) (symbol 9781 . 9782) (semantic-list 9769 . 9781) (punctuation 9768 . 9769) (punctuation 9766 . 9767) (symbol 9754 . 9765) (bol 9752 . 9752) (symbol 9460 . 9469) (semantic-list 9449 . 9460) (punctuation 9448 . 9449) (symbol 9440 . 9448) (punctuation 9438 . 9439) (symbol 9414 . 9437) (bol 9412 . 9412) (symbol 9397 . 9406) (semantic-list 9386 . 9397) (punctuation 9385 . 9386) (symbol 9365 . 9385) (punctuation 9363 . 9364) (symbol 9339 . 9362) (bol 9337 . 9337) (symbol 9304 . 9305) (punctuation 9302 . 9303) (symbol 9278 . 9301) (bol 9276 . 9276) (symbol 9269 . 9270) (punctuation 9267 . 9268) (symbol 9243 . 9266) (bol 9241 . 9241) (symbol 9119 . 9124) (semantic-list 9102 . 9119) (punctuation 9101 . 9102) (punctuation 9099 . 9100) (symbol 9084 . 9098) (bol 9082 . 9082) (symbol 9065 . 9076) (semantic-list 9048 . 9065) (punctuation 9047 . 9048) (punctuation 9045 . 9046) (symbol 9030 . 9044) (bol 9028 . 9028) (semantic-list 8961 . 8973) (punctuation 8960 . 8961) (punctuation 8958 . 8959) (symbol 8946 . 8957) (bol 8944 . 8944) (semantic-list 8930 . 8943) (punctuation 8929 . 8930) (symbol 8919 . 8929) (semantic-list 8907 . 8919) (punctuation 8906 . 8907) (punctuation 8904 . 8905) (symbol 8890 . 8903) (bol 8888 . 8888) (symbol 8877 . 8887) (semantic-list 8869 . 8877) (punctuation 8868 . 8869) (symbol 8867 . 8868) (semantic-list 8855 . 8867) (punctuation 8854 . 8855) (punctuation 8852 . 8853) (symbol 8832 . 8851) (bol 8830 . 8830) (semantic-list 8816 . 8829) (punctuation 8815 . 8816) (symbol 8809 . 8815) (semantic-list 8797 . 8809) (punctuation 8796 . 8797) (punctuation 8794 . 8795) (symbol 8778 . 8793) (bol 8776 . 8776) (semantic-list 8762 . 8775) (punctuation 8761 . 8762) (symbol 8757 . 8761) (semantic-list 8745 . 8757) (punctuation 8744 . 8745) (punctuation 8742 . 8743) (symbol 8728 . 8741) (bol 8726 . 8726) (ENDIF 8720 . 8725) (bol 8718 . 8718) (semantic-list 8709 . 8717) (punctuation 8708 . 8709) (symbol 8707 . 8708) (semantic-list 8695 . 8707) (punctuation 8694 . 8695) (punctuation 8692 . 8693) (symbol 8671 . 8691) (bol 8667 . 8667) (semantic-list 8653 . 8666) (punctuation 8652 . 8653) (semantic-list 8644 . 8652) (punctuation 8643 . 8644) (symbol 8642 . 8643) (semantic-list 8630 . 8642) (punctuation 8629 . 8630) (punctuation 8627 . 8628) (symbol 8613 . 8626) (bol 8609 . 8609) (ELSE 8604 . 8608) (bol 8602 . 8602) (symbol 8595 . 8601) (semantic-list 8587 . 8595) (punctuation 8586 . 8587) (symbol 8585 . 8586) (semantic-list 8573 . 8585) (punctuation 8572 . 8573) (punctuation 8570 . 8571) (symbol 8549 . 8569) (bol 8545 . 8545) (symbol 8538 . 8544) (semantic-list 8525 . 8538) (punctuation 8524 . 8525) (semantic-list 8516 . 8524) (punctuation 8515 . 8516) (symbol 8514 . 8515) (semantic-list 8502 . 8514) (punctuation 8501 . 8502) (punctuation 8499 . 8500) (symbol 8485 . 8498) (bol 8481 . 8481) (symbol 8475 . 8480) (IFDEF 8469 . 8474) (bol 8467 . 8467) (semantic-list 8453 . 8466) (punctuation 8452 . 8453) (semantic-list 8440 . 8452) (punctuation 8439 . 8440) (symbol 8438 . 8439) (semantic-list 8426 . 8438) (punctuation 8425 . 8426) (punctuation 8423 . 8424) (symbol 8406 . 8422) (bol 8404 . 8404) (ENDIF 8398 . 8403) (bol 8396 . 8396) (semantic-list 8384 . 8395) (punctuation 8383 . 8384) (symbol 8382 . 8383) (punctuation 8380 . 8381) (symbol 8368 . 8379) (bol 8364 . 8364) (ELSE 8359 . 8363) (bol 8357 . 8357) (punctuation 8354 . 8355) (symbol 8342 . 8353) (bol 8338 . 8338) (semantic-list 8282 . 8337) (IFEQ 8277 . 8281) (bol 8275 . 8275) (symbol 8265 . 8269) (punctuation 8263 . 8264) (symbol 8251 . 8262) (bol 8249 . 8249) (semantic-list 8237 . 8248) (punctuation 8236 . 8237) (symbol 8221 . 8236) (semantic-list 8209 . 8221) (punctuation 8208 . 8209) (punctuation 8206 . 8207) (symbol 8192 . 8205) (bol 8190 . 8190) (symbol 8179 . 8189) (semantic-list 8171 . 8179) (punctuation 8170 . 8171) (symbol 8165 . 8170) (semantic-list 8153 . 8165) (punctuation 8152 . 8153) (punctuation 8150 . 8151) (symbol 8130 . 8149) (bol 8128 . 8128) (semantic-list 8116 . 8127) (punctuation 8115 . 8116) (symbol 8104 . 8115) (semantic-list 8092 . 8104) (punctuation 8091 . 8092) (punctuation 8089 . 8090) (symbol 8073 . 8088) (bol 8071 . 8071) (semantic-list 8059 . 8070) (punctuation 8058 . 8059) (symbol 8053 . 8058) (semantic-list 8041 . 8053) (punctuation 8040 . 8041) (punctuation 8038 . 8039) (symbol 8024 . 8037) (bol 8022 . 8022) (ENDIF 8016 . 8021) (bol 8014 . 8014) (semantic-list 8005 . 8013) (punctuation 8004 . 8005) (symbol 7999 . 8004) (semantic-list 7987 . 7999) (punctuation 7986 . 7987) (punctuation 7984 . 7985) (symbol 7963 . 7983) (bol 7959 . 7959) (semantic-list 7947 . 7958) (punctuation 7946 . 7947) (symbol 7945 . 7946) (semantic-list 7937 . 7945) (punctuation 7936 . 7937) (symbol 7931 . 7936) (semantic-list 7919 . 7931) (punctuation 7918 . 7919) (punctuation 7916 . 7917) (symbol 7902 . 7915) (bol 7898 . 7898) (ELSE 7893 . 7897) (bol 7891 . 7891) (symbol 7884 . 7890) (semantic-list 7876 . 7884) (punctuation 7875 . 7876) (symbol 7870 . 7875) (semantic-list 7858 . 7870) (punctuation 7857 . 7858) (punctuation 7855 . 7856) (symbol 7834 . 7854) (bol 7830 . 7830) (symbol 7823 . 7829) (semantic-list 7812 . 7823) (punctuation 7811 . 7812) (symbol 7810 . 7811) (semantic-list 7802 . 7810) (punctuation 7801 . 7802) (symbol 7796 . 7801) (semantic-list 7784 . 7796) (punctuation 7783 . 7784) (punctuation 7781 . 7782) (symbol 7767 . 7780) (bol 7763 . 7763) (symbol 7757 . 7762) (IFDEF 7751 . 7756) (bol 7749 . 7749) (semantic-list 7737 . 7748) (punctuation 7736 . 7737) (symbol 7735 . 7736) (semantic-list 7723 . 7735) (punctuation 7722 . 7723) (symbol 7717 . 7722) (semantic-list 7705 . 7717) (punctuation 7704 . 7705) (punctuation 7702 . 7703) (symbol 7685 . 7701) (bol 7683 . 7683) (symbol 7172 . 7179) (punctuation 7170 . 7171) (punctuation 7169 . 7170) (symbol 7162 . 7168) (bol 7160 . 7160))))
  :file "!home!nshetty!apps!vrui!OpticalTracking!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
