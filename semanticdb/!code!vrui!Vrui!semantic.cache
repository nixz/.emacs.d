;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode makefile-gmake-mode
      :tags 
        '( ("INSTALLDIR" variable (:default-value ("/apps/Vrui-4.2")) nil [1575 1604])
            ("VRUI_PACKAGEROOT" variable (:default-value ("$(shell pwd)")) nil [1873 1906])
            ("VRUI_MAKEDIR" variable (:default-value ("$(VRUI_PACKAGEROOT)/BuildRoot")) nil [1906 1952])
            ("$(VRUI_MAKEDIR)/SystemDefinitions" include nil nil [2035 2077])
            ("$(VRUI_MAKEDIR)/Packages.System" include nil nil [2077 2117])
            ("OPENVR_BASEDIR" variable (:default-value ("$(PWD)/Contributed/OpenVR")) nil [4130 4173])
            ("$(VRUI_MAKEDIR)/Packages.Vrui" include nil nil [5365 5403])
            ("USE_RPATH" variable (:default-value ("1")) nil [6086 6100])
            ("GLSUPPORT_USE_TLS" variable (:default-value ("0")) nil [6763 6785])
            ("LINUX_INPUT_H_HAS_STRUCTS" variable (:default-value ("1")) nil [7097 7127])
            ("VRUI_VRWINDOW_USE_SWAPGROUPS" variable (:default-value ("0")) nil [7468 7501])
            ("VRDEVICES_USE_INPUT_ABSTRACTION" variable (:default-value ("0")) nil [7692 7728])
            ("VRDEVICES_USE_BLUETOOTH" variable (:default-value ("$(SYSTEM_HAVE_BLUETOOTH)")) nil [8151 8202])
            ("VRUI_VERSION" variable (:default-value ("4002004")) nil [8452 8475])
            ("MAJORLIBVERSION" variable (:default-value ("4")) nil [8475 8495])
            ("MINORLIBVERSION" variable (:default-value ("2")) nil [8495 8515])
            ("VRUI_NAME" variable (:default-value ("Vrui-$(MAJORLIBVERSION).$(MINORLIBVERSION)")) nil [8515 8571])
            ("LIBDESTDIR" variable (:default-value ("$(VRUI_PACKAGEROOT)/$(MYLIBEXT)")) nil [8700 8746])
            ("VRUI_INCLUDEDIR" variable (:default-value ("$(VRUI_PACKAGEROOT)")) nil [8807 8845])
            ("VRUI_LIBDIR" variable (:default-value ("$(VRUI_PACKAGEROOT)/$(MYLIBEXT)")) nil [8845 8891])
            ("PLUGININSTALLDIR" variable (:default-value ("$(LIBINSTALLDIR)")) nil [10507 10543])
            ("PACKAGES" variable nil nil [11791 11803])
            ("LIBRARIES" variable nil nil [11979 11992])
            ("PLUGINS" variable nil nil [11992 12003])
            ("EXECUTABLES" variable nil nil [12003 12018])
            ("LIBRARY_NAMES" variable (:default-value ("libMisc" "libRealtime" "libThreads")) nil [12047 12139])
            ("LIBRARY_NAMES" variable (:default-value ("libIO" "libPlugins" "libComm" "libCluster" "libMath" "libGeometry" "libGLWrappers" "libGLSupport" "libGLXSupport" "libGLGeometry" "libImages" "libGLMotif" "libSound" "libVideo" "libALSupport" "libSceneGraph" "libVrui")) nil [12272 12812])
            ("LIBRARIES" variable (:default-value ("$(LIBRARY_NAMES:%=$(call LIBRARYNAME,%))")) nil [12813 12867])
            ("VRTOOLS_SOURCES" variable (:default-value ("$(wildcard Vrui/Tools/*.cpp)")) nil [12911 12958])
            ("VRTOOLSDIREXT" variable (:default-value ("VRTools")) nil [12959 12983])
            ("VRTOOLSDIR" variable (:default-value ("$(LIBDESTDIR)/$(VRTOOLSDIREXT)")) nil [12983 13026])
            ("VRTOOLS" variable (:default-value ("$(VRTOOLS_SOURCES:Vrui/Tools/%.cpp=$(VRTOOLSDIR)/lib%.$(PLUGINFILEEXT))")) nil [13026 13108])
            ("PLUGINS" variable (:default-value ("$(VRTOOLS)")) nil [13108 13130])
            ("VRVISLETS_SOURCES" variable (:default-value ("$(wildcard Vrui/Vislets/*.cpp)")) nil [13173 13224])
            ("VRVISLETSDIREXT" variable (:default-value ("VRVislets")) nil [13225 13253])
            ("VRVISLETSDIR" variable (:default-value ("$(LIBDESTDIR)/$(VRVISLETSDIREXT)")) nil [13253 13301])
            ("VRVISLETS" variable (:default-value ("$(VRVISLETS_SOURCES:Vrui/Vislets/%.cpp=$(VRVISLETSDIR)/lib%.$(PLUGINFILEEXT))")) nil [13301 13391])
            ("PLUGINS" variable (:default-value ("$(VRVISLETS)")) nil [13391 13415])
            ("EXECUTABLES" variable (:default-value ("$(EXEDIR)/VRDeviceDaemon")) nil [13452 13492])
            ("VRDEVICES_IGNORE_SOURCES" variable (:default-value ("VRDeviceDaemon/VRDevices/Joystick.cpp" "VRDeviceDaemon/VRDevices/VRPNConnection.cpp" "VRDeviceDaemon/VRDevices/Wiimote.cpp" "VRDeviceDaemon/VRDevices/WiimoteTracker.cpp" "VRDeviceDaemon/VRDevices/RazerHydra.cpp" "VRDeviceDaemon/VRDevices/RazerHydraDevice.cpp" "VRDeviceDaemon/VRDevices/OculusRift.cpp" "VRDeviceDaemon/VRDevices/OpenVRHost.cpp")) nil [13605 14164])
            ("VRDEVICES_SOURCES" variable (:default-value ("$(filter-out $(VRDEVICES_IGNORE_SOURCES),$(wildcard VRDeviceDaemon/VRDevices/*.cpp))")) nil [14165 14270])
            ("VRDEVICESDIREXT" variable (:default-value ("VRDevices")) nil [14767 14795])
            ("VRDEVICESDIR" variable (:default-value ("$(LIBDESTDIR)/$(VRDEVICESDIREXT)")) nil [14795 14843])
            ("VRDEVICES" variable (:default-value ("$(VRDEVICES_SOURCES:VRDeviceDaemon/VRDevices/%.cpp=$(VRDEVICESDIR)/lib%.$(PLUGINFILEEXT))")) nil [14843 14945])
            ("PLUGINS" variable (:default-value ("$(VRDEVICES)")) nil [14945 14969])
            ("VRCALIBRATORS_SOURCES" variable (:default-value ("$(wildcard VRDeviceDaemon/VRCalibrators/*.cpp)")) nil [15013 15084])
            ("VRCALIBRATORSDIREXT" variable (:default-value ("VRCalibrators")) nil [15085 15121])
            ("VRCALIBRATORSDIR" variable (:default-value ("$(LIBDESTDIR)/$(VRCALIBRATORSDIREXT)")) nil [15121 15177])
            ("VRCALIBRATORS" variable (:default-value ("$(VRCALIBRATORS_SOURCES:VRDeviceDaemon/VRCalibrators/%.cpp=$(VRCALIBRATORSDIR)/lib%.$(PLUGINFILEEXT))")) nil [15177 15295])
            ("PLUGINS" variable (:default-value ("$(VRCALIBRATORS)")) nil [15295 15323])
            ("EXECUTABLES" variable (:default-value ("$(EXEDIR)/DeviceTest" "$(EXEDIR)/TrackingTest")) nil [15541 15617])
            ("EXECUTABLES" variable (:default-value ("$(EXEDIR)/RoomSetup")) nil [15661 15696])
            ("EXECUTABLES" variable (:default-value ("$(EXEDIR)/EyeCalibrator")) nil [15738 15777])
            ("EXECUTABLES" variable (:default-value ("$(EXEDIR)/PrintInputDeviceDataFile")) nil [15829 15879])
            ("EXECUTABLES" variable (:default-value ("$(EXEDIR)/XBackground" "$(EXEDIR)/MeasureEnvironment" "$(EXEDIR)/ScreenCalibrator" "$(EXEDIR)/AlignTrackingMarkers" "$(EXEDIR)/SampleTrackerField")) nil [15919 16140])
            ("MAKECONFIGFILE" variable (:default-value ("BuildRoot/Configuration.Vrui")) nil [16430 16476])
            ("PKGCONFIGFILE" variable (:default-value ("Share/Vrui.pc")) nil [16526 16556])
            ("TEMPLATEMAKEFILE" variable (:default-value ("BuildRoot/makefile")) nil [16598 16636])
            ("ALL" variable (:default-value ("$(LIBRARIES)" "$(EXECUTABLES)" "$(PLUGINS)")) nil [16699 16744])
            (".PHONY" function (:arguments ("all")) nil [16745 16757])
            ("all" function (:arguments ("$(ALL)")) nil [16757 16769])
            ("$(PLUGINS)" function (:arguments ("|" "$(LIBRARIES)")) nil [16828 16855])
            ("$(EXECUTABLES)" function (:arguments ("|" "$(LIBRARIES)")) nil [16855 16886])
            (".PHONY" function (:arguments ("config" "config-invalidate")) nil [17105 17138])
            ("config" function (:arguments ("config-invalidate" "$(DEPDIR)/config")) nil [17138 17181])
            ("config-invalidate" function nil nil [17182 17235])
            ("$(DEPDIR)" function nil nil [17236 17331])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Realtime" "$(DEPDIR)/Configure-Threads" "$(DEPDIR)/Configure-USB" "$(DEPDIR)/Configure-GLSupport" "$(DEPDIR)/Configure-Images" "$(DEPDIR)/Configure-Sound" "$(DEPDIR)/Configure-ALSupport" "$(DEPDIR)/Configure-Video" "$(DEPDIR)/Configure-SceneGraph" "$(DEPDIR)/Configure-Vrui" "$(DEPDIR)/Configure-VRDeviceDaemon")) nil [17495 18196])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Install")) nil [19448 19586])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Makefiles")) nil [19587 19660])
            (".PHONY" function (:arguments ("extraclean")) nil [19866 19885])
            ("extraclean" function nil nil [19885 20082])
            (".PHONY" function (:arguments ("extrasqueakyclean")) nil [20083 20109])
            ("extrasqueakyclean" function nil nil [20109 20305])
            ("$(VRUI_MAKEDIR)/BasicMakefile" include nil nil [20331 20369])
            ("MISC_HEADERS" variable (:default-value ("$(wildcard Misc/*.h)" "$(wildcard Misc/*.icpp)")) nil [20614 20691])
            ("MISC_SOURCES" variable (:default-value ("$(wildcard Misc/*.cpp)")) nil [20692 20730])
            ("$(MISC_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [20731 20787])
            ("$(call LIBRARYNAME,libMisc)" function (:arguments ("PACKAGES" "+=" "$(MYMISC_DEPENDS)")) nil [20788 20847])
            ("$(call LIBRARYNAME,libMisc)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYMISC_INCLUDE)")) nil [20847 20916])
            ("$(call LIBRARYNAME,libMisc)" function (:arguments ("|" "$(call DEPENDENCIES,MYMISC)")) nil [20916 20975])
            ("$(call LIBRARYNAME,libMisc)" function (:arguments ("$(MISC_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [20975 21040])
            (".PHONY" function (:arguments ("libMisc")) nil [21040 21056])
            ("libMisc" function (:arguments ("$(call LIBRARYNAME,libMisc)")) nil [21056 21093])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Begin")) nil [21145 21201])
            ("REALTIME_HEADERS" variable (:default-value ("$(wildcard Realtime/*.h)" "$(wildcard Realtime/*.icpp)")) nil [21840 21933])
            ("REALTIME_SOURCES" variable (:default-value ("$(wildcard Realtime/*.cpp)")) nil [21934 21980])
            ("$(REALTIME_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [21981 22041])
            ("$(call LIBRARYNAME,libRealtime)" function (:arguments ("PACKAGES" "+=" "$(MYREALTIME_DEPENDS)")) nil [22042 22109])
            ("$(call LIBRARYNAME,libRealtime)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYREALTIME_INCLUDE)")) nil [22109 22186])
            ("$(call LIBRARYNAME,libRealtime)" function (:arguments ("|" "$(call DEPENDENCIES,MYREALTIME)")) nil [22186 22253])
            ("$(call LIBRARYNAME,libRealtime)" function (:arguments ("$(REALTIME_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [22253 22326])
            (".PHONY" function (:arguments ("libRealtime")) nil [22326 22346])
            ("libRealtime" function (:arguments ("$(call LIBRARYNAME,libRealtime)")) nil [22346 22391])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Realtime")) nil [22440 22498])
            ("THREADS_HEADERS" variable (:default-value ("$(wildcard Threads/*.h)" "$(wildcard Threads/*.icpp)")) nil [23747 23836])
            ("THREADS_SOURCES" variable (:default-value ("$(wildcard Threads/*.cpp)")) nil [23837 23881])
            ("$(THREADS_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [23882 23941])
            ("$(call LIBRARYNAME,libThreads)" function (:arguments ("PACKAGES" "+=" "$(MYTHREADS_DEPENDS)")) nil [23942 24007])
            ("$(call LIBRARYNAME,libThreads)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYTHREADS_INCLUDE)")) nil [24007 24082])
            ("$(call LIBRARYNAME,libThreads)" function (:arguments ("|" "$(call DEPENDENCIES,MYTHREADS)")) nil [24082 24147])
            ("$(call LIBRARYNAME,libThreads)" function (:arguments ("$(THREADS_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [24147 24218])
            (".PHONY" function (:arguments ("libThreads")) nil [24218 24237])
            ("libThreads" function (:arguments ("$(call LIBRARYNAME,libThreads)")) nil [24237 24280])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Threads")) nil [24318 24371])
            ("USB_HEADERS" variable (:default-value ("$(wildcard USB/*.h)" "$(wildcard USB/*.icpp)")) nil [25343 25416])
            ("USB_SOURCES" variable (:default-value ("$(wildcard USB/*.cpp)")) nil [25417 25453])
            ("$(USB_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [25454 25509])
            ("$(call LIBRARYNAME,libUSB)" function (:arguments ("PACKAGES" "+=" "$(MYUSB_DEPENDS)")) nil [25510 25567])
            ("$(call LIBRARYNAME,libUSB)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYUSB_INCLUDE)")) nil [25567 25634])
            ("$(call LIBRARYNAME,libUSB)" function (:arguments ("|" "$(call DEPENDENCIES,MYUSB)")) nil [25634 25691])
            ("$(call LIBRARYNAME,libUSB)" function (:arguments ("$(USB_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [25691 25754])
            (".PHONY" function (:arguments ("libUSB")) nil [25754 25769])
            ("libUSB" function (:arguments ("$(call LIBRARYNAME,libUSB)")) nil [25769 25804])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-USB")) nil [25850 25902])
            ("RAWHID_HEADERS" variable (:default-value ("$(wildcard RawHID/*.h)" "$(wildcard RawHID/*.icpp)")) nil [26106 26191])
            ("RAWHID_SOURCES" variable (:default-value ("$(wildcard RawHID/*.cpp)" "$(wildcard RawHID/Internal/*.cpp)")) nil [26192 26287])
            ("$(RAWHID_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [26288 26346])
            ("$(call LIBRARYNAME,libRawHID)" function (:arguments ("PACKAGES" "+=" "$(MYRAWHID_DEPENDS)")) nil [26347 26410])
            ("$(call LIBRARYNAME,libRawHID)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYRAWHID_INCLUDE)")) nil [26410 26483])
            ("$(call LIBRARYNAME,libRawHID)" function (:arguments ("|" "$(call DEPENDENCIES,MYRAWHID)")) nil [26483 26546])
            ("$(call LIBRARYNAME,libRawHID)" function (:arguments ("$(RAWHID_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [26546 26615])
            (".PHONY" function (:arguments ("libRawHID")) nil [26615 26633])
            ("libRawHID" function (:arguments ("$(call LIBRARYNAME,libRawHID)")) nil [26633 26674])
            ("IO_HEADERS" variable (:default-value ("$(wildcard IO/*.h)" "$(wildcard IO/*.icpp)")) nil [26711 26780])
            ("IO_SOURCES" variable (:default-value ("$(wildcard IO/*.cpp)")) nil [26781 26815])
            ("$(IO_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [26816 26870])
            ("$(call LIBRARYNAME,libIO)" function (:arguments ("PACKAGES" "+=" "$(MYIO_DEPENDS)")) nil [26871 26926])
            ("$(call LIBRARYNAME,libIO)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYIO_INCLUDE)")) nil [26926 26991])
            ("$(call LIBRARYNAME,libIO)" function (:arguments ("|" "$(call DEPENDENCIES,MYIO)")) nil [26991 27046])
            ("$(call LIBRARYNAME,libIO)" function (:arguments ("$(IO_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [27046 27107])
            (".PHONY" function (:arguments ("libIO")) nil [27107 27121])
            ("libIO" function (:arguments ("$(call LIBRARYNAME,libIO)")) nil [27121 27154])
            ("PLUGINS_HEADERS" variable (:default-value ("$(wildcard Plugins/*.h)" "$(wildcard Plugins/*.icpp)")) nil [27201 27290])
            ("PLUGINS_SOURCES" variable (:default-value ("$(wildcard Plugins/*.cpp)")) nil [27291 27335])
            ("$(PLUGINS_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [27336 27395])
            ("$(call LIBRARYNAME,libPlugins)" function (:arguments ("PACKAGES" "+=" "$(MYPLUGINS_DEPENDS)")) nil [27396 27461])
            ("$(call LIBRARYNAME,libPlugins)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYPLUGINS_INCLUDE)")) nil [27461 27536])
            ("$(call LIBRARYNAME,libPlugins)" function (:arguments ("|" "$(call DEPENDENCIES,MYPLUGINS)")) nil [27536 27601])
            ("$(call LIBRARYNAME,libPlugins)" function (:arguments ("$(PLUGINS_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [27601 27672])
            (".PHONY" function (:arguments ("libPlugins")) nil [27672 27691])
            ("libPlugins" function (:arguments ("$(call LIBRARYNAME,libPlugins)")) nil [27691 27734])
            ("COMM_HEADERS" variable (:default-value ("$(wildcard Comm/*.h)" "$(wildcard Comm/*.icpp)")) nil [27785 27862])
            ("COMM_SOURCES" variable (:default-value ("$(wildcard Comm/*.cpp)")) nil [27863 27901])
            ("$(COMM_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [27902 27958])
            ("$(call LIBRARYNAME,libComm)" function (:arguments ("PACKAGES" "+=" "$(MYCOMM_DEPENDS)")) nil [27959 28018])
            ("$(call LIBRARYNAME,libComm)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYCOMM_INCLUDE)")) nil [28018 28087])
            ("$(call LIBRARYNAME,libComm)" function (:arguments ("|" "$(call DEPENDENCIES,MYCOMM)")) nil [28087 28146])
            ("$(call LIBRARYNAME,libComm)" function (:arguments ("$(COMM_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [28146 28211])
            (".PHONY" function (:arguments ("libComm")) nil [28211 28227])
            ("libComm" function (:arguments ("$(call LIBRARYNAME,libComm)")) nil [28227 28264])
            ("CLUSTER_HEADERS" variable (:default-value ("$(wildcard Cluster/*.h)" "$(wildcard Cluster/*.icpp)")) nil [28314 28403])
            ("CLUSTER_SOURCES" variable (:default-value ("$(wildcard Cluster/*.cpp)")) nil [28404 28448])
            ("$(CLUSTER_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [28449 28508])
            ("$(call LIBRARYNAME,libCluster)" function (:arguments ("PACKAGES" "+=" "$(MYCLUSTER_DEPENDS)")) nil [28509 28574])
            ("$(call LIBRARYNAME,libCluster)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYCLUSTER_INCLUDE)")) nil [28574 28649])
            ("$(call LIBRARYNAME,libCluster)" function (:arguments ("|" "$(call DEPENDENCIES,MYCLUSTER)")) nil [28649 28714])
            ("$(call LIBRARYNAME,libCluster)" function (:arguments ("$(CLUSTER_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [28714 28785])
            (".PHONY" function (:arguments ("libCluster")) nil [28785 28804])
            ("libCluster" function (:arguments ("$(call LIBRARYNAME,libCluster)")) nil [28804 28847])
            ("MATH_HEADERS" variable (:default-value ("$(wildcard Math/*.h)" "$(wildcard Math/*.icpp)")) nil [28891 28968])
            ("MATH_SOURCES" variable (:default-value ("$(wildcard Math/*.cpp)")) nil [28969 29007])
            ("$(MATH_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [29008 29064])
            ("$(call LIBRARYNAME,libMath)" function (:arguments ("PACKAGES" "+=" "$(MYMATH_DEPENDS)")) nil [29065 29124])
            ("$(call LIBRARYNAME,libMath)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYMATH_INCLUDE)")) nil [29124 29193])
            ("$(call LIBRARYNAME,libMath)" function (:arguments ("|" "$(call DEPENDENCIES,MYMATH)")) nil [29193 29252])
            ("$(call LIBRARYNAME,libMath)" function (:arguments ("$(MATH_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [29252 29317])
            (".PHONY" function (:arguments ("libMath")) nil [29317 29333])
            ("libMath" function (:arguments ("$(call LIBRARYNAME,libMath)")) nil [29333 29370])
            ("GEOMETRY_HEADERS" variable (:default-value ("$(wildcard Geometry/*.h)" "$(wildcard Geometry/*.icpp)")) nil [29422 29515])
            ("GEOMETRY_SOURCES" variable (:default-value ("$(wildcard Geometry/*.cpp)")) nil [29516 29562])
            ("$(GEOMETRY_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [29563 29623])
            ("$(call LIBRARYNAME,libGeometry)" function (:arguments ("PACKAGES" "+=" "$(MYGEOMETRY_DEPENDS)")) nil [29624 29691])
            ("$(call LIBRARYNAME,libGeometry)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYGEOMETRY_INCLUDE)")) nil [29691 29768])
            ("$(call LIBRARYNAME,libGeometry)" function (:arguments ("|" "$(call DEPENDENCIES,MYGEOMETRY)")) nil [29768 29835])
            ("$(call LIBRARYNAME,libGeometry)" function (:arguments ("$(GEOMETRY_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [29835 29908])
            (".PHONY" function (:arguments ("libGeometry")) nil [29908 29928])
            ("libGeometry" function (:arguments ("$(call LIBRARYNAME,libGeometry)")) nil [29928 29973])
            ("MACOSX_HEADERS" variable (:default-value ("$(wildcard MacOSX/*.h)" "$(wildcard MacOSX/*.icpp)")) nil [30018 30103])
            ("GLWRAPPERS_HEADERS" variable (:default-value ("GL/GLTexCoordTemplates.h" "GL/GLMultiTexCoordTemplates.h" "GL/GLColorTemplates.h" "GL/GLSecondaryColorTemplates.h" "GL/GLNormalTemplates.h" "GL/GLVertexTemplates.h" "GL/GLIndexTemplates.h" "GL/GLPrimitiveTemplates.h" "GL/GLScalarLimits.h" "GL/GLScalarConverter.h" "GL/GLColor.h" "GL/GLColorOperations.h" "GL/GLVector.h" "GL/GLBox.h" "GL/GLVertexArrayTemplates.h" "GL/GLVertexArrayParts.h" "GL/GLVertex.h" "GL/GLVertex.icpp" "GL/GLFogEnums.h" "GL/GLFogTemplates.h" "GL/GLFog.h" "GL/GLLightEnums.h" "GL/GLLightTemplates.h" "GL/GLLight.h" "GL/GLLightModelEnums.h" "GL/GLLightModelTemplates.h" "GL/GLMaterialEnums.h" "GL/GLMaterialTemplates.h" "GL/GLMaterial.h" "GL/GLTexEnvEnums.h" "GL/GLTexEnvTemplates.h" "GL/GLMatrixEnums.h" "GL/GLMatrixTemplates.h" "GL/GLMiscTemplates.h" "GL/GLGetTemplates.h" "GL/GLGetPrimitiveTemplates.h" "GL/GLGetFogTemplates.h" "GL/GLGetLightTemplates.h" "GL/GLGetMaterialTemplates.h" "GL/GLGetTexEnvTemplates.h" "GL/GLGetMatrixTemplates.h" "GL/GLGetMiscTemplates.h")) nil [30155 32003])
            ("GLWRAPPERS_SOURCES" variable (:default-value ("GL/GLScalarLimits.cpp" "GL/GLColor.cpp" "GL/GLVertex.cpp" "GL/GLFog.cpp" "GL/GLLight.cpp" "GL/GLMaterial.cpp")) nil [32004 32239])
            ("$(GLWRAPPERS_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [32240 32302])
            ("$(call LIBRARYNAME,libGLWrappers)" function (:arguments ("PACKAGES" "+=" "$(MYGLWRAPPERS_DEPENDS)")) nil [32303 32374])
            ("$(call LIBRARYNAME,libGLWrappers)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYGLWRAPPERS_INCLUDE)")) nil [32374 32455])
            ("$(call LIBRARYNAME,libGLWrappers)" function (:arguments ("CFLAGS" "+=" "$(MYGLWRAPPERS_CFLAGS)")) nil [32455 32523])
            ("$(call LIBRARYNAME,libGLWrappers)" function (:arguments ("|" "$(call DEPENDENCIES,MYGLWRAPPERS)")) nil [32523 32594])
            ("$(call LIBRARYNAME,libGLWrappers)" function (:arguments ("$(GLWRAPPERS_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [32594 32671])
            (".PHONY" function (:arguments ("libGLWrappers")) nil [32671 32693])
            ("libGLWrappers" function (:arguments ("$(call LIBRARYNAME,libGLWrappers)")) nil [32693 32742])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-RawHID")) nil [32789 32847])
            ("GLSUPPORT_HEADERS" variable (:default-value ("GL/Config.h" "GL/GLPrintError.h" "GL/GLMarshallers.h" "GL/GLMarshallers.icpp" "GL/GLValueCoders.h" "GL/GLLightTracker.h" "GL/GLClipPlaneTracker.h" "GL/TLSHelper.h" "GL/GLObject.h" "GL/GLContextData.h" "GL/GLExtensions.h" "GL/GLExtensionManager.h" "GL/GLTextureObject.h" "GL/GLShader.h" "GL/GLGeometryShader.h" "GL/GLAutomaticShader.h" "GL/GLLineLightingShader.h" "GL/GLColorMap.h" "GL/GLNumberRenderer.h" "GL/GLFont.h" "GL/GLString.h" "GL/GLLabel.h" "GL/GLLineIlluminator.h" "GL/GLModels.h")) nil [33733 34681])
            ("GLSUPPORTEXTENSION_HEADERS" variable (:default-value ("$(wildcard GL/Extensions/*.h)" "$(wildcard GL/Extensions/*.icpp)")) nil [34682 34805])
            ("GLSUPPORT_SOURCES" variable (:default-value ("GL/GLPrintError.cpp" "GL/GLMarshallers.cpp" "GL/GLValueCoders.cpp" "GL/GLLightTracker.cpp" "GL/GLClipPlaneTracker.cpp" "GL/GLObject.cpp" "GL/Internal/GLThingManager.cpp" "GL/GLContextData.cpp" "GL/GLExtensions.cpp" "GL/GLExtensionManager.cpp" "$(wildcard GL/Extensions/*.cpp)" "GL/GLTextureObject.cpp" "GL/GLShader.cpp" "GL/GLGeometryShader.cpp" "GL/GLAutomaticShader.cpp" "GL/GLLineLightingShader.cpp" "GL/GLColorMap.cpp" "GL/GLNumberRenderer.cpp" "GL/GLFont.cpp" "GL/GLString.cpp" "GL/GLLabel.cpp" "GL/GLLineIlluminator.cpp" "GL/GLModels.cpp")) nil [34806 35796])
            ("$(GLSUPPORT_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [35797 35858])
            ("$(call LIBRARYNAME,libGLSupport)" function (:arguments ("PACKAGES" "+=" "$(MYGLSUPPORT_DEPENDS)")) nil [35859 35928])
            ("$(call LIBRARYNAME,libGLSupport)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYGLSUPPORT_INCLUDE)")) nil [35928 36007])
            ("$(call LIBRARYNAME,libGLSupport)" function (:arguments ("CFLAGS" "+=" "$(MYGLSUPPORT_CFLAGS)")) nil [36007 36073])
            ("$(call LIBRARYNAME,libGLSupport)" function (:arguments ("|" "$(call DEPENDENCIES,MYGLSUPPORT)")) nil [36073 36142])
            ("$(call LIBRARYNAME,libGLSupport)" function (:arguments ("$(GLSUPPORT_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [36142 36217])
            (".PHONY" function (:arguments ("libGLSupport")) nil [36217 36238])
            ("libGLSupport" function (:arguments ("$(call LIBRARYNAME,libGLSupport)")) nil [36238 36285])
            ("GLXSUPPORT_HEADERS" variable (:default-value ("GL/GLContext.h" "GL/GLWindow.h")) nil [36337 36410])
            ("GLXSUPPORT_SOURCES" variable (:default-value ("GL/GLContext.cpp" "GL/GLWindow.cpp")) nil [36411 36488])
            ("$(GLXSUPPORT_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [36489 36551])
            ("$(call LIBRARYNAME,libGLXSupport)" function (:arguments ("PACKAGES" "+=" "$(MYGLXSUPPORT_DEPENDS)")) nil [36552 36623])
            ("$(call LIBRARYNAME,libGLXSupport)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYGLXSUPPORT_INCLUDE)")) nil [36623 36704])
            ("$(call LIBRARYNAME,libGLXSupport)" function (:arguments ("CFLAGS" "+=" "$(MYGLXSUPPORT_CFLAGS)")) nil [36704 36772])
            ("$(call LIBRARYNAME,libGLXSupport)" function (:arguments ("|" "$(call DEPENDENCIES,MYGLXSUPPORT)")) nil [36772 36843])
            ("$(call LIBRARYNAME,libGLXSupport)" function (:arguments ("$(GLXSUPPORT_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [36843 36920])
            (".PHONY" function (:arguments ("libGLXSupport")) nil [36920 36942])
            ("libGLXSupport" function (:arguments ("$(call LIBRARYNAME,libGLXSupport)")) nil [36942 36991])
            ("GLGEOMETRY_HEADERS" variable (:default-value ("GL/GLGeometryWrappers.h" "GL/GLGeometryVertex.h" "GL/GLGeometryVertex.icpp" "GL/GLTransformationWrappers.h" "GL/GLTransformationWrappers.icpp" "GL/GLFrustum.h" "GL/GLFrustum.icpp" "GL/GLPolylineTube.h")) nil [37076 37376])
            ("GLGEOMETRY_SOURCES" variable (:default-value ("GL/GLGeometryVertex.cpp" "GL/GLTransformationWrappers.cpp" "GL/GLFrustum.cpp" "GL/GLPolylineTube.cpp")) nil [37377 37562])
            ("$(GLGEOMETRY_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [37563 37625])
            ("$(call LIBRARYNAME,libGLGeometry)" function (:arguments ("PACKAGES" "+=" "$(MYGLGEOMETRY_DEPENDS)")) nil [37626 37697])
            ("$(call LIBRARYNAME,libGLGeometry)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYGLGEOMETRY_INCLUDE)")) nil [37697 37778])
            ("$(call LIBRARYNAME,libGLGeometry)" function (:arguments ("|" "$(call DEPENDENCIES,MYGLGEOMETRY)")) nil [37778 37849])
            ("$(call LIBRARYNAME,libGLGeometry)" function (:arguments ("$(GLGEOMETRY_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [37849 37926])
            (".PHONY" function (:arguments ("libGLGeometry")) nil [37926 37948])
            ("libGLGeometry" function (:arguments ("$(call LIBRARYNAME,libGLGeometry)")) nil [37948 37997])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-GLSupport")) nil [38041 38099])
            ("IMAGES_HEADERS" variable (:default-value ("$(wildcard Images/*.h)" "$(wildcard Images/*.icpp)")) nil [38960 39045])
            ("IMAGES_SOURCES" variable (:default-value ("$(wildcard Images/*.cpp)")) nil [39046 39088])
            ("$(IMAGES_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [39089 39147])
            ("$(call LIBRARYNAME,libImages)" function (:arguments ("PACKAGES" "+=" "$(MYIMAGES_DEPENDS)")) nil [39148 39211])
            ("$(call LIBRARYNAME,libImages)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYIMAGES_INCLUDE)")) nil [39211 39284])
            ("$(call LIBRARYNAME,libImages)" function (:arguments ("|" "$(call DEPENDENCIES,MYIMAGES)")) nil [39284 39347])
            ("$(call LIBRARYNAME,libImages)" function (:arguments ("$(IMAGES_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [39347 39416])
            (".PHONY" function (:arguments ("libImages")) nil [39416 39434])
            ("libImages" function (:arguments ("$(call LIBRARYNAME,libImages)")) nil [39434 39475])
            ("GLMOTIF_HEADERS" variable (:default-value ("$(wildcard GLMotif/*.h)" "$(wildcard GLMotif/*.icpp)")) nil [39541 39630])
            ("GLMOTIF_SOURCES" variable (:default-value ("$(wildcard GLMotif/*.cpp)")) nil [39631 39675])
            ("$(GLMOTIF_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [39676 39735])
            ("$(call LIBRARYNAME,libGLMotif)" function (:arguments ("PACKAGES" "+=" "$(MYGLMOTIF_DEPENDS)")) nil [39736 39801])
            ("$(call LIBRARYNAME,libGLMotif)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYGLMOTIF_INCLUDE)")) nil [39801 39876])
            ("$(call LIBRARYNAME,libGLMotif)" function (:arguments ("|" "$(call DEPENDENCIES,MYGLMOTIF)")) nil [39876 39941])
            ("$(call LIBRARYNAME,libGLMotif)" function (:arguments ("$(GLMOTIF_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [39941 40012])
            (".PHONY" function (:arguments ("libGLMotif")) nil [40012 40031])
            ("libGLMotif" function (:arguments ("$(call LIBRARYNAME,libGLMotif)")) nil [40031 40074])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Images")) nil [40114 40168])
            ("SOUND_HEADERS" variable (:default-value ("$(wildcard Sound/*.h)" "$(wildcard Sound/*.icpp)")) nil [40824 40905])
            ("SOUND_SOURCES" variable (:default-value ("$(wildcard Sound/*.cpp)")) nil [41272 41312])
            ("$(SOUND_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [41638 41695])
            ("$(call LIBRARYNAME,libSound)" function (:arguments ("PACKAGES" "+=" "$(MYSOUND_DEPENDS)")) nil [41696 41757])
            ("$(call LIBRARYNAME,libSound)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYSOUND_INCLUDE)")) nil [41757 41828])
            ("$(call LIBRARYNAME,libSound)" function (:arguments ("|" "$(call DEPENDENCIES,MYSOUND)")) nil [41828 41889])
            ("$(call LIBRARYNAME,libSound)" function (:arguments ("$(SOUND_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [41889 41956])
            (".PHONY" function (:arguments ("libSound")) nil [41956 41973])
            ("libSound" function (:arguments ("$(call LIBRARYNAME,libSound)")) nil [41973 42012])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Sound")) nil [42052 42105])
            ("VIDEO_HEADERS" variable (:default-value ("Video/Config.h" "Video/VideoDataFormat.h" "Video/FrameBuffer.h" "Video/ImageExtractor.h" "Video/VideoDevice.h" "Video/Colorspaces.h" "Video/ImageExtractorRGB8.h" "Video/ImageExtractorY8.h" "Video/ImageExtractorY10B.h" "Video/ImageExtractorYUYV.h" "Video/ImageExtractorUYVY.h" "Video/ImageExtractorYV12.h" "Video/BayerPattern.h" "Video/ImageExtractorBA81.h" "Video/YpCbCr420Texture.h" "Video/VideoPane.h")) nil [43011 43670])
            ("VIDEO_SOURCES" variable (:default-value ("Video/VideoDataFormat.cpp" "Video/VideoDevice.cpp" "Video/ImageExtractorRGB8.cpp" "Video/ImageExtractorY8.cpp" "Video/ImageExtractorY10B.cpp" "Video/ImageExtractorYUYV.cpp" "Video/ImageExtractorUYVY.cpp" "Video/ImageExtractorYV12.cpp" "Video/ImageExtractorBA81.cpp" "Video/YpCbCr420Texture.cpp" "Video/VideoPane.cpp")) nil [44477 44969])
            ("$(VIDEO_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [45677 45734])
            ("$(call LIBRARYNAME,libVideo)" function (:arguments ("PACKAGES" "+=" "$(MYVIDEO_DEPENDS)")) nil [45735 45796])
            ("$(call LIBRARYNAME,libVideo)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYVIDEO_INCLUDE)")) nil [45796 45867])
            ("$(call LIBRARYNAME,libVideo)" function (:arguments ("|" "$(call DEPENDENCIES,MYVIDEO)")) nil [45867 45928])
            ("$(call LIBRARYNAME,libVideo)" function (:arguments ("$(VIDEO_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [45928 45995])
            (".PHONY" function (:arguments ("libVideo")) nil [45995 46012])
            ("libVideo" function (:arguments ("$(call LIBRARYNAME,libVideo)")) nil [46012 46051])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Video")) nil [46098 46155])
            ("ALSUPPORT_HEADERS" variable (:default-value ("$(wildcard AL/*.h)" "$(wildcard AL/*.icpp)")) nil [46571 46654])
            ("ALSUPPORT_SOURCES" variable (:default-value ("$(wildcard AL/*.cpp)" "$(wildcard AL/Internal/*.cpp)")) nil [46655 46748])
            ("$(ALSUPPORT_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [46749 46810])
            ("$(call LIBRARYNAME,libALSupport)" function (:arguments ("PACKAGES" "+=" "$(MYALSUPPORT_DEPENDS)")) nil [46811 46880])
            ("$(call LIBRARYNAME,libALSupport)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYALSUPPORT_INCLUDE)")) nil [46880 46959])
            ("$(call LIBRARYNAME,libALSupport)" function (:arguments ("|" "$(call DEPENDENCIES,MYALSUPPORT)")) nil [46959 47028])
            ("$(call LIBRARYNAME,libALSupport)" function (:arguments ("$(ALSUPPORT_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [47028 47103])
            (".PHONY" function (:arguments ("libALSupport")) nil [47103 47124])
            ("libALSupport" function (:arguments ("$(call LIBRARYNAME,libALSupport)")) nil [47124 47171])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-ALSupport")) nil [47226 47750])
            ("SCENEGRAPH_HEADERS" variable (:default-value ("$(wildcard SceneGraph/*.h)" "$(wildcard SceneGraph/*.icpp)")) nil [47751 47852])
            ("SCENEGRAPH_SOURCES" variable (:default-value ("$(wildcard SceneGraph/*.cpp)" "$(wildcard SceneGraph/Internal/*.cpp)")) nil [47853 47964])
            ("$(SCENEGRAPH_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [47965 48027])
            ("$(call LIBRARYNAME,libSceneGraph)" function (:arguments ("PACKAGES" "+=" "$(MYSCENEGRAPH_DEPENDS)")) nil [48028 48099])
            ("$(call LIBRARYNAME,libSceneGraph)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYSCENEGRAPH_INCLUDE)")) nil [48099 48180])
            ("$(call LIBRARYNAME,libSceneGraph)" function (:arguments ("|" "$(call DEPENDENCIES,MYSCENEGRAPH)")) nil [48180 48251])
            ("$(call LIBRARYNAME,libSceneGraph)" function (:arguments ("$(SCENEGRAPH_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [48251 48328])
            (".PHONY" function (:arguments ("libSceneGraph")) nil [48328 48350])
            ("libSceneGraph" function (:arguments ("$(call LIBRARYNAME,libSceneGraph)")) nil [48350 48399])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-SceneGraph")) nil [48462 48519])
            ("VRUI_HEADERS" variable (:default-value ("$(wildcard Vrui/*.h)" "$(wildcard Vrui/*.icpp)")) nil [51505 51582])
            ("VRUI_IGNORE_SOURCES" variable (:default-value ("Vrui/Internal/InputDeviceDock.cpp" "Vrui/Internal/TheoraMovieSaver.cpp" "Vrui/Internal/KinectRecorder.cpp" "Vrui/Internal/KinectPlayback.cpp" "Vrui/Internal/Linux/ScreenSaverInhibitorDBus.cpp")) nil [51687 51989])
            ("VRUI_SOURCES" variable (:default-value ("$(filter-out $(VRUI_IGNORE_SOURCES),$(wildcard Vrui/*.cpp) \\
                                                   $(wildcard Vrui/Internal/*.cpp) \\
                                                   $(wildcard Vrui/Internal/$(OSSPECFILEINSERT)/*.cpp))")) nil [51990 52255])
            ("$(VRUI_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [52453 52509])
            ("$(OBJDIR)" function (:arguments ("CFLAGS" "+=" "-DVRUI_INTERNAL_CONFIG_TOOLDSONAMETEMPLATE='\"$(PLUGININSTALLDIR)/$(VRTOOLSDIREXT)/lib%s.$(PLUGINFILEEXT)\"'")) nil [52553 52700])
            ("$(OBJDIR)" function (:arguments ("CFLAGS" "+=" "-DVRUI_INTERNAL_CONFIG_VISLETDSONAMETEMPLATE='\"$(PLUGININSTALLDIR)/$(VRVISLETSDIREXT)/lib%s.$(PLUGINFILEEXT)\"'")) nil [52700 52853])
            ("$(OBJDIR)" function (:arguments ("CFLAGS" "+=" "-DVRUI_INTERNAL_CONFIG_LIBDIR='\"$(LIBINSTALLDIR)\"'" "-DVRUI_INTERNAL_CONFIG_EXECUTABLEDIR='\"$(EXECUTABLEINSTALLDIR)\"'" "-DVRUI_INTERNAL_CONFIG_PLUGINDIR='\"$(PLUGININSTALLDIR)\"'")) nil [52853 53186])
            ("$(call LIBRARYNAME,libVrui)" function (:arguments ("PACKAGES" "+=" "$(MYVRUI_DEPENDS)")) nil [53187 53246])
            ("$(call LIBRARYNAME,libVrui)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYVRUI_INCLUDE)")) nil [53246 53315])
            ("$(call LIBRARYNAME,libVrui)" function (:arguments ("|" "$(call DEPENDENCIES,MYVRUI)")) nil [53315 53374])
            ("$(call LIBRARYNAME,libVrui)" function (:arguments ("$(VRUI_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [53374 53439])
            (".PHONY" function (:arguments ("libVrui")) nil [53439 53455])
            ("libVrui" function (:arguments ("$(call LIBRARYNAME,libVrui)")) nil [53455 53492])
            ("$(VRTOOLSDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [53583 53639])
            ("$(VRTOOLSDIR)" function (:arguments ("CFLAGS" "+=" "$(CPLUGINFLAGS)")) nil [53639 53702])
            ("$(VRTOOLSDIR)" function (:arguments ("PLUGINDEPENDENCIES" "=")) nil [53702 53761])
            ("$(VRTOOLSDIR)" function (:arguments ("$(OBJDIR)/Vrui/Tools/%.o")) nil [54224 54311])
            ("$(VRTOOLS_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [54511 54570])
            (".SECONDARY" function (:arguments ("$(VRTOOLS_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [54620 54671])
            (".PHONY" function (:arguments ("VRTools")) nil [54672 54688])
            ("VRTools" function (:arguments ("$(VRTOOLS)")) nil [54688 54708])
            ("$(VRVISLETSDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [54797 54855])
            ("$(VRVISLETSDIR)" function (:arguments ("CFLAGS" "+=" "$(CPLUGINFLAGS)")) nil [54855 54920])
            ("$(VRVISLETSDIR)" function (:arguments ("PLUGINDEPENDENCIES" "=")) nil [54920 54981])
            ("$(VRVISLETSDIR)" function (:arguments ("$(OBJDIR)/Vrui/Vislets/%.o")) nil [55456 55549])
            ("$(VRVISLETSDIR)" function (:arguments ("PACKAGES" "+=" "MYSCENEGRAPH")) nil [55786 55865])
            ("$(VRVISLETSDIR)" function (:arguments ("PACKAGES" "+=" "MYRAWHID")) nil [55865 55937])
            ("$(VRVISLETS_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [55938 55999])
            (".SECONDARY" function (:arguments ("$(VRVISLETS_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [56048 56101])
            (".PHONY" function (:arguments ("VRVislets")) nil [56102 56120])
            ("VRVislets" function (:arguments ("$(VRVISLETS)")) nil [56120 56144])
            ("$(DEPDIR)" function (:arguments ("$(DEPDIR)/Configure-Vrui")) nil [56181 56242])
            ("VRDEVICEDAEMON_SOURCES" variable (:default-value ("VRDeviceDaemon/VRDevice.cpp" "VRDeviceDaemon/VRCalibrator.cpp" "VRDeviceDaemon/VRDeviceManager.cpp" "Vrui/Internal/VRDeviceDescriptor.cpp" "Vrui/Internal/HMDConfiguration.cpp" "Vrui/Internal/VRDevicePipe.cpp" "VRDeviceDaemon/VRDeviceServer.cpp" "VRDeviceDaemon/VRDeviceDaemon.cpp")) nil [58616 59096])
            ("$(VRDEVICEDAEMON_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [59097 59163])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYGEOMETRY" "MYCOMM" "MYIO" "MYTHREADS" "MYMISC" "DL")) nil [59164 59245])
            ("$(EXEDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYVRUI_INCLUDE)")) nil [59245 59311])
            ("$(EXEDIR)" function (:arguments ("CFLAGS" "+=" "-DVERBOSE")) nil [59311 59357])
            ("$(EXEDIR)" function (:arguments ("LINKFLAGS" "+=" "$(PLUGINHOSTLINKFLAGS)")) nil [59357 59419])
            ("$(EXEDIR)" function (:arguments ("$(VRDEVICEDAEMON_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [59419 59491])
            (".PHONY" function (:arguments ("VRDeviceDaemon")) nil [59491 59514])
            ("VRDeviceDaemon" function (:arguments ("$(EXEDIR)/VRDeviceDaemon")) nil [59514 59555])
            ("$(VRDEVICESDIR)" function (:arguments ("$(OBJDIR)/VRDeviceDaemon/VRDevices/VRPNConnection.o" "$(OBJDIR)/VRDeviceDaemon/VRDevices/VRPNClient.o")) nil [59757 59955])
            ("$(VRDEVICESDIR)" function (:arguments ("PLUGINDEPENDENCIES" "+=" "$(BLUETOOTH_LIBDIR)" "$(BLUETOOTH_LIBS)")) nil [59956 60068])
            ("$(VRDEVICESDIR)" function (:arguments ("$(OBJDIR)/VRDeviceDaemon/VRDevices/Wiimote.o" "$(OBJDIR)/VRDeviceDaemon/VRDevices/WiimoteTracker.o")) nil [60068 60271])
            ("$(VRDEVICESDIR)" function (:arguments ("PACKAGES" "+=" "MYUSB")) nil [60272 60344])
            ("$(VRDEVICESDIR)" function (:arguments ("PLUGINDEPENDENCIES" "+=" "$(MYUSB_LIBDIR)" "$(MYUSB_LIBS)")) nil [60344 60450])
            ("$(VRDEVICESDIR)" function (:arguments ("$(OBJDIR)/VRDeviceDaemon/VRDevices/RazerHydra.o" "$(OBJDIR)/VRDeviceDaemon/VRDevices/RazerHydraDevice.o")) nil [60635 60847])
            ("$(VRDEVICESDIR)" function (:arguments ("PACKAGES" "+=" "MYUSB")) nil [60848 60914])
            ("$(VRDEVICESDIR)" function (:arguments ("PLUGINDEPENDENCIES" "+=" "$(MYUSB_LIBDIR)" "$(MYUSB_LIBS)")) nil [60914 61014])
            ("$(VRDEVICESDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "-I$(OPENVR_BASEDIR)/headers")) nil [61194 61292])
            ("$(VRDEVICESDIR)" function (:arguments ("PACKAGES" "+=" "MYGEOMETRY" "MYCOMM" "MYTHREADS" "MYMISC")) nil [61331 61417])
            ("$(VRDEVICESDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYVRUI_INCLUDE)")) nil [61417 61496])
            ("$(VRDEVICESDIR)" function (:arguments ("CFLAGS" "+=" "$(CPLUGINFLAGS)" "-DVERBOSE")) nil [61496 61571])
            ("$(VRDEVICESDIR)" function (:arguments ("PLUGINDEPENDENCIES" "=")) nil [61571 61632])
            ("$(VRDEVICESDIR)" function (:arguments ("$(OBJDIR)/VRDeviceDaemon/VRDevices/%.o")) nil [61632 61737])
            ("$(VRDEVICES_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [61937 61998])
            ("$(OBJDIR)" function (:arguments ("|" "$(DEPDIR)/config")) nil [61998 62163])
            ("$(OBJDIR)" function (:arguments ("|" "$(DEPDIR)/config")) nil [61998 62163])
            (".SECONDARY" function (:arguments ("$(VRDEVICES_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [62222 62275])
            ("$(VRCALIBRATORSDIR)" function (:arguments ("PACKAGES" "+=" "MYGEOMETRY" "MYCOMM" "MYTHREADS" "MYMISC")) nil [62357 62447])
            ("$(VRCALIBRATORSDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "$(MYVRUI_INCLUDE)")) nil [62447 62530])
            ("$(VRCALIBRATORSDIR)" function (:arguments ("CFLAGS" "+=" "$(CPLUGINFLAGS)")) nil [62530 62599])
            ("$(VRCALIBRATORSDIR)" function (:arguments ("PLUGINDEPENDENCIES" "=")) nil [62599 62664])
            ("$(VRCALIBRATORSDIR)" function (:arguments ("$(OBJDIR)/VRDeviceDaemon/VRCalibrators/%.o")) nil [62664 62781])
            ("$(VRCALIBRATORS_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [62981 63046])
            (".SECONDARY" function (:arguments ("$(VRCALIBRATORS_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [63102 63159])
            (".PHONY" function (:arguments ("VRCalibrators")) nil [63160 63182])
            ("VRCalibrators" function (:arguments ("$(VRCALIBRATORS)")) nil [63182 63214])
            ("$(EXEDIR)" function nil nil [63305 64065])
            ("UTILITIES_SOURCES" variable (:default-value ("$(wildcard Vrui/Utilities/*.cpp)" "$(wildcard Calibration/*.cpp)")) nil [64111 64219])
            ("$(UTILITIES_SOURCES:%.cpp=$(OBJDIR)/%.o)" function (:arguments ("|" "$(DEPDIR)/config")) nil [64219 64280])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [64324 64365])
            ("$(EXEDIR)" function (:arguments ("$(OBJDIR)/Vrui/Utilities/DeviceTest.o")) nil [64365 64425])
            (".PHONY" function (:arguments ("DeviceTest")) nil [64425 64444])
            ("DeviceTest" function (:arguments ("$(EXEDIR)/DeviceTest")) nil [64444 64477])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [64478 64521])
            ("$(EXEDIR)" function (:arguments ("$(OBJDIR)/Vrui/Utilities/TrackingTest.o")) nil [64521 64585])
            (".PHONY" function (:arguments ("TrackingTest")) nil [64585 64606])
            ("TrackingTest" function (:arguments ("$(EXEDIR)/TrackingTest")) nil [64606 64643])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [64687 64727])
            ("$(EXEDIR)" function (:arguments ("$(OBJDIR)/Vrui/Utilities/RoomSetup.o")) nil [64727 64785])
            (".PHONY" function (:arguments ("RoomSetup")) nil [64785 64803])
            ("RoomSetup" function (:arguments ("$(EXEDIR)/RoomSetup")) nil [64803 64834])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [64876 64920])
            ("$(EXEDIR)" function (:arguments ("$(OBJDIR)/Vrui/Utilities/EyeCalibrator.o")) nil [64920 64986])
            (".PHONY" function (:arguments ("EyeCalibrator")) nil [64986 65008])
            ("EyeCalibrator" function (:arguments ("$(EXEDIR)/EyeCalibrator")) nil [65008 65047])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [65096 65151])
            ("$(EXEDIR)" function (:arguments ("$(OBJDIR)/Vrui/Utilities/PrintInputDeviceDataFile.o")) nil [65151 65239])
            (".PHONY" function (:arguments ("PrintInputDeviceDataFile")) nil [65239 65272])
            ("PrintInputDeviceDataFile" function (:arguments ("$(EXEDIR)/PrintInputDeviceDataFile")) nil [65272 65333])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "X11")) nil [65376 65415])
            ("$(EXEDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "-ICalibration")) nil [65415 65474])
            ("$(EXEDIR)" function (:arguments ("$(OBJDIR)/Calibration/XBackground.o")) nil [65474 65533])
            (".PHONY" function (:arguments ("XBackground")) nil [65533 65553])
            ("XBackground" function (:arguments ("$(EXEDIR)/XBackground")) nil [65553 65588])
            ("MEASUREENVIRONMENT_SOURCES" variable (:default-value ("Calibration/TotalStation.cpp" "Calibration/NaturalPointClient.cpp" "Calibration/MeasureEnvironment.cpp")) nil [65621 65811])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [65812 65861])
            ("$(EXEDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "-ICalibration")) nil [65861 65927])
            ("$(EXEDIR)" function (:arguments ("$(MEASUREENVIRONMENT_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [65927 66007])
            (".PHONY" function (:arguments ("MeasureEnvironment")) nil [66007 66034])
            ("MeasureEnvironment" function (:arguments ("$(EXEDIR)/MeasureEnvironment")) nil [66034 66083])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [66134 66181])
            ("$(EXEDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "-ICalibration")) nil [66181 66245])
            ("$(EXEDIR)" function (:arguments ("$(OBJDIR)/Calibration/OGTransformCalculator.o" "$(OBJDIR)/Calibration/ScreenCalibrator.o")) nil [66245 66390])
            (".PHONY" function (:arguments ("ScreenCalibrator")) nil [66390 66415])
            ("ScreenCalibrator" function (:arguments ("$(EXEDIR)/ScreenCalibrator")) nil [66415 66460])
            ("ALIGNTRACKINGMARKERS_SOURCES" variable (:default-value ("Calibration/ReadOptiTrackMarkerFile.cpp" "Calibration/NaturalPointClient.cpp" "Calibration/AlignTrackingMarkers.cpp")) nil [66510 66719])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [66720 66771])
            ("$(EXEDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "-ICalibration")) nil [66771 66839])
            ("$(EXEDIR)" function (:arguments ("$(ALIGNTRACKINGMARKERS_SOURCES:%.cpp=$(OBJDIR)/%.o)")) nil [66839 66923])
            (".PHONY" function (:arguments ("AlignTrackingMarkers")) nil [66923 66952])
            ("AlignTrackingMarkers" function (:arguments ("$(EXEDIR)/AlignTrackingMarkers")) nil [66952 67005])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI")) nil [67049 67098])
            ("$(EXEDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "-ICalibration")) nil [67098 67164])
            ("$(EXEDIR)" function (:arguments ("$(OBJDIR)/Calibration/SampleTrackerField.o")) nil [67164 67237])
            (".PHONY" function (:arguments ("SampleTrackerField")) nil [67237 67264])
            ("SampleTrackerField" function (:arguments ("$(EXEDIR)/SampleTrackerField")) nil [67264 67313])
            ("$(EXEDIR)" function (:arguments ("PACKAGES" "+=" "MYVRUI" "MYUSB")) nil [67357 67410])
            ("$(EXEDIR)" function (:arguments ("EXTRACINCLUDEFLAGS" "+=" "-ICalibration")) nil [67410 67474])
            ("$(EXEDIR)" function (:arguments ("$(OBJDIR)/Calibration/OculusCalibrator.o")) nil [67474 67543])
            (".PHONY" function (:arguments ("OculusCalibrator")) nil [67543 67568])
            ("OculusCalibrator" function (:arguments ("$(EXEDIR)/OculusCalibrator")) nil [67568 67613])
            ("$(DEPDIR)" function (:arguments ("$(MAKEFILEFRAGMENT)" "$(MAKECONFIGFILE)" "$(PKGCONFIGFILE)" "$(TEMPLATEMAKEFILE)" "ExamplePrograms/makefile" "ExamplePrograms/MeshEditor/makefile" "ExamplePrograms/VRMLViewer/makefile")) nil [67873 68312])
            ("SYSTEMPACKAGES" variable (:default-value ("$(sort $(patsubst MY%,,$(PACKAGES_RECEXPAND)))")) nil [68313 68377])
            ("VRUIAPP_INCLUDEDIRS" variable (:default-value ("-I$$(VRUI_INCLUDEDIR)")) nil [68377 68421])
            ("VRUIAPP_INCLUDEDIRS" variable (:default-value ("$(sort $(foreach PACKAGENAME,$(SYSTEMPACKAGES),$($(PACKAGENAME)_INCLUDE)))")) nil [68421 68519])
            ("VRUIAPP_CFLAGS" variable (:default-value ("$(CSYSFLAGS)")) nil [68519 68549])
            ("VRUIAPP_CFLAGS" variable (:default-value ("$(sort $(foreach PACKAGENAME,$(PACKAGES_RECEXPAND),$($(PACKAGENAME)_CFLAGS)))")) nil [68549 68645])
            ("VRUIAPP_LDIRS" variable (:default-value ("-L$$(VRUI_LIBDIR)")) nil [68645 68679])
            ("VRUIAPP_LDIRS" variable (:default-value ("$(sort $(foreach PACKAGENAME,$(SYSTEMPACKAGES),$($(PACKAGENAME)_LIBDIR)))")) nil [68679 68770])
            ("VRUIAPP_LIBS" variable (:default-value ("$(patsubst lib%,-l%.$(LDEXT),$(LIBRARY_NAMES))")) nil [68770 68832])
            ("VRUIAPP_LIBS" variable (:default-value ("$(foreach PACKAGENAME,$(SYSTEMPACKAGES),$($(PACKAGENAME)_LIBS))")) nil [68832 68912])
            ("VRUIAPP_LFLAGS" variable nil nil [68912 68929])
            ("$(MAKEFILEFRAGMENT)" function (:arguments ("PACKAGES" "=" "MYVRUI")) nil [69127 69166])
            ("$(MAKEFILEFRAGMENT)" function (:arguments ("$(DEPDIR)/Configure-End")) nil [69166 70270])
            ("$(MAKECONFIGFILE)" function (:arguments ("$(DEPDIR)/Configure-End")) nil [70444 73375])
            ("ROGUE_SYSTEMPACKAGES" variable (:default-value ("$(filter %_,$(foreach PACKAGENAME,$(SYSTEMPACKAGES),$(PACKAGENAME)_$($(PACKAGENAME)_PKGNAME)))")) nil [73376 73494])
            ("ROGUE_INCLUDEDIRS" variable (:default-value ("$(sort $(foreach PACKAGENAME,$(ROGUE_SYSTEMPACKAGES),$($(PACKAGENAME)INCLUDE)))")) nil [73494 73594])
            ("ROGUE_LIBDIRS" variable (:default-value ("$(sort $(foreach PACKAGENAME,$(ROGUE_SYSTEMPACKAGES),$($(PACKAGENAME)LIBDIR)))")) nil [73594 73689])
            ("ROGUE_LIBS" variable (:default-value ("$(foreach PACKAGENAME,$(ROGUE_SYSTEMPACKAGES),$($(PACKAGENAME)LIBS))")) nil [73689 73771])
            ("$(PKGCONFIGFILE)" function (:arguments ("PACKAGES" "=" "MYVRUI")) nil [73829 73865])
            ("$(PKGCONFIGFILE)" function (:arguments ("$(DEPDIR)/Configure-End")) nil [73865 74505])
            ("$(TEMPLATEMAKEFILE)" function (:arguments ("$(DEPDIR)/Configure-End")) nil [75169 75559])
            ("ExamplePrograms/makefile" function (:arguments ("$(DEPDIR)/Configure-End")) nil [75618 76063])
            ("ExamplePrograms/MeshEditor/makefile" function (:arguments ("$(DEPDIR)/Configure-End")) nil [76133 76689])
            ("ExamplePrograms/VRMLViewer/makefile" function (:arguments ("$(DEPDIR)/Configure-End")) nil [76759 77316])
            ("install" function nil nil [77316 77325])
            ("installudevrules" function nil nil [83773 83791])
            ("uninstall" function nil nil [83985 83996])
            ("uninstalludevrules" function nil nil [88732 88752]))          
      :file "makefile"
      :pointmax 88892
      :fsize 88891
      :lastmodtime '(22591 55103 162341 847000)
      :unmatched-syntax '((shell-command 88851 . 88891) (bol 88850 . 88850) (shell-command 88801 . 88849) (bol 88800 . 88800) (shell-command 88688 . 88730) (bol 88687 . 88687) (shell-command 88601 . 88649) (bol 88600 . 88600) (shell-command 88530 . 88599) (bol 88529 . 88529) (shell-command 88447 . 88528) (bol 88446 . 88446) (shell-command 88373 . 88445) (bol 88372 . 88372) (shell-command 88300 . 88371) (bol 88299 . 88299) (shell-command 88215 . 88298) (bol 88214 . 88214) (shell-command 88142 . 88213) (bol 88141 . 88141) (shell-command 88057 . 88140) (bol 88056 . 88056) (shell-command 87980 . 88055) (bol 87979 . 87979) (shell-command 87905 . 87978) (bol 87904 . 87904) (shell-command 87765 . 87903) (bol 87764 . 87764) (shell-command 87671 . 87763) (bol 87670 . 87670) (shell-command 87592 . 87669) (bol 87591 . 87591) (shell-command 87521 . 87590) (bol 87520 . 87520) (shell-command 87444 . 87519) (bol 87443 . 87443) (shell-command 87373 . 87442) (bol 87372 . 87372) (shell-command 87296 . 87371) (bol 87295 . 87295) (shell-command 87229 . 87294) (bol 87228 . 87228) (shell-command 87154 . 87227) (bol 87153 . 87153) (shell-command 87085 . 87152) (bol 87084 . 87084) (shell-command 87008 . 87083) (bol 87007 . 87007) (shell-command 86929 . 87006) (bol 86928 . 86928) (shell-command 86858 . 86927) (bol 86857 . 86857) (shell-command 86801 . 86856) (bol 86800 . 86800) (shell-command 86580 . 86750) (bol 86579 . 86579) (shell-command 86525 . 86578) (bol 86524 . 86524) (shell-command 86400 . 86470) (bol 86399 . 86399) (shell-command 86299 . 86360) (bol 86298 . 86298) (shell-command 86206 . 86273) (bol 86205 . 86205) (shell-command 86146 . 86204) (bol 86145 . 86145) (shell-command 86047 . 86095) (bol 86046 . 86046) (shell-command 85957 . 86045) (bol 85956 . 85956) (shell-command 85875 . 85955) (bol 85874 . 85874) (shell-command 85793 . 85873) (bol 85792 . 85792) (shell-command 85715 . 85791) (bol 85714 . 85714) (shell-command 85662 . 85713) (bol 85661 . 85661) (shell-command 85531 . 85609) (bol 85530 . 85530) (shell-command 85423 . 85505) (bol 85422 . 85422) (shell-command 85362 . 85421) (bol 85361 . 85361) (shell-command 85260 . 85307) (bol 85259 . 85259) (shell-command 85203 . 85258) (bol 85202 . 85202) (shell-command 85064 . 85201) (bol 85063 . 85063) (shell-command 84955 . 85062) (bol 84954 . 84954) (shell-command 84849 . 84953) (bol 84848 . 84848) (shell-command 84793 . 84847) (bol 84792 . 84792) (shell-command 84676 . 84743) (bol 84675 . 84675) (shell-command 84603 . 84674) (bol 84602 . 84602) (shell-command 84465 . 84552) (bol 84464 . 84464) (shell-command 84410 . 84463) (bol 84409 . 84409) (shell-command 84292 . 84360) (bol 84291 . 84291) (shell-command 84225 . 84290) (bol 84224 . 84224) (shell-command 84095 . 84168) (bol 84094 . 84094) (shell-command 84040 . 84093) (bol 84039 . 84039) (shell-command 83890 . 83983) (bol 83889 . 83889) (shell-command 83838 . 83888) (bol 83837 . 83837) (shell-command 83717 . 83771) (bol 83716 . 83716) (shell-command 83687 . 83715) (bol 83686 . 83686) (shell-command 83632 . 83685) (bol 83631 . 83631) (shell-command 83527 . 83588) (bol 83526 . 83526) (shell-command 83491 . 83525) (bol 83490 . 83490) (shell-command 83424 . 83489) (bol 83423 . 83423) (shell-command 83335 . 83368) (bol 83334 . 83334) (shell-command 83282 . 83333) (bol 83281 . 83281) (shell-command 83251 . 83280) (bol 83250 . 83250) (shell-command 83196 . 83249) (bol 83195 . 83195) (shell-command 83087 . 83147) (bol 83086 . 83086) (shell-command 83014 . 83085) (bol 83013 . 83013) (shell-command 82878 . 82964) (bol 82877 . 82877) (shell-command 82827 . 82876) (bol 82826 . 82826) (shell-command 82787 . 82825) (bol 82786 . 82786) (shell-command 82719 . 82785) (bol 82718 . 82718) (shell-command 82678 . 82717) (bol 82677 . 82677) (shell-command 82612 . 82676) (bol 82611 . 82611) (shell-command 82572 . 82610) (bol 82571 . 82571) (shell-command 82516 . 82570) (bol 82515 . 82515) (shell-command 82397 . 82461) (bol 82396 . 82396) (shell-command 82260 . 82371) (bol 82259 . 82259) (shell-command 82084 . 82258) (bol 82083 . 82083) (shell-command 81923 . 82082) (bol 81922 . 81922) (shell-command 81893 . 81921) (bol 81892 . 81892) (shell-command 81832 . 81891) (bol 81831 . 81831) (shell-command 81710 . 81778) (bol 81709 . 81709) (shell-command 81654 . 81708) (bol 81653 . 81653) (shell-command 81592 . 81652) (bol 81591 . 81591) (shell-command 81540 . 81590) (bol 81539 . 81539) (shell-command 81478 . 81538) (bol 81477 . 81477) (shell-command 81426 . 81476) (bol 81425 . 81425) (shell-command 81368 . 81424) (bol 81367 . 81367) (shell-command 81318 . 81366) (bol 81317 . 81317) (shell-command 81265 . 81316) (bol 81264 . 81264) (shell-command 81184 . 81213) (bol 81183 . 81183) (shell-command 81115 . 81182) (bol 81114 . 81114) (shell-command 81035 . 81113) (bol 81034 . 81034) (shell-command 80962 . 81033) (bol 80961 . 80961) (shell-command 80909 . 80960) (bol 80908 . 80908) (shell-command 80800 . 80847) (bol 80799 . 80799) (shell-command 80763 . 80798) (bol 80762 . 80762) (shell-command 80703 . 80761) (bol 80702 . 80702) (shell-command 80584 . 80653) (bol 80583 . 80583) (shell-command 80546 . 80582) (bol 80545 . 80545) (shell-command 80506 . 80544) (bol 80505 . 80505) (shell-command 80476 . 80504) (bol 80475 . 80475) (shell-command 80425 . 80474) (bol 80424 . 80424) (shell-command 80315 . 80377) (bol 80314 . 80314) (shell-command 80277 . 80313) (bol 80276 . 80276) (shell-command 80201 . 80275) (bol 80200 . 80200) (shell-command 80157 . 80199) (bol 80156 . 80156) (shell-command 80090 . 80155) (bol 80089 . 80089) (shell-command 80054 . 80088) (bol 80053 . 80053) (ENDIF 80041 . 80046) (bol 80039 . 80039) (shell-command 79962 . 80038) (bol 79961 . 79961) (shell-command 79917 . 79960) (bol 79916 . 79916) (semantic-list 79881 . 79915) (IFNEQ 79875 . 79880) (bol 79873 . 79873) (shell-command 79785 . 79849) (bol 79784 . 79784) (shell-command 79746 . 79783) (bol 79745 . 79745) (ENDIF 79733 . 79738) (bol 79731 . 79731) (shell-command 79654 . 79730) (bol 79653 . 79653) (shell-command 79609 . 79652) (bol 79608 . 79608) (semantic-list 79573 . 79607) (IFNEQ 79567 . 79572) (bol 79565 . 79565) (shell-command 79477 . 79541) (bol 79476 . 79476) (shell-command 79438 . 79475) (bol 79437 . 79437) (shell-command 79368 . 79436) (bol 79367 . 79367) (shell-command 79327 . 79366) (bol 79326 . 79326) (shell-command 79259 . 79325) (bol 79258 . 79258) (shell-command 79219 . 79257) (bol 79218 . 79218) (shell-command 79151 . 79217) (bol 79150 . 79150) (shell-command 79083 . 79149) (bol 79082 . 79082) (shell-command 78996 . 79081) (bol 78995 . 78995) (shell-command 78949 . 78994) (bol 78948 . 78948) (shell-command 78882 . 78947) (bol 78881 . 78881) (shell-command 78814 . 78880) (bol 78813 . 78813) (shell-command 78778 . 78812) (bol 78777 . 78777) (shell-command 78704 . 78770) (bol 78703 . 78703) (shell-command 78664 . 78702) (bol 78663 . 78663) (shell-command 78568 . 78638) (bol 78567 . 78567) (shell-command 78526 . 78566) (bol 78525 . 78525) (shell-command 78462 . 78524) (bol 78461 . 78461) (shell-command 78424 . 78460) (bol 78423 . 78423) (shell-command 78354 . 78422) (bol 78353 . 78353) (shell-command 78313 . 78352) (bol 78312 . 78312) (shell-command 78249 . 78311) (bol 78248 . 78248) (shell-command 78211 . 78247) (bol 78210 . 78210) (shell-command 78141 . 78209) (bol 78140 . 78140) (shell-command 78100 . 78139) (bol 78099 . 78099) (shell-command 78040 . 78098) (bol 78039 . 78039) (shell-command 78004 . 78038) (bol 78003 . 78003) (shell-command 77936 . 78002) (bol 77935 . 77935) (shell-command 77896 . 77934) (bol 77895 . 77895) (shell-command 77828 . 77888) (bol 77827 . 77827) (shell-command 77791 . 77826) (bol 77790 . 77790) (shell-command 77688 . 77756) (bol 77687 . 77687) (shell-command 77647 . 77686) (bol 77646 . 77646) (shell-command 77575 . 77645) (bol 77574 . 77574) (shell-command 77533 . 77573) (bol 77532 . 77532) (shell-command 77469 . 77531) (bol 77468 . 77468) (shell-command 77431 . 77467) (bol 77430 . 77430) (shell-command 77374 . 77429) (bol 77373 . 77373) (shell-command 75016 . 75116) (bol 75015 . 75015) (ENDIF 75008 . 75013) (bol 75008 . 75008) (shell-command 74874 . 75007) (bol 74873 . 74873) (ENDIF 74862 . 74867) (bol 74860 . 74860) (shell-command 74726 . 74859) (bol 74725 . 74725) (ELSE 74720 . 74724) (bol 74718 . 74718) (shell-command 74562 . 74717) (bol 74561 . 74561) (semantic-list 74544 . 74560) (IFNEQ 74538 . 74543) (bol 74536 . 74536) (shell-command 70295 . 70384) (bol 70294 . 70294) (ENDIF 69036 . 69041) (bol 69034 . 69034) (semantic-list 69020 . 69033) (punctuation 69019 . 69020) (punctuation 69018 . 69019) (punctuation 69017 . 69018) (symbol 69011 . 69017) (punctuation 69010 . 69011) (symbol 69007 . 69010) (punctuation 69005 . 69006) (punctuation 69004 . 69005) (symbol 68989 . 69003) (bol 68985 . 68985) (semantic-list 68968 . 68984) (IFNEQ 68962 . 68967) (bol 68960 . 68960) (shell-command 62900 . 62973) (bol 62899 . 62899) (shell-command 62879 . 62898) (bol 62878 . 62878) (shell-command 62800 . 62872) (bol 62799 . 62799) (shell-command 61856 . 61929) (bol 61855 . 61855) (shell-command 61835 . 61854) (bol 61834 . 61834) (shell-command 61756 . 61828) (bol 61755 . 61755) (ENDIF 61181 . 61186) (bol 61179 . 61179) (semantic-list 61170 . 61178) (punctuation 61169 . 61170) (symbol 61168 . 61169) (semantic-list 61153 . 61168) (punctuation 61152 . 61153) (punctuation 61151 . 61152) (symbol 61145 . 61151) (punctuation 61144 . 61145) (symbol 61141 . 61144) (punctuation 61139 . 61140) (punctuation 61138 . 61139) (symbol 61122 . 61137) (punctuation 61120 . 61121) (semantic-list 61105 . 61120) (punctuation 61104 . 61105) (symbol 61089 . 61104) (semantic-list 61075 . 61089) (punctuation 61074 . 61075) (bol 61070 . 61070) (semantic-list 61053 . 61069) (IFNEQ 61047 . 61052) (bol 61045 . 61045) (ENDIF 60623 . 60628) (bol 60621 . 60621) (semantic-list 60612 . 60620) (punctuation 60611 . 60612) (symbol 60610 . 60611) (semantic-list 60595 . 60610) (punctuation 60594 . 60595) (punctuation 60593 . 60594) (symbol 60587 . 60593) (punctuation 60586 . 60587) (symbol 60583 . 60586) (punctuation 60581 . 60582) (punctuation 60580 . 60581) (symbol 60564 . 60579) (punctuation 60562 . 60563) (semantic-list 60547 . 60562) (punctuation 60546 . 60547) (symbol 60525 . 60546) (semantic-list 60511 . 60525) (punctuation 60510 . 60511) (bol 60506 . 60506) (semantic-list 60489 . 60505) (IFNEQ 60483 . 60488) (bol 60481 . 60481) (symbol 59735 . 59749) (symbol 59724 . 59734) (symbol 59718 . 59723) (symbol 59707 . 59717) (symbol 59700 . 59706) (symbol 59689 . 59699) (punctuation 59687 . 59688) (punctuation 59686 . 59687) (symbol 59667 . 59685) (punctuation 59665 . 59666) (semantic-list 59650 . 59665) (punctuation 59649 . 59650) (symbol 59635 . 59649) (semantic-list 59621 . 59635) (punctuation 59620 . 59621) (bol 59618 . 59618) (shell-command 58573 . 58614) (bol 58572 . 58572) (shell-command 58539 . 58571) (bol 58538 . 58538) (shell-command 58394 . 58537) (bol 58393 . 58393) (ENDIF 58386 . 58391) (bol 58386 . 58386) (shell-command 58212 . 58385) (bol 58211 . 58211) (shell-command 58052 . 58210) (bol 58051 . 58051) (shell-command 57896 . 58018) (bol 57895 . 57895) (shell-command 57773 . 57894) (bol 57772 . 57772) (shell-command 57646 . 57771) (bol 57645 . 57645) (shell-command 57526 . 57644) (bol 57525 . 57525) (shell-command 57385 . 57524) (bol 57384 . 57384) (shell-command 57252 . 57383) (bol 57251 . 57251) (shell-command 57194 . 57250) (bol 57193 . 57193) (shell-command 57107 . 57186) (bol 57106 . 57106) (shell-command 57046 . 57100) (bol 57045 . 57045) (shell-command 56974 . 57044) (bol 56973 . 56973) (shell-command 56864 . 56934) (bol 56863 . 56863) (shell-command 56788 . 56857) (bol 56787 . 56787) (shell-command 56683 . 56747) (bol 56682 . 56682) (shell-command 56613 . 56676) (bol 56612 . 56612) (shell-command 56517 . 56568) (bol 56516 . 56516) (ENDIF 56505 . 56510) (bol 56503 . 56503) (shell-command 56442 . 56502) (bol 56441 . 56441) (ELSE 56436 . 56440) (bol 56434 . 56434) (shell-command 56381 . 56433) (bol 56380 . 56380) (semantic-list 56347 . 56379) (IFNEQ 56341 . 56346) (bol 56339 . 56339) (shell-command 56288 . 56338) (bol 56287 . 56287) (shell-command 55668 . 55741) (bol 55667 . 55667) (shell-command 55647 . 55666) (bol 55646 . 55646) (shell-command 55568 . 55640) (bol 55567 . 55567) (bol 55353 . 55353) (ENDIF 55347 . 55352) (bol 55345 . 55345) (ENDIF 55339 . 55344) (bol 55335 . 55335) (semantic-list 55317 . 55334) (punctuation 55316 . 55317) (symbol 55315 . 55316) (semantic-list 55297 . 55315) (punctuation 55296 . 55297) (punctuation 55295 . 55296) (symbol 55289 . 55295) (punctuation 55288 . 55289) (symbol 55285 . 55288) (punctuation 55283 . 55284) (punctuation 55282 . 55283) (symbol 55266 . 55281) (punctuation 55264 . 55265) (semantic-list 55249 . 55264) (punctuation 55248 . 55249) (symbol 55242 . 55248) (semantic-list 55228 . 55242) (punctuation 55227 . 55228) (bol 55221 . 55221) (semantic-list 55204 . 55220) (IFNEQ 55198 . 55203) (bol 55194 . 55194) (semantic-list 55169 . 55193) (IFNEQ 55163 . 55168) (bol 55161 . 55161) (semantic-list 55104 . 55160) (punctuation 55103 . 55104) (semantic-list 55088 . 55102) (punctuation 55087 . 55088) (symbol 55085 . 55087) (punctuation 55083 . 55084) (punctuation 55082 . 55083) (symbol 55066 . 55081) (punctuation 55064 . 55065) (semantic-list 55049 . 55064) (punctuation 55048 . 55049) (symbol 55042 . 55048) (semantic-list 55028 . 55042) (punctuation 55027 . 55028) (bol 55025 . 55025) (shell-command 54430 . 54503) (bol 54429 . 54429) (shell-command 54409 . 54428) (bol 54408 . 54408) (shell-command 54330 . 54402) (bol 54329 . 54329) (bol 54123 . 54123) (ENDIF 54117 . 54122) (bol 54115 . 54115) (ENDIF 54109 . 54114) (bol 54105 . 54105) (semantic-list 54089 . 54104) (punctuation 54088 . 54089) (symbol 54087 . 54088) (semantic-list 54069 . 54087) (punctuation 54068 . 54069) (punctuation 54067 . 54068) (symbol 54061 . 54067) (punctuation 54060 . 54061) (symbol 54057 . 54060) (punctuation 54055 . 54056) (punctuation 54054 . 54055) (symbol 54038 . 54053) (punctuation 54036 . 54037) (semantic-list 54021 . 54036) (punctuation 54020 . 54021) (symbol 54014 . 54020) (semantic-list 54002 . 54014) (punctuation 54001 . 54002) (bol 53995 . 53995) (semantic-list 53978 . 53994) (IFNEQ 53972 . 53977) (bol 53968 . 53968) (semantic-list 53943 . 53967) (IFNEQ 53937 . 53942) (bol 53935 . 53935) (semantic-list 53880 . 53934) (punctuation 53879 . 53880) (semantic-list 53866 . 53878) (punctuation 53865 . 53866) (symbol 53863 . 53865) (punctuation 53861 . 53862) (punctuation 53860 . 53861) (symbol 53844 . 53859) (punctuation 53842 . 53843) (semantic-list 53827 . 53842) (punctuation 53826 . 53827) (symbol 53820 . 53826) (semantic-list 53808 . 53820) (punctuation 53807 . 53808) (bol 53805 . 53805) (symbol 52397 . 52445) (punctuation 52395 . 52396) (punctuation 52394 . 52395) (symbol 52381 . 52393) (bol 52379 . 52379) (symbol 52305 . 52339) (punctuation 52303 . 52304) (punctuation 52302 . 52303) (symbol 52289 . 52301) (bol 52287 . 52287) (shell-command 51472 . 51503) (bol 51471 . 51471) (shell-command 51439 . 51470) (bol 51438 . 51438) (shell-command 51298 . 51437) (bol 51297 . 51297) (shell-command 51191 . 51296) (bol 51190 . 51190) (shell-command 51088 . 51189) (bol 51087 . 51087) (shell-command 50991 . 51086) (bol 50990 . 50990) (shell-command 50876 . 50989) (bol 50875 . 50875) (shell-command 50756 . 50874) (bol 50755 . 50755) (shell-command 50647 . 50754) (bol 50646 . 50646) (shell-command 50546 . 50645) (bol 50545 . 50545) (shell-command 50447 . 50544) (bol 50446 . 50446) (shell-command 50325 . 50445) (bol 50324 . 50324) (shell-command 50196 . 50323) (bol 50195 . 50195) (shell-command 50087 . 50194) (bol 50086 . 50086) (shell-command 49978 . 50085) (bol 49977 . 49977) (shell-command 49871 . 49976) (bol 49870 . 49870) (shell-command 49815 . 49869) (bol 49814 . 49814) (shell-command 49761 . 49807) (bol 49760 . 49760) (shell-command 49675 . 49754) (bol 49674 . 49674) (shell-command 49557 . 49630) (bol 49556 . 49556) (shell-command 49503 . 49550) (bol 49502 . 49502) (shell-command 49390 . 49463) (bol 49389 . 49389) (shell-command 49337 . 49383) (bol 49336 . 49336) (shell-command 49227 . 49296) (bol 49226 . 49226) (shell-command 49152 . 49220) (bol 49151 . 49151) (shell-command 49070 . 49112) (bol 49069 . 49069) (shell-command 49022 . 49063) (bol 49021 . 49021) (shell-command 48934 . 48982) (bol 48933 . 48933) (shell-command 48879 . 48927) (bol 48878 . 48878) (shell-command 48778 . 48839) (bol 48777 . 48777) (shell-command 48711 . 48771) (bol 48710 . 48710) (shell-command 48619 . 48670) (bol 48618 . 48618) (shell-command 48562 . 48612) (bol 48561 . 48561) (shell-command 46533 . 46569) (bol 46532 . 46532) (shell-command 46511 . 46531) (bol 46510 . 46510) (shell-command 46414 . 46509) (bol 46413 . 46413) (shell-command 46322 . 46412) (bol 46321 . 46321) (shell-command 46288 . 46320) (bol 46287 . 46287) (shell-command 46237 . 46280) (bol 46236 . 46236) (shell-command 46188 . 46230) (bol 46187 . 46187) (symbol 45646 . 45669) (symbol 45601 . 45624) (symbol 45558 . 45579) (symbol 45514 . 45536) (symbol 45469 . 45492) (symbol 45427 . 45447) (symbol 45386 . 45405) (symbol 45347 . 45364) (punctuation 45345 . 45346) (punctuation 45344 . 45345) (symbol 45330 . 45343) (bol 45328 . 45328) (symbol 45256 . 45289) (punctuation 45254 . 45255) (punctuation 45253 . 45254) (symbol 45239 . 45252) (bol 45237 . 45237) (symbol 45158 . 45198) (symbol 45105 . 45136) (punctuation 45103 . 45104) (punctuation 45102 . 45103) (symbol 45088 . 45101) (bol 45086 . 45086) (symbol 45021 . 45049) (punctuation 45019 . 45020) (punctuation 45018 . 45019) (symbol 45004 . 45017) (bol 45002 . 45002) (symbol 44448 . 44469) (symbol 44405 . 44426) (symbol 44364 . 44383) (symbol 44322 . 44342) (symbol 44279 . 44300) (symbol 44239 . 44257) (symbol 44200 . 44217) (symbol 44163 . 44178) (symbol 44126 . 44141) (punctuation 44124 . 44125) (punctuation 44123 . 44124) (symbol 44109 . 44122) (bol 44107 . 44107) (ENDIF 44063 . 44068) (bol 44061 . 44061) (symbol 44029 . 44060) (punctuation 44027 . 44028) (punctuation 44026 . 44027) (symbol 44006 . 44025) (bol 44002 . 44002) (semantic-list 43976 . 44001) (IFNEQ 43970 . 43975) (bol 43968 . 43968) (ENDIF 43962 . 43967) (bol 43960 . 43960) (symbol 43921 . 43959) (symbol 43862 . 43891) (punctuation 43860 . 43861) (punctuation 43859 . 43860) (symbol 43839 . 43858) (bol 43835 . 43835) (semantic-list 43811 . 43834) (IFNEQ 43805 . 43810) (bol 43803 . 43803) (punctuation 43800 . 43801) (symbol 43780 . 43799) (bol 43778 . 43778) (symbol 43722 . 43748) (punctuation 43720 . 43721) (punctuation 43719 . 43720) (symbol 43705 . 43718) (bol 43703 . 43703) (shell-command 42977 . 43009) (bol 42976 . 42976) (shell-command 42952 . 42975) (bol 42951 . 42951) (shell-command 42843 . 42950) (bol 42842 . 42842) (shell-command 42752 . 42841) (bol 42751 . 42751) (shell-command 42661 . 42750) (bol 42660 . 42660) (shell-command 42574 . 42659) (bol 42573 . 42573) (shell-command 42534 . 42572) (bol 42533 . 42533) (shell-command 42483 . 42526) (bol 42482 . 42482) (shell-command 42434 . 42476) (bol 42433 . 42433) (shell-command 42341 . 42394) (bol 42340 . 42340) (shell-command 42282 . 42334) (bol 42281 . 42281) (shell-command 42192 . 42242) (bol 42191 . 42191) (shell-command 42136 . 42185) (bol 42135 . 42135) (ENDIF 41625 . 41630) (bol 41623 . 41623) (symbol 41594 . 41622) (symbol 41542 . 41570) (punctuation 41540 . 41541) (punctuation 41539 . 41540) (symbol 41525 . 41538) (bol 41521 . 41521) (semantic-list 41496 . 41520) (IFNEQ 41490 . 41495) (bol 41488 . 41488) (ENDIF 41482 . 41487) (bol 41480 . 41480) (symbol 41441 . 41479) (symbol 41388 . 41417) (punctuation 41386 . 41387) (punctuation 41385 . 41386) (symbol 41371 . 41384) (bol 41367 . 41367) (semantic-list 41343 . 41366) (IFNEQ 41337 . 41342) (bol 41335 . 41335) (ENDIF 41259 . 41264) (bol 41257 . 41257) (symbol 41230 . 41256) (symbol 41174 . 41200) (punctuation 41172 . 41173) (punctuation 41171 . 41172) (symbol 41151 . 41170) (bol 41147 . 41147) (semantic-list 41122 . 41146) (IFNEQ 41116 . 41121) (bol 41114 . 41114) (ENDIF 41108 . 41113) (bol 41106 . 41106) (symbol 41069 . 41105) (symbol 41012 . 41039) (punctuation 41010 . 41011) (punctuation 41009 . 41010) (symbol 40989 . 41008) (bol 40985 . 40985) (semantic-list 40961 . 40984) (IFNEQ 40955 . 40960) (bol 40953 . 40953) (punctuation 40950 . 40951) (symbol 40930 . 40949) (bol 40928 . 40928) (shell-command 40790 . 40822) (bol 40789 . 40789) (shell-command 40765 . 40788) (bol 40764 . 40764) (shell-command 40656 . 40763) (bol 40655 . 40655) (shell-command 40567 . 40654) (bol 40566 . 40566) (shell-command 40480 . 40565) (bol 40479 . 40479) (shell-command 40440 . 40478) (bol 40439 . 40439) (shell-command 40383 . 40432) (bol 40382 . 40382) (shell-command 40328 . 40376) (bol 40327 . 40327) (shell-command 40247 . 40289) (bol 40246 . 40246) (shell-command 40199 . 40240) (bol 40198 . 40198) (shell-command 38925 . 38958) (bol 38924 . 38924) (shell-command 38899 . 38923) (bol 38898 . 38898) (shell-command 38786 . 38897) (bol 38785 . 38785) (shell-command 38694 . 38784) (bol 38693 . 38693) (shell-command 38602 . 38692) (bol 38601 . 38601) (shell-command 38512 . 38600) (bol 38511 . 38511) (shell-command 38470 . 38510) (bol 38469 . 38469) (shell-command 38423 . 38462) (bol 38422 . 38422) (shell-command 38378 . 38416) (bol 38377 . 38377) (shell-command 38299 . 38337) (bol 38298 . 38298) (shell-command 38255 . 38292) (bol 38254 . 38254) (shell-command 38176 . 38214) (bol 38175 . 38175) (shell-command 38132 . 38169) (bol 38131 . 38131) (shell-command 33695 . 33731) (bol 33694 . 33694) (shell-command 33673 . 33693) (bol 33672 . 33672) (shell-command 33576 . 33671) (bol 33575 . 33575) (shell-command 33473 . 33574) (bol 33472 . 33472) (shell-command 33379 . 33471) (bol 33378 . 33378) (shell-command 33292 . 33377) (bol 33291 . 33291) (shell-command 33178 . 33290) (bol 33177 . 33177) (shell-command 33144 . 33176) (bol 33143 . 33143) (shell-command 33081 . 33142) (bol 33080 . 33080) (shell-command 33033 . 33073) (bol 33032 . 33032) (ENDIF 33021 . 33026) (bol 33019 . 33019) (shell-command 32966 . 33018) (bol 32965 . 32965) (ELSE 32960 . 32964) (bol 32958 . 32958) (shell-command 32910 . 32957) (bol 32909 . 32909) (semantic-list 32886 . 32908) (IFNEQ 32880 . 32885) (bol 32878 . 32878) (shell-command 26069 . 26098) (bol 26068 . 26068) (shell-command 26016 . 26067) (bol 26015 . 26015) (shell-command 25981 . 26009) (bol 25980 . 25980) (shell-command 25936 . 25979) (bol 25935 . 25935) (shell-command 25311 . 25341) (bol 25310 . 25310) (shell-command 25288 . 25309) (bol 25287 . 25287) (shell-command 25187 . 25286) (bol 25186 . 25186) (shell-command 25096 . 25185) (bol 25095 . 25095) (shell-command 24993 . 25094) (bol 24992 . 24992) (shell-command 24904 . 24991) (bol 24903 . 24903) (shell-command 24868 . 24902) (bol 24867 . 24867) (shell-command 24798 . 24860) (bol 24797 . 24797) (ENDIF 24786 . 24791) (bol 24784 . 24784) (shell-command 24724 . 24783) (bol 24723 . 24723) (ELSE 24718 . 24722) (bol 24716 . 24716) (shell-command 24666 . 24715) (bol 24665 . 24665) (semantic-list 24637 . 24664) (IFNEQ 24631 . 24636) (bol 24629 . 24629) (ENDIF 24623 . 24628) (bol 24621 . 24621) (shell-command 24562 . 24620) (bol 24561 . 24561) (ELSE 24556 . 24560) (bol 24554 . 24554) (shell-command 24503 . 24553) (bol 24502 . 24502) (semantic-list 24468 . 24501) (IFNEQ 24462 . 24467) (bol 24460 . 24460) (shell-command 24405 . 24459) (bol 24404 . 24404) (shell-command 23711 . 23745) (bol 23710 . 23710) (shell-command 23684 . 23709) (bol 23683 . 23683) (shell-command 23567 . 23682) (bol 23566 . 23566) (shell-command 23466 . 23565) (bol 23465 . 23465) (shell-command 23365 . 23464) (bol 23364 . 23364) (shell-command 23260 . 23363) (bol 23259 . 23259) (shell-command 23163 . 23258) (bol 23162 . 23162) (shell-command 23119 . 23161) (bol 23118 . 23118) (shell-command 23058 . 23111) (bol 23057 . 23057) (shell-command 23006 . 23051) (bol 23005 . 23005) (shell-command 22898 . 22959) (bol 22897 . 22897) (shell-command 22849 . 22891) (bol 22848 . 22848) (shell-command 22734 . 22806) (bol 22733 . 22733) (shell-command 22684 . 22727) (bol 22683 . 22683) (shell-command 22590 . 22643) (bol 22589 . 22589) (shell-command 22528 . 22583) (bol 22527 . 22527) (shell-command 21803 . 21838) (bol 21802 . 21802) (shell-command 21775 . 21801) (bol 21774 . 21774) (shell-command 21654 . 21773) (bol 21653 . 21653) (shell-command 21555 . 21652) (bol 21554 . 21554) (shell-command 21456 . 21553) (bol 21455 . 21455) (shell-command 21410 . 21454) (bol 21409 . 21409) (shell-command 21360 . 21402) (bol 21359 . 21359) (shell-command 21319 . 21358) (bol 21318 . 21318) (shell-command 21272 . 21312) (bol 21271 . 21271) (shell-command 21230 . 21270) (bol 21229 . 21229) (shell-command 19412 . 19446) (bol 19411 . 19411) (shell-command 19317 . 19410) (bol 19316 . 19316) (shell-command 19221 . 19315) (bol 19220 . 19220) (shell-command 19137 . 19219) (bol 19136 . 19136) (shell-command 19059 . 19135) (bol 19058 . 19058) (shell-command 18989 . 19057) (bol 18988 . 18988) (shell-command 18913 . 18987) (bol 18912 . 18912) (shell-command 18842 . 18911) (bol 18841 . 18841) (shell-command 18770 . 18840) (bol 18769 . 18769) (shell-command 18698 . 18768) (bol 18697 . 18697) (shell-command 18628 . 18696) (bol 18627 . 18627) (shell-command 18555 . 18626) (bol 18554 . 18554) (shell-command 18478 . 18553) (bol 18477 . 18477) (shell-command 18408 . 18476) (bol 18407 . 18407) (shell-command 18335 . 18406) (bol 18334 . 18334) (shell-command 18268 . 18333) (bol 18267 . 18267) (shell-command 18217 . 18260) (bol 18216 . 18216) (shell-command 17461 . 17493) (bol 17460 . 17460) (shell-command 17407 . 17453) (bol 17406 . 17406) (shell-command 17355 . 17400) (bol 17354 . 17354) (symbol 16353 . 16375) (punctuation 16351 . 16352) (symbol 16334 . 16350) (bol 16332 . 16332) (symbol 16298 . 16326) (punctuation 16296 . 16297) (symbol 16279 . 16295) (bol 16277 . 16277) (symbol 16199 . 16216) (semantic-list 16191 . 16199) (punctuation 16190 . 16191) (punctuation 16188 . 16189) (punctuation 16187 . 16188) (symbol 16175 . 16186) (bol 16173 . 16173) (symbol 15449 . 15467) (semantic-list 15441 . 15449) (punctuation 15440 . 15441) (punctuation 15438 . 15439) (punctuation 15437 . 15438) (symbol 15425 . 15436) (bol 15423 . 15423) (symbol 14720 . 14759) (punctuation 14718 . 14719) (punctuation 14717 . 14718) (symbol 14699 . 14716) (bol 14697 . 14697) (symbol 14619 . 14658) (symbol 14548 . 14593) (punctuation 14546 . 14547) (punctuation 14545 . 14546) (symbol 14527 . 14544) (bol 14525 . 14525) (symbol 14442 . 14485) (punctuation 14440 . 14441) (punctuation 14439 . 14440) (symbol 14421 . 14438) (bol 14419 . 14419) (symbol 14338 . 14375) (punctuation 14336 . 14337) (punctuation 14335 . 14336) (symbol 14317 . 14334) (bol 14315 . 14315) (symbol 12256 . 12265) (punctuation 12254 . 12255) (punctuation 12253 . 12254) (symbol 12239 . 12252) (bol 12237 . 12237) (symbol 12191 . 12197) (punctuation 12189 . 12190) (punctuation 12188 . 12189) (symbol 12174 . 12187) (bol 12172 . 12172) (semantic-list 11516 . 11539) (punctuation 11515 . 11516) (symbol 11514 . 11515) (semantic-list 11502 . 11514) (punctuation 11501 . 11502) (punctuation 11499 . 11500) (symbol 11487 . 11498) (bol 11485 . 11485) (semantic-list 11473 . 11484) (punctuation 11472 . 11473) (punctuation 11470 . 11471) (punctuation 11469 . 11470) (symbol 11462 . 11468) (bol 11460 . 11460) (symbol 11448 . 11454) (punctuation 11446 . 11447) (symbol 11436 . 11445) (bol 11434 . 11434) (symbol 11431 . 11433) (semantic-list 11424 . 11431) (punctuation 11423 . 11424) (symbol 11422 . 11423) (semantic-list 11419 . 11422) (punctuation 11418 . 11419) (symbol 11417 . 11418) (semantic-list 11405 . 11417) (punctuation 11404 . 11405) (punctuation 11402 . 11403) (symbol 11390 . 11401) (bol 11388 . 11388) (semantic-list 11094 . 11105) (punctuation 11093 . 11094) (symbol 11085 . 11093) (punctuation 11083 . 11084) (symbol 11064 . 11082) (bol 11062 . 11062) (semantic-list 11045 . 11056) (punctuation 11044 . 11045) (symbol 11024 . 11044) (punctuation 11022 . 11023) (symbol 11003 . 11021) (bol 11001 . 11001) (symbol 10968 . 10969) (punctuation 10966 . 10967) (symbol 10942 . 10965) (bol 10940 . 10940) (symbol 10883 . 10884) (punctuation 10881 . 10882) (symbol 10857 . 10880) (bol 10855 . 10855) (symbol 10646 . 10651) (semantic-list 10629 . 10646) (punctuation 10628 . 10629) (punctuation 10626 . 10627) (symbol 10611 . 10625) (bol 10609 . 10609) (symbol 10592 . 10603) (semantic-list 10575 . 10592) (punctuation 10574 . 10575) (punctuation 10572 . 10573) (symbol 10557 . 10571) (bol 10555 . 10555) (semantic-list 10488 . 10500) (punctuation 10487 . 10488) (punctuation 10485 . 10486) (symbol 10473 . 10484) (bol 10471 . 10471) (symbol 10453 . 10470) (punctuation 10451 . 10452) (symbol 10439 . 10450) (bol 10437 . 10437) (semantic-list 10423 . 10436) (punctuation 10422 . 10423) (symbol 10412 . 10422) (semantic-list 10400 . 10412) (punctuation 10399 . 10400) (punctuation 10397 . 10398) (symbol 10383 . 10396) (bol 10381 . 10381) (symbol 10370 . 10380) (semantic-list 10362 . 10370) (punctuation 10361 . 10362) (symbol 10360 . 10361) (semantic-list 10348 . 10360) (punctuation 10347 . 10348) (punctuation 10345 . 10346) (symbol 10325 . 10344) (bol 10323 . 10323) (semantic-list 10309 . 10322) (punctuation 10308 . 10309) (symbol 10302 . 10308) (semantic-list 10290 . 10302) (punctuation 10289 . 10290) (punctuation 10287 . 10288) (symbol 10271 . 10286) (bol 10269 . 10269) (semantic-list 10255 . 10268) (punctuation 10254 . 10255) (symbol 10250 . 10254) (semantic-list 10238 . 10250) (punctuation 10237 . 10238) (punctuation 10235 . 10236) (symbol 10221 . 10234) (bol 10219 . 10219) (ENDIF 10213 . 10218) (bol 10211 . 10211) (semantic-list 10202 . 10210) (punctuation 10201 . 10202) (symbol 10200 . 10201) (semantic-list 10188 . 10200) (punctuation 10187 . 10188) (punctuation 10185 . 10186) (symbol 10164 . 10184) (bol 10160 . 10160) (semantic-list 10146 . 10159) (punctuation 10145 . 10146) (semantic-list 10137 . 10145) (punctuation 10136 . 10137) (symbol 10135 . 10136) (semantic-list 10123 . 10135) (punctuation 10122 . 10123) (punctuation 10120 . 10121) (symbol 10106 . 10119) (bol 10102 . 10102) (ELSE 10097 . 10101) (bol 10095 . 10095) (symbol 10088 . 10094) (semantic-list 10080 . 10088) (punctuation 10079 . 10080) (symbol 10078 . 10079) (semantic-list 10066 . 10078) (punctuation 10065 . 10066) (punctuation 10063 . 10064) (symbol 10042 . 10062) (bol 10038 . 10038) (symbol 10031 . 10037) (semantic-list 10018 . 10031) (punctuation 10017 . 10018) (semantic-list 10009 . 10017) (punctuation 10008 . 10009) (symbol 10007 . 10008) (semantic-list 9995 . 10007) (punctuation 9994 . 9995) (punctuation 9992 . 9993) (symbol 9978 . 9991) (bol 9974 . 9974) (symbol 9968 . 9973) (IFDEF 9962 . 9967) (bol 9960 . 9960) (semantic-list 9946 . 9959) (punctuation 9945 . 9946) (semantic-list 9933 . 9945) (punctuation 9932 . 9933) (symbol 9931 . 9932) (semantic-list 9919 . 9931) (punctuation 9918 . 9919) (punctuation 9916 . 9917) (symbol 9899 . 9915) (bol 9897 . 9897) (ENDIF 9891 . 9896) (bol 9889 . 9889) (semantic-list 9877 . 9888) (punctuation 9876 . 9877) (symbol 9875 . 9876) (punctuation 9873 . 9874) (symbol 9861 . 9872) (bol 9857 . 9857) (ELSE 9852 . 9856) (bol 9850 . 9850) (punctuation 9847 . 9848) (symbol 9835 . 9846) (bol 9831 . 9831) (semantic-list 9775 . 9830) (IFEQ 9770 . 9774) (bol 9768 . 9768) (symbol 9758 . 9762) (punctuation 9756 . 9757) (symbol 9744 . 9755) (bol 9742 . 9742) (symbol 9720 . 9741) (punctuation 9718 . 9719) (symbol 9706 . 9717) (bol 9704 . 9704) (semantic-list 9692 . 9703) (punctuation 9691 . 9692) (symbol 9676 . 9691) (semantic-list 9664 . 9676) (punctuation 9663 . 9664) (punctuation 9661 . 9662) (symbol 9647 . 9660) (bol 9645 . 9645) (symbol 9634 . 9644) (semantic-list 9626 . 9634) (punctuation 9625 . 9626) (symbol 9620 . 9625) (semantic-list 9608 . 9620) (punctuation 9607 . 9608) (punctuation 9605 . 9606) (symbol 9585 . 9604) (bol 9583 . 9583) (semantic-list 9571 . 9582) (punctuation 9570 . 9571) (symbol 9559 . 9570) (semantic-list 9547 . 9559) (punctuation 9546 . 9547) (punctuation 9544 . 9545) (symbol 9528 . 9543) (bol 9526 . 9526) (semantic-list 9514 . 9525) (punctuation 9513 . 9514) (symbol 9508 . 9513) (semantic-list 9496 . 9508) (punctuation 9495 . 9496) (punctuation 9493 . 9494) (symbol 9479 . 9492) (bol 9477 . 9477) (ENDIF 9471 . 9476) (bol 9469 . 9469) (semantic-list 9460 . 9468) (punctuation 9459 . 9460) (symbol 9454 . 9459) (semantic-list 9442 . 9454) (punctuation 9441 . 9442) (punctuation 9439 . 9440) (symbol 9418 . 9438) (bol 9414 . 9414) (semantic-list 9402 . 9413) (punctuation 9401 . 9402) (symbol 9400 . 9401) (semantic-list 9392 . 9400) (punctuation 9391 . 9392) (symbol 9386 . 9391) (semantic-list 9374 . 9386) (punctuation 9373 . 9374) (punctuation 9371 . 9372) (symbol 9357 . 9370) (bol 9353 . 9353) (ELSE 9348 . 9352) (bol 9346 . 9346) (symbol 9339 . 9345) (semantic-list 9331 . 9339) (punctuation 9330 . 9331) (symbol 9325 . 9330) (semantic-list 9313 . 9325) (punctuation 9312 . 9313) (punctuation 9310 . 9311) (symbol 9289 . 9309) (bol 9285 . 9285) (symbol 9278 . 9284) (semantic-list 9267 . 9278) (punctuation 9266 . 9267) (symbol 9265 . 9266) (semantic-list 9257 . 9265) (punctuation 9256 . 9257) (symbol 9251 . 9256) (semantic-list 9239 . 9251) (punctuation 9238 . 9239) (punctuation 9236 . 9237) (symbol 9222 . 9235) (bol 9218 . 9218) (symbol 9212 . 9217) (IFDEF 9206 . 9211) (bol 9204 . 9204) (semantic-list 9192 . 9203) (punctuation 9191 . 9192) (symbol 9190 . 9191) (semantic-list 9178 . 9190) (punctuation 9177 . 9178) (symbol 9172 . 9177) (semantic-list 9160 . 9172) (punctuation 9159 . 9160) (punctuation 9157 . 9158) (symbol 9140 . 9156) (bol 9138 . 9138) (symbol 8627 . 8634) (punctuation 8625 . 8626) (punctuation 8624 . 8625) (symbol 8617 . 8623) (bol 8615 . 8615) (symbol 5109 . 5110) (punctuation 5107 . 5108) (symbol 5088 . 5106) (bol 5086 . 5086) (semantic-list 4981 . 5080) (punctuation 4980 . 4981) (punctuation 4978 . 4979) (symbol 4961 . 4977) (bol 4959 . 4959) (semantic-list 4863 . 4958) (punctuation 4862 . 4863) (punctuation 4860 . 4861) (symbol 4843 . 4859) (bol 4841 . 4841) (bol 4804 . 4804) (semantic-list 4767 . 4803) (punctuation 4766 . 4767) (punctuation 4764 . 4765) (symbol 4755 . 4763) (bol 4753 . 4753) (bol 4689 . 4689) (bol 4674 . 4674) (bol 4605 . 4605) (bol 4602 . 4602) (bol 4584 . 4584) (bol 4517 . 4517) (bol 4446 . 4446) (bol 4443 . 4443) (semantic-list 4386 . 4442) (punctuation 4385 . 4386) (punctuation 4383 . 4384) (symbol 4372 . 4382) (bol 4370 . 4370) (bol 4308 . 4308) (bol 4238 . 4238) (bol 4235 . 4235) (symbol 4233 . 4234) (punctuation 4231 . 4232) (symbol 4212 . 4230) (bol 4210 . 4210))))
  :file "!code!vrui!Vrui!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
