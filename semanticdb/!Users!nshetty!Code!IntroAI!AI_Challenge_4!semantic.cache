;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("util" include nil nil [420 454])
            ("game" include nil nil [455 482])
            ("util" include nil nil [483 502])
            ("random" include nil nil [483 502])
            ("game" include nil nil [503 525])
            ("util" include nil nil [526 548])
            ("util" include nil nil [549 571])
            ("pacman" include nil nil [572 602])
            ("pacman" include nil nil [603 632])
            ("scoreEvaluationFunction" function
               (:documentation "
    This default evaluation function just returns the score of the state.
    The score is the same one displayed in the Pacman GUI.

    This evaluation function is meant for use with adversarial search agents
    (not reflex agents).
  "
                :arguments 
                  ( ("currentGameState" variable nil (reparse-symbol function_parameters) [662 678]))                  )
                nil [634 966])
            ("MultiAgentSearchAgent" type
               (:documentation "
    This class provides some common elements to all of your
    multi-agent searchers.  Any methods defined here will be available
    to the MinimaxPacmanAgent and AlphaBetaPacmanAgent.

    You *do not* need to make any changes here, but you can if you want to
    add functionality to all your adversarial search agents.  Please do not
    remove anything, however.

    Note: this is an abstract class: one that should not be instantiated.  It's
    only partially specified, and designed to be extended.  Agent (game.py)
    is another abstract class.
  "
                :superclasses ("Agent")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1650 1664])
                            ("self" variable nil (reparse-symbol indented_block_body) [1702 1758])
                            ("self" variable nil (reparse-symbol indented_block_body) [1763 1786])
                            ("\"*** YOUR CODE HERE IF YOU WANT TO ***\"" code nil (reparse-symbol indented_block_body) [1791 1830])
                            ("\"*** RELEVANT FOR QUESTIONS 3 AND 4***\"" code nil (reparse-symbol indented_block_body) [1835 1874]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1590 1594])
                            ("evalFn" variable nil (reparse-symbol function_parameters) [1596 1602])
                            ("depth" variable nil (reparse-symbol function_parameters) [1632 1637]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1577 1875]))                  
                :type "class")
                nil [969 1875])
            ("MinimaxAgent" type
               (:documentation "
    Your minimax agent (question 1)
  "
                :superclasses ("MultiAgentSearchAgent")
                :members 
                  ( ("getAction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1985 1989])
                            ("gameState" variable nil (reparse-symbol function_parameters) [1991 2000]))                          
                        :documentation "
      Returns the minimax action from the current gameState using self.depth
      and self.evaluationFunction.

      Here are some method calls that might be useful when implementing minimax.

      gameState.getLegalActions(agentIndex):
        Returns a list of legal actions for an agent
        agentIndex=0 means Pacman, ghosts are >= 1

      Directions.STOP:
        The stop direction, which is always legal, unless the game has ended

      gameState.generateSuccessor(agentIndex, action):
        Returns the successor game state after an agent takes an action

      gameState.getNumAgents():
        Returns the total number of agents in the game
    ")
                        (reparse-symbol indented_block_body) [1971 2810])
                    ("minMaxDecision" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2833 2837])
                            ("gameState" variable nil (reparse-symbol function_parameters) [2838 2847])
                            ("depth" variable nil (reparse-symbol function_parameters) [2848 2853]))                          )
                        (reparse-symbol indented_block_body) [2814 3369])
                    ("maxValue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3385 3389])
                            ("gameState" variable nil (reparse-symbol function_parameters) [3390 3399])
                            ("action" variable nil (reparse-symbol function_parameters) [3401 3407])
                            ("depth" variable nil (reparse-symbol function_parameters) [3409 3414])
                            ("agentIndex" variable nil (reparse-symbol function_parameters) [3415 3425]))                          )
                        (reparse-symbol indented_block_body) [3372 4144])
                    ("minValue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4160 4164])
                            ("gameState" variable nil (reparse-symbol function_parameters) [4165 4174])
                            ("action" variable nil (reparse-symbol function_parameters) [4175 4181])
                            ("depth" variable nil (reparse-symbol function_parameters) [4182 4187])
                            ("agentIndex" variable nil (reparse-symbol function_parameters) [4188 4198]))                          )
                        (reparse-symbol indented_block_body) [4147 5128]))                  
                :type "class")
                nil [1877 5128])
            ("AlphaBetaAgent" type
               (:documentation "
    Your minimax agent with alpha-beta pruning (question 2)
  "
                :superclasses ("MultiAgentSearchAgent")
                :members 
                  ( ("getAction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5280 5284])
                            ("gameState" variable nil (reparse-symbol function_parameters) [5286 5295]))                          
                        :documentation "
      Returns the minimax action using self.depth and self.evaluationFunction
    ")
                        (reparse-symbol indented_block_body) [5266 5551])
                    ("minMaxDecision" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5574 5578])
                            ("gameState" variable nil (reparse-symbol function_parameters) [5579 5588])
                            ("depth" variable nil (reparse-symbol function_parameters) [5589 5594]))                          )
                        (reparse-symbol indented_block_body) [5555 6174])
                    ("maxValue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6190 6194])
                            ("gameState" variable nil (reparse-symbol function_parameters) [6195 6204])
                            ("action" variable nil (reparse-symbol function_parameters) [6206 6212])
                            ("depth" variable nil (reparse-symbol function_parameters) [6214 6219])
                            ("agentIndex" variable nil (reparse-symbol function_parameters) [6220 6230])
                            ("alpha" variable nil (reparse-symbol function_parameters) [6231 6236])
                            ("beta" variable nil (reparse-symbol function_parameters) [6237 6241]))                          )
                        (reparse-symbol indented_block_body) [6177 6931])
                    ("minValue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6947 6951])
                            ("gameState" variable nil (reparse-symbol function_parameters) [6952 6961])
                            ("action" variable nil (reparse-symbol function_parameters) [6962 6968])
                            ("depth" variable nil (reparse-symbol function_parameters) [6969 6974])
                            ("agentIndex" variable nil (reparse-symbol function_parameters) [6975 6985])
                            ("alpha" variable nil (reparse-symbol function_parameters) [6986 6991])
                            ("beta" variable nil (reparse-symbol function_parameters) [6992 6996]))                          )
                        (reparse-symbol indented_block_body) [6934 7966]))                  
                :type "class")
                nil [5146 7966])
            ("betterEvaluationFunction" function
               (:documentation "
    Your extreme ghost-hunting, pellet-nabbing, food-gobbling, unstoppable
    evaluation function (question 3).

    You can store some additional information in a game-state using the 
    customData dictionairy. You can store this information in the getAction
    function and retrieve it here. Note that all data will be reset
    the next time getAction is called, so if your data has to be persistent
    between calls to getAction you will have to store the data in your
    search agent and then initialize the dictionairy for every call of
    getAction.

    Also note that a deep copy of the dictionairy is created for every
    call to getSuccessor, meaning that stroring large data structures in
    the dictionairy might make you code really slow. For data that should
    be initialized once and never be altered you might want to consider 
    storing in it a global variable and setting it only the first time
    getAction gets called.

    To store data in the customData dictionairy:
    currentGameState.customData['myData'] = thisIsMyData

    To get data from the customData dictionairy:
    retreivedData = currentGameState.customData['myData']

    Also, do not forget you can set some variables in the __init__ function
    of the MultiAgentSearchAgent and that your agents should still work
    on the problems provided by the autograder.
  "
                :arguments 
                  ( ("currentGameState" variable nil (reparse-symbol function_parameters) [7996 8012]))                  )
                nil [7967 9699])
            ("better" variable nil nil [9715 9748])
            ("UltimateAgent" type
               (:documentation "
    The best agent you can think of (question 4).
  "
                :superclasses ("MultiAgentSearchAgent")
                :members 
                  ( ("getAction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9873 9877])
                            ("gameState" variable nil (reparse-symbol function_parameters) [9879 9888]))                          
                        :documentation "
      Returns an action.  You can use any method you want and search to any depth you want.
      Just remember that the excercise is timed, so you have to trade off speed and computation.

      Ghosts don't behave randomly anymore, but they aren't perfect either -- they'll usually
      just make a beeline straight towards Pacman (or away from him if they're scared!)
    ")
                        (reparse-symbol indented_block_body) [9859 10317]))                  
                :type "class")
                nil [9750 10317]))          
      :file "multiAgents.py"
      :pointmax 10319
      :fsize 10318
      :lastmodtime '(22525 48230 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("sys" include nil nil [698 708])
            ("inspect" include nil nil [709 723])
            ("random" include nil nil [724 744])
            ("heapq" include nil nil [724 744])
            ("cStringIO" include nil nil [745 761])
            ("os" include nil nil [762 771])
            ("FixedRandom" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("fixedState" variable nil (reparse-symbol indented_block_body) [824 10031])
                            ("self" variable nil (reparse-symbol indented_block_body) [10040 10069])
                            ("self" code nil (reparse-symbol indented_block_body) [10078 10110]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [809 813]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [796 10111]))                  
                :type "class")
                nil [773 10111])
            ("\"\"\"
 Data structures useful for implementing SearchAgents
\"\"\"" code nil nil [10112 10173])
            ("Stack" type
               (:members 
                  ( ("\"A container with a last-in-first-out (LIFO) queuing policy.\"" code nil (reparse-symbol indented_block_body) [10192 10253])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10286 10300]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10271 10275]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10258 10301])
                    ("push" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10315 10319])
                            ("item" variable nil (reparse-symbol function_parameters) [10320 10324]))                          )
                        (reparse-symbol indented_block_body) [10306 10395])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10408 10412]))                          )
                        (reparse-symbol indented_block_body) [10400 10505])
                    ("isEmpty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10522 10526]))                          )
                        (reparse-symbol indented_block_body) [10510 10609]))                  
                :type "class")
                nil [10175 10609])
            ("Queue" type
               (:members 
                  ( ("\"A container with a first-in-first-out (FIFO) queuing policy.\"" code nil (reparse-symbol indented_block_body) [10627 10689])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10722 10736]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10707 10711]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10694 10737])
                    ("push" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10751 10755])
                            ("item" variable nil (reparse-symbol function_parameters) [10756 10760]))                          )
                        (reparse-symbol indented_block_body) [10742 10840])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10853 10857]))                          
                        :documentation "
          Dequeue the earliest enqueued item still in the queue. This
          operation removes the item from the queue.
        ")
                        (reparse-symbol indented_block_body) [10845 11038])
                    ("isEmpty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11055 11059]))                          )
                        (reparse-symbol indented_block_body) [11043 11142]))                  
                :type "class")
                nil [10610 11142])
            ("PriorityQueue" type
               (:documentation "
      Implements a priority queue data structure. Each inserted item
      has a priority associated with it and the client is usually interested
      in quick retrieval of the lowest-priority item in the queue. This
      data structure allows O(1) access to the lowest-priority item.

      Note that this PriorityQueue does not allow you to change the priority
      of an item.  However, you may insert the same item multiple times with
      different priorities.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11683 11697])
                            ("self" variable nil (reparse-symbol indented_block_body) [11706 11720]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11668 11672]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11654 11721])
                    ("push" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11735 11739])
                            ("item" variable nil (reparse-symbol function_parameters) [11741 11745])
                            ("priority" variable nil (reparse-symbol function_parameters) [11747 11755]))                          )
                        (reparse-symbol indented_block_body) [11726 12025])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12038 12042]))                          )
                        (reparse-symbol indented_block_body) [12030 12161])
                    ("isEmpty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12178 12182]))                          )
                        (reparse-symbol indented_block_body) [12166 12220]))                  
                :type "class")
                nil [11143 12220])
            ("PriorityQueueWithFunction" type
               (:documentation "
    Implements a priority queue with the same push/pop signature of the
    Queue and the Stack classes. This is designed for drop-in replacement for
    those two classes. The caller has to provide a priority function, which
    extracts each item's priority.
    "
                :superclasses ("PriorityQueue")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"priorityFunction (item) -> priority\"" code nil (reparse-symbol indented_block_body) [12597 12634])
                            ("self" variable nil (reparse-symbol indented_block_body) [12643 12683])
                            ("PriorityQueue" code nil (reparse-symbol indented_block_body) [12727 12755]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12564 12568])
                            ("priorityFunction" variable nil (reparse-symbol function_parameters) [12570 12586]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12550 12789])
                    ("push" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12803 12807])
                            ("item" variable nil (reparse-symbol function_parameters) [12809 12813]))                          )
                        (reparse-symbol indented_block_body) [12794 12961]))                  
                :type "class")
                nil [12221 12961])
            ("manhattanDistance" function (:arguments 
              ( ("xy1" variable nil (reparse-symbol function_parameters) [12986 12989])
                ("xy2" variable nil (reparse-symbol function_parameters) [12991 12994]))              ) nil [12963 13121])
            ("\"\"\"
  Data structures and functions useful for various course projects

  The search project should not need anything below this line.
\"\"\"" code nil nil [13122 13260])
            ("Counter" type
               (:documentation "
    A counter keeps track of counts for a set of keys.

    The counter class is an extension of the standard python
    dictionary type.  It is specialized to have number values
    (integers or floats), and includes a handful of additional
    functions to ease the task of counting data.  In particular,
    all keys are defaulted to have value 0.  Using a dictionary:

    a = {}
    print a['test']

    would give an error, while the Counter class analogue:

    >>> a = Counter()
    >>> print a['test']
    0

    returns the default 0 value. Note that to reference a key
    that you know is contained in the counter,
    you can still use the dictionary syntax:

    >>> a = Counter()
    >>> a['test'] = 2
    >>> print a['test']
    2

    This is very useful for counting things without initializing their counts,
    see for example:

    >>> a['blah'] += 1
    >>> print a['blah']
    1

    The counter also includes additional functionality useful in implementing
    the classifiers for this assignment.  Two counters can be added,
    subtracted or multiplied together.  See below for details.  They can
    also be normalized and their total count and arg max can be extracted.
    "
                :superclasses ("dict")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14517 14521])
                            ("idx" variable nil (reparse-symbol function_parameters) [14523 14526]))                          )
                        (reparse-symbol indented_block_body) [14501 14604])
                    ("incrementAll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14626 14630])
                            ("keys" variable nil (reparse-symbol function_parameters) [14632 14636])
                            ("count" variable nil (reparse-symbol function_parameters) [14638 14643]))                          
                        :documentation "
        Increments all elements of keys by the same count.

        >>> a = Counter()
        >>> a.incrementAll(['one','two', 'three'], 1)
        >>> a['one']
        1
        >>> a['two']
        1
        ")
                        (reparse-symbol indented_block_body) [14609 14928])
                    ("argMax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14944 14948]))                          
                        :documentation "
        Returns the key with the highest value.
        ")
                        (reparse-symbol indented_block_body) [14933 15210])
                    ("sortedKeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15230 15234]))                          
                        :documentation "
        Returns a list of keys sorted by their values.  Keys
        with the highest values will appear first.

        >>> a = Counter()
        >>> a['first'] = -2
        >>> a['second'] = 4
        >>> a['third'] = 1
        >>> a.sortedKeys()
        ['second', 'third', 'first']
        ")
                        (reparse-symbol indented_block_body) [15215 15713])
                    ("totalCount" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15733 15737]))                          
                        :documentation "
        Returns the sum of counts for all keys.
        ")
                        (reparse-symbol indented_block_body) [15718 15846])
                    ("normalize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15865 15869]))                          
                        :documentation "
        Edits the counter such that the total count of all
        keys sums to 1.  The ratio of counts for all keys
        will remain the same. Note that normalizing an empty
        Counter will result in an error.
        ")
                        (reparse-symbol indented_block_body) [15851 16260])
                    ("divideAll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16279 16283])
                            ("divisor" variable nil (reparse-symbol function_parameters) [16285 16292]))                          
                        :documentation "
        Divides all counts by divisor
        ")
                        (reparse-symbol indented_block_body) [16265 16448])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16462 16466]))                          
                        :documentation "
        Returns a copy of the counter
        ")
                        (reparse-symbol indented_block_body) [16453 16571])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16588 16592])
                            ("y" variable nil (reparse-symbol function_parameters) [16594 16595]))                          
                        :documentation "
        Multiplying two counters gives the dot product of their vectors where
        each unique label is a vector element.

        >>> a = Counter()
        >>> b = Counter()
        >>> a['first'] = -2
        >>> a['second'] = 4
        >>> b['first'] = 3
        >>> b['second'] = 5
        >>> a['third'] = 1.5
        >>> a['fourth'] = 2.5
        >>> a * b
        14
        ")
                        (reparse-symbol indented_block_body) [16576 17213])
                    ("__radd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17231 17235])
                            ("y" variable nil (reparse-symbol function_parameters) [17237 17238]))                          
                        :documentation "
        Adding another counter to a counter increments the current counter
        by the values stored in the second counter.

        >>> a = Counter()
        >>> b = Counter()
        >>> a['first'] = -2
        >>> a['second'] = 4
        >>> b['first'] = 3
        >>> b['third'] = 1
        >>> a += b
        >>> a['first']
        1
        ")
                        (reparse-symbol indented_block_body) [17218 17675])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17693 17697])
                            ("y" variable nil (reparse-symbol function_parameters) [17699 17700]))                          
                        :documentation "
        Adding two counters gives a counter with the union of all keys and
        counts of the second added to counts of the first.

        >>> a = Counter()
        >>> b = Counter()
        >>> a['first'] = -2
        >>> a['second'] = 4
        >>> b['first'] = 3
        >>> b['third'] = 1
        >>> (a + b)['first']
        1
        ")
                        (reparse-symbol indented_block_body) [17680 18378])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18396 18400])
                            ("y" variable nil (reparse-symbol function_parameters) [18402 18403]))                          
                        :documentation "
        Subtracting a counter from another gives a counter with the union of all keys and
        counts of the second subtracted from counts of the first.

        >>> a = Counter()
        >>> b = Counter()
        >>> a['first'] = -2
        >>> a['second'] = 4
        >>> b['first'] = 3
        >>> b['third'] = 1
        >>> (a - b)['first']
        -5
        ")
                        (reparse-symbol indented_block_body) [18383 19109]))                  
                :type "class")
                nil [13262 19109])
            ("raiseNotDefined" function nil nil [19110 19346])
            ("normalize" function
               (:documentation "
    normalize a vector or counter by dividing each value by the sum of all values
    "
                :arguments 
                  ( ("vectorOrCounter" variable nil (reparse-symbol function_parameters) [19361 19376]))                  )
                nil [19347 19984])
            ("nSample" function (:arguments 
              ( ("distribution" variable nil (reparse-symbol function_parameters) [19997 20009])
                ("values" variable nil (reparse-symbol function_parameters) [20011 20017])
                ("n" variable nil (reparse-symbol function_parameters) [20019 20020]))              ) nil [19985 20461])
            ("sample" function (:arguments 
              ( ("distribution" variable nil (reparse-symbol function_parameters) [20473 20485])
                ("values" variable nil (reparse-symbol function_parameters) [20487 20493]))              ) nil [20462 20897])
            ("sampleFromCounter" function (:arguments 
              ( ("ctr" variable nil (reparse-symbol function_parameters) [20920 20923]))              ) nil [20898 21012])
            ("getProbability" function
               (:documentation "
      Gives the probability of a value under a discrete distribution
      defined by (distributions, values).
    "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [21032 21037])
                    ("distribution" variable nil (reparse-symbol function_parameters) [21039 21051])
                    ("values" variable nil (reparse-symbol function_parameters) [21053 21059]))                  )
                nil [21013 21321])
            ("flipCoin" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [21336 21337]))              ) nil [21322 21382])
            ("chooseFromDistribution" function (:arguments 
              ( ("distribution" variable nil (reparse-symbol function_parameters) [21411 21423]))              ) nil [21383 21739])
            ("nearestPoint" function
               (:documentation "
    Finds the nearest grid point to a position (discretizes).
    "
                :arguments 
                  ( ("pos" variable nil (reparse-symbol function_parameters) [21758 21761]))                  )
                nil [21740 21997])
            ("sign" function
               (:documentation "
    Returns 1 or -1 depending on the sign of x
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [22008 22009]))                  )
                nil [21998 22139])
            ("arrayInvert" function
               (:documentation "
    Inverts a matrix stored as a list of lists.
    "
                :arguments 
                  ( ("array" variable nil (reparse-symbol function_parameters) [22156 22161]))                  )
                nil [22140 22390])
            ("matrixAsList" function
               (:documentation "
    Turns a matrix into a list of coordinates matching the specified value
    "
                :arguments 
                  ( ("matrix" variable nil (reparse-symbol function_parameters) [22409 22415])
                    ("value" variable nil (reparse-symbol function_parameters) [22417 22422]))                  )
                nil [22391 22756])
            ("lookup" function
               (:documentation "
    Get a method or class from any imported module from its name.
    Usage: lookup(functionName, globals())
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [22768 22772])
                    ("namespace" variable nil (reparse-symbol function_parameters) [22774 22783]))                  )
                nil [22757 23568])
            ("pause" function (:documentation "
    Pauses the output stream awaiting user feedback.
    ") nil [23569 23712])
            ("signal" include nil nil [24016 24029])
            ("time" include nil nil [24030 24041])
            ("TimeoutFunctionException" type
               (:documentation "Exception to raise on a timeout"
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [24131 24135]))                  
                :type "class")
                nil [24042 24136])
            ("TimeoutFunction" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [24212 24234])
                            ("self" variable nil (reparse-symbol indented_block_body) [24243 24267]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24178 24182])
                            ("function" variable nil (reparse-symbol function_parameters) [24184 24192])
                            ("timeout" variable nil (reparse-symbol function_parameters) [24194 24201]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24165 24268])
                    ("handle_timeout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24292 24296])
                            ("signum" variable nil (reparse-symbol function_parameters) [24298 24304])
                            ("frame" variable nil (reparse-symbol function_parameters) [24306 24311]))                          )
                        (reparse-symbol indented_block_body) [24273 24355])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24373 24377])
                            ("args" variable nil (reparse-symbol function_parameters) [24379 24384])
                            ("keyArgs" variable nil (reparse-symbol function_parameters) [24386 24395]))                          )
                        (reparse-symbol indented_block_body) [24360 25205]))                  
                :type "class")
                nil [24138 25205])
            ("_ORIGINAL_STDOUT" variable nil nil [25208 25231])
            ("_ORIGINAL_STDERR" variable nil nil [25232 25255])
            ("_MUTED" variable nil nil [25256 25270])
            ("WritableNull" type
               (:members 
                  ( ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25306 25310])
                            ("string" variable nil (reparse-symbol function_parameters) [25312 25318]))                          )
                        (reparse-symbol indented_block_body) [25296 25334]))                  
                :type "class")
                nil [25272 25334])
            ("mutePrint" function nil nil [25336 25562])
            ("unmutePrint" function nil nil [25596 25762])
            ("findModule" function (:arguments 
              ( ("function_or_class" variable nil (reparse-symbol function_parameters) [25817 25834])
                ("module_name_postfix" variable nil (reparse-symbol function_parameters) [25836 25855]))              ) nil [25802 26693])
            ("findStudentModule" function (:arguments 
              ( ("module_name_postfix" variable nil (reparse-symbol function_parameters) [26716 26735]))              ) nil [26694 27088]))          
      :file "util.py"
      :pointmax 27088
      :fsize 27087
      :lastmodtime '(21647 54398 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("util" include nil nil [1103 1121])
            ("os" include nil nil [1122 1137])
            ("time" include nil nil [1122 1137])
            ("traceback" include nil nil [1138 1154])
            ("sys" include nil nil [1155 1165])
            ("Agent" type
               (:documentation "
    An agent must define a getAction method, but may also define the
    following methods which will be called if they exist:

    def registerInitialState(self, state): # inspects the starting state
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1511 1529]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1487 1491])
                            ("index" variable nil (reparse-symbol function_parameters) [1493 1498]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1474 1530])
                    ("getAction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1549 1553])
                            ("state" variable nil (reparse-symbol function_parameters) [1555 1560]))                          
                        :documentation "
        The Agent will receive a GameState (from either {pacman, capture, sonar}.py) and
        must return an action from Directions.{North, South, East, West, Stop}
        ")
                        (reparse-symbol indented_block_body) [1535 1781]))                  
                :type "class")
                nil [1240 1781])
            ("Directions" type
               (:members 
                  ( ("NORTH" variable nil (reparse-symbol indented_block_body) [1804 1819])
                    ("SOUTH" variable nil (reparse-symbol indented_block_body) [1824 1839])
                    ("EAST" variable nil (reparse-symbol indented_block_body) [1844 1857])
                    ("WEST" variable nil (reparse-symbol indented_block_body) [1862 1875])
                    ("STOP" variable nil (reparse-symbol indented_block_body) [1880 1893])
                    ("LEFT" variable nil (reparse-symbol indented_block_body) [1899 2055])
                    ("RIGHT" variable nil (reparse-symbol indented_block_body) [2061 2112])
                    ("REVERSE" variable nil (reparse-symbol indented_block_body) [2118 2252]))                  
                :type "class")
                nil [1782 2253])
            ("Configuration" type
               (:documentation "
    A Configuration holds the (x,y) coordinate of a character, along with its
    traveling direction.

    The convention for positions, like a graph, is that (0,0) is the lower left corner, x increases
    horizontally and y increases vertically.  Therefore, north is the direction of increasing y, or (0,1).
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2651 2665])
                            ("self" variable nil (reparse-symbol indented_block_body) [2674 2700]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2620 2624])
                            ("pos" variable nil (reparse-symbol function_parameters) [2626 2629])
                            ("direction" variable nil (reparse-symbol function_parameters) [2631 2640]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2607 2701])
                    ("getPosition" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2722 2726]))                          )
                        (reparse-symbol indented_block_body) [2706 2755])
                    ("getDirection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2777 2781]))                          )
                        (reparse-symbol indented_block_body) [2760 2814])
                    ("isInteger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2833 2837]))                          )
                        (reparse-symbol indented_block_body) [2819 2906])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2922 2926])
                            ("other" variable nil (reparse-symbol function_parameters) [2928 2933]))                          )
                        (reparse-symbol indented_block_body) [2911 3052])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3070 3074]))                          )
                        (reparse-symbol indented_block_body) [3057 3169])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3186 3190]))                          )
                        (reparse-symbol indented_block_body) [3174 3256])
                    ("generateSuccessor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3283 3287])
                            ("vector" variable nil (reparse-symbol function_parameters) [3289 3295]))                          
                        :documentation "
        Generates a new configuration reached by translating the current
        configuration by the action vector.  This is a low-level call and does
        not attempt to respect the legality of the movement.

        Actions are movement vectors.
        ")
                        (reparse-symbol indented_block_body) [3261 3840]))                  
                :type "class")
                nil [2254 3840])
            ("AgentState" type
               (:documentation "
    AgentStates hold the state of an agent (configuration, speed, scared, etc).
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4020 4051])
                            ("self" variable nil (reparse-symbol indented_block_body) [4060 4099])
                            ("self" variable nil (reparse-symbol indented_block_body) [4108 4132])
                            ("self" variable nil (reparse-symbol indented_block_body) [4141 4161])
                            ("self" variable nil (reparse-symbol indented_block_body) [4170 4190]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3974 3978])
                            ("startConfiguration" variable nil (reparse-symbol function_parameters) [3980 3998])
                            ("isPacman" variable nil (reparse-symbol function_parameters) [4000 4008]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3960 4191])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4209 4213]))                          )
                        (reparse-symbol indented_block_body) [4196 4372])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4389 4393])
                            ("other" variable nil (reparse-symbol function_parameters) [4395 4400]))                          )
                        (reparse-symbol indented_block_body) [4377 4554])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4572 4576]))                          )
                        (reparse-symbol indented_block_body) [4559 4655])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4670 4674]))                          )
                        (reparse-symbol indented_block_body) [4660 4894])
                    ("getPosition" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4915 4919]))                          )
                        (reparse-symbol indented_block_body) [4899 5021])
                    ("getDirection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5043 5047]))                          )
                        (reparse-symbol indented_block_body) [5026 5099]))                  
                :type "class")
                nil [3841 5099])
            ("Grid" type
               (:documentation "
    A 2-dimensional array of objects backed by a list of lists.  Data is accessed
    via grid[x][y] where (x,y) are positions on a Pacman map with x horizontal,
    y vertical and the origin (0,0) in the bottom left corner.

    The __str__ method constructs an output that is oriented like a pacman board.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [5527 5616])
                            ("self" variable nil (reparse-symbol indented_block_body) [5624 5647])
                            ("self" variable nil (reparse-symbol indented_block_body) [5657 5675])
                            ("self" variable nil (reparse-symbol indented_block_body) [5684 5704])
                            ("self" variable nil (reparse-symbol indented_block_body) [5713 5786])
                            ("if" code nil (reparse-symbol indented_block_body) [5795 5865]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5453 5457])
                            ("width" variable nil (reparse-symbol function_parameters) [5459 5464])
                            ("height" variable nil (reparse-symbol function_parameters) [5466 5472])
                            ("initialValue" variable nil (reparse-symbol function_parameters) [5474 5486])
                            ("bitRepresentation" variable nil (reparse-symbol function_parameters) [5494 5511]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5440 5865])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5886 5890])
                            ("i" variable nil (reparse-symbol function_parameters) [5892 5893]))                          )
                        (reparse-symbol indented_block_body) [5870 5924])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5945 5949])
                            ("key" variable nil (reparse-symbol function_parameters) [5951 5954])
                            ("item" variable nil (reparse-symbol function_parameters) [5956 5960]))                          )
                        (reparse-symbol indented_block_body) [5929 5993])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6010 6014]))                          )
                        (reparse-symbol indented_block_body) [5998 6188])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6204 6208])
                            ("other" variable nil (reparse-symbol function_parameters) [6210 6215]))                          )
                        (reparse-symbol indented_block_body) [6193 6296])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6314 6318]))                          )
                        (reparse-symbol indented_block_body) [6301 6538])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6552 6556]))                          )
                        (reparse-symbol indented_block_body) [6543 6661])
                    ("deepCopy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6679 6683]))                          )
                        (reparse-symbol indented_block_body) [6666 6713])
                    ("shallowCopy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6734 6738]))                          )
                        (reparse-symbol indented_block_body) [6718 6827])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6842 6846])
                            ("item" variable nil (reparse-symbol function_parameters) [6848 6852]))                          )
                        (reparse-symbol indented_block_body) [6832 6917])
                    ("asList" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6933 6937])
                            ("key" variable nil (reparse-symbol function_parameters) [6939 6942]))                          )
                        (reparse-symbol indented_block_body) [6922 7126])
                    ("packBits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7144 7148]))                          
                        :documentation "
        Returns an efficient int list representation

        (width, height, bitPackedInts...)
        ")
                        (reparse-symbol indented_block_body) [7131 7747])
                    ("_cellIndexToPosition" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7777 7781])
                            ("index" variable nil (reparse-symbol function_parameters) [7783 7788]))                          )
                        (reparse-symbol indented_block_body) [7752 7875])
                    ("_unpackBits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7896 7900])
                            ("bits" variable nil (reparse-symbol function_parameters) [7902 7906]))                          
                        :documentation "
        Fills in data from a bit-level representation
        ")
                        (reparse-symbol indented_block_body) [7880 8273])
                    ("_unpackInt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8293 8297])
                            ("packed" variable nil (reparse-symbol function_parameters) [8299 8305])
                            ("size" variable nil (reparse-symbol function_parameters) [8307 8311]))                          )
                        (reparse-symbol indented_block_body) [8278 8649]))                  
                :type "class")
                nil [5100 8649])
            ("reconstituteGrid" function (:arguments 
              ( ("bitRep" variable nil (reparse-symbol function_parameters) [8671 8677]))              ) nil [8650 8835])
            ("Actions" type
               (:documentation "
    A collection of static methods for manipulating move actions.
    "
                :members 
                  ( ("_directions" variable nil (reparse-symbol indented_block_body) [9066 9288])
                    ("_directionsAsList" variable nil (reparse-symbol indented_block_body) [9294 9333])
                    ("TOLERANCE" variable nil (reparse-symbol indented_block_body) [9339 9355])
                    ("reverseDirection" function (:arguments 
                      ( ("action" variable nil (reparse-symbol function_parameters) [9382 9388]))                      ) (reparse-symbol indented_block_body) [9361 9709])
                    ("reverseDirection" variable nil (reparse-symbol indented_block_body) [9713 9762])
                    ("vectorToDirection" function (:arguments 
                      ( ("vector" variable nil (reparse-symbol function_parameters) [9790 9796]))                      ) (reparse-symbol indented_block_body) [9768 10072])
                    ("vectorToDirection" variable nil (reparse-symbol indented_block_body) [10076 10127])
                    ("directionToVector" function (:arguments 
                      ( ("direction" variable nil (reparse-symbol function_parameters) [10155 10164])
                        ("speed" variable nil (reparse-symbol function_parameters) [10166 10171]))                      ) (reparse-symbol indented_block_body) [10133 10269])
                    ("directionToVector" variable nil (reparse-symbol indented_block_body) [10273 10324])
                    ("getPossibleActions" function (:arguments 
                      ( ("config" variable nil (reparse-symbol function_parameters) [10353 10359])
                        ("walls" variable nil (reparse-symbol function_parameters) [10361 10366]))                      ) (reparse-symbol indented_block_body) [10330 10875])
                    ("getPossibleActions" variable nil (reparse-symbol indented_block_body) [10880 10933])
                    ("getLegalNeighbors" function (:arguments 
                      ( ("position" variable nil (reparse-symbol function_parameters) [10961 10969])
                        ("walls" variable nil (reparse-symbol function_parameters) [10971 10976]))                      ) (reparse-symbol indented_block_body) [10939 11440])
                    ("getLegalNeighbors" variable nil (reparse-symbol indented_block_body) [11444 11495])
                    ("getSuccessor" function (:arguments 
                      ( ("position" variable nil (reparse-symbol function_parameters) [11518 11526])
                        ("action" variable nil (reparse-symbol function_parameters) [11528 11534]))                      ) (reparse-symbol indented_block_body) [11501 11644])
                    ("getSuccessor" variable nil (reparse-symbol indented_block_body) [11648 11689]))                  
                :type "class")
                nil [8948 11690])
            ("GameStateData" type
               (:documentation "

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Generates a new data packet by copying information from its predecessor.
        \"\"\"" code nil (reparse-symbol indented_block_body) [11781 11877])
                            ("if" code nil (reparse-symbol indented_block_body) [11886 12264])
                            ("self" variable nil (reparse-symbol indented_block_body) [12273 12295])
                            ("self" variable nil (reparse-symbol indented_block_body) [12304 12326])
                            ("self" variable nil (reparse-symbol indented_block_body) [12335 12360])
                            ("self" variable nil (reparse-symbol indented_block_body) [12369 12392])
                            ("self" variable nil (reparse-symbol indented_block_body) [12401 12419])
                            ("self" variable nil (reparse-symbol indented_block_body) [12428 12445])
                            ("self" variable nil (reparse-symbol indented_block_body) [12454 12474]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11747 11751])
                            ("prevState" variable nil (reparse-symbol function_parameters) [11753 11762]))                          
                        :documentation "
        Generates a new data packet by copying information from its predecessor.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11733 12475])
                    ("deepCopy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12494 12498]))                          )
                        (reparse-symbol indented_block_body) [12480 12870])
                    ("copyAgentStates" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12896 12900])
                            ("agentStates" variable nil (reparse-symbol function_parameters) [12902 12913]))                          )
                        (reparse-symbol indented_block_body) [12875 13063])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13080 13084])
                            ("other" variable nil (reparse-symbol function_parameters) [13086 13091]))                          
                        :documentation "
        Allows two states to be compared.
        ")
                        (reparse-symbol indented_block_body) [13068 13495])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13514 13518]))                          
                        :documentation "
        Allows states to be keys of dictionaries.
        ")
                        (reparse-symbol indented_block_body) [13500 13928])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13946 13950]))                          )
                        (reparse-symbol indented_block_body) [13933 14917])
                    ("_foodWallStr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14940 14944])
                            ("hasFood" variable nil (reparse-symbol function_parameters) [14946 14953])
                            ("hasWall" variable nil (reparse-symbol function_parameters) [14955 14962]))                          )
                        (reparse-symbol indented_block_body) [14922 15091])
                    ("_pacStr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15109 15113])
                            ("dir" variable nil (reparse-symbol function_parameters) [15115 15118]))                          )
                        (reparse-symbol indented_block_body) [15096 15317])
                    ("_ghostStr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15337 15341])
                            ("dir" variable nil (reparse-symbol function_parameters) [15343 15346]))                          )
                        (reparse-symbol indented_block_body) [15322 15564])
                    ("initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15585 15589])
                            ("layout" variable nil (reparse-symbol function_parameters) [15591 15597])
                            ("numGhostAgents" variable nil (reparse-symbol function_parameters) [15599 15613]))                          
                        :documentation "
        Creates an initial game state from a layout array (see layout.py).
        ")
                        (reparse-symbol indented_block_body) [15569 16318]))                  
                :type "class")
                nil [11691 16318])
            ("try" code nil nil [16319 16402])
            ("Game" type
               (:documentation "
    The Game manages the control flow, soliciting actions from agents.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [16619 16644])
                            ("self" variable nil (reparse-symbol indented_block_body) [16653 16673])
                            ("self" variable nil (reparse-symbol indented_block_body) [16682 16704])
                            ("self" variable nil (reparse-symbol indented_block_body) [16713 16731])
                            ("self" variable nil (reparse-symbol indented_block_body) [16740 16774])
                            ("self" variable nil (reparse-symbol indented_block_body) [16783 16804])
                            ("self" variable nil (reparse-symbol indented_block_body) [16813 16841])
                            ("self" variable nil (reparse-symbol indented_block_body) [16850 16888])
                            ("self" variable nil (reparse-symbol indented_block_body) [16897 16918])
                            ("self" variable nil (reparse-symbol indented_block_body) [16927 16973])
                            ("self" variable nil (reparse-symbol indented_block_body) [16982 17035])
                            ("self" variable nil (reparse-symbol indented_block_body) [17044 17069])
                            ("cStringIO" include nil (reparse-symbol indented_block_body) [17078 17094])
                            ("self" variable nil (reparse-symbol indented_block_body) [17103 17164]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16521 16525])
                            ("agents" variable nil (reparse-symbol function_parameters) [16527 16533])
                            ("display" variable nil (reparse-symbol function_parameters) [16535 16542])
                            ("rules" variable nil (reparse-symbol function_parameters) [16544 16549])
                            ("startingIndex" variable nil (reparse-symbol function_parameters) [16551 16564])
                            ("muteAgents" variable nil (reparse-symbol function_parameters) [16568 16578])
                            ("catchExceptions" variable nil (reparse-symbol function_parameters) [16586 16601]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16507 17165])
                    ("getProgress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17186 17190]))                          )
                        (reparse-symbol indented_block_body) [17170 17304])
                    ("_agentCrash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17326 17330])
                            ("agentIndex" variable nil (reparse-symbol function_parameters) [17332 17342])
                            ("quiet" variable nil (reparse-symbol function_parameters) [17344 17349]))                          )
                        (reparse-symbol indented_block_body) [17309 17563])
                    ("OLD_STDOUT" variable nil (reparse-symbol indented_block_body) [17568 17585])
                    ("OLD_STDERR" variable nil (reparse-symbol indented_block_body) [17590 17607])
                    ("mute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17622 17626])
                            ("agentIndex" variable nil (reparse-symbol function_parameters) [17628 17638]))                          )
                        (reparse-symbol indented_block_body) [17613 17907])
                    ("unmute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17923 17927]))                          )
                        (reparse-symbol indented_block_body) [17912 18115])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18130 18134]))                          
                        :documentation "
        Main control loop for game play.
        ")
                        (reparse-symbol indented_block_body) [18121 25585]))                  
                :type "class")
                nil [16403 25585]))          
      :file "game.py"
      :pointmax 25585
      :fsize 25584
      :lastmodtime '(21076 61114 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("pacman" include nil nil [714 743])
            ("game" include nil nil [744 766])
            ("random" include nil nil [767 780])
            ("game" include nil nil [781 792])
            ("util" include nil nil [793 804])
            ("LeftTurnAgent" type
               (:superclasses ("game.Agent")
                :members 
                  ( ("\"An agent that turns left at every opportunity\"" code nil (reparse-symbol indented_block_body) [843 890])
                    ("getAction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [910 914])
                            ("state" variable nil (reparse-symbol function_parameters) [916 921]))                          )
                        (reparse-symbol indented_block_body) [896 1406]))                  
                :type "class")
                nil [806 1406])
            ("GreedyAgent" type
               (:superclasses ("Agent")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1491 1547])
                            ("assert" code nil (reparse-symbol indented_block_body) [1556 1594]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1450 1454])
                            ("evalFn" variable nil (reparse-symbol function_parameters) [1456 1462]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1437 1595])
                    ("getAction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1614 1618])
                            ("state" variable nil (reparse-symbol function_parameters) [1620 1625]))                          )
                        (reparse-symbol indented_block_body) [1600 2111]))                  
                :type "class")
                nil [1407 2111])
            ("scoreEvaluation" function (:arguments 
              ( ("state" variable nil (reparse-symbol function_parameters) [2132 2137]))              ) nil [2112 2168]))          
      :file "pacmanAgents.py"
      :pointmax 2168
      :fsize 2167
      :lastmodtime '(20977 49630 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Pacman.py holds the logic for the classic pacman game along with the main
code to run a game.  This file is divided into three sections:

  (i)  Your interface to the pacman world:
          Pacman is a complex environment.  You probably don't want to
          read through all of the code we wrote to make the game runs
          correctly.  This section contains the parts of the code
          that you will need to understand in order to complete the
          project.  There is also some code in game.py that you should
          understand.

  (ii)  The hidden secrets of pacman:
          This section contains all of the logic code that the pacman
          environment uses to decide who can move where, who dies when
          things collide, etc.  You shouldn't need to read this section
          of code, but you can if you want.

  (iii) Framework to start a game:
          The final section contains the code for reading the command
          you use to set up the game, then starting up a new game, along with
          linking in all the external parts (agent functions, graphics).
          Check this section out to see all the options available to you.

To play your first game, type 'python pacman.py' from the command line.
The keys are 'a', 's', 'd', and 'w' to move (or arrow keys).  Have fun!
\"\"\"" code nil nil [702 2030])
            ("game" include nil nil [2031 2061])
            ("game" include nil nil [2062 2083])
            ("game" include nil nil [2084 2111])
            ("game" include nil nil [2112 2136])
            ("util" include nil nil [2137 2166])
            ("util" include nil nil [2167 2201])
            ("layout" include nil nil [2202 2221])
            ("util" include nil nil [2202 2221])
            ("copy" include nil nil [2222 2263])
            ("os" include nil nil [2222 2263])
            ("random" include nil nil [2222 2263])
            ("time" include nil nil [2222 2263])
            ("types" include nil nil [2222 2263])
            ("sys" include nil nil [2222 2263])
            ("GameState" type
               (:documentation "
    A GameState specifies the full game state, including the food, capsules,
    agent configurations and score changes.

    GameStates are used by the Game object to capture the actual state of the game and
    can be used by agents to reason about the game.

    Much of the information in a GameState is stored in a GameStateData object.  We
    strongly suggest that you access that data via the accessor methods below rather
    than referring to the GameStateData object directly.

    Note that in classic Pacman, Pacman is always agent 0.
    "
                :members 
                  ( ("explored" variable nil (reparse-symbol indented_block_body) [3262 3278])
                    ("getAndResetExplored" function nil (reparse-symbol indented_block_body) [3283 3404])
                    ("getAndResetExplored" variable nil (reparse-symbol indented_block_body) [3408 3463])
                    ("getLegalActions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3490 3494])
                            ("agentIndex" variable nil (reparse-symbol function_parameters) [3496 3506]))                          
                        :documentation "
        Returns the legal actions for the agent specified.
        ")
                        (reparse-symbol indented_block_body) [3469 3869])
                    ("generateSuccessor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3897 3901])
                            ("agentIndex" variable nil (reparse-symbol function_parameters) [3903 3913])
                            ("action" variable nil (reparse-symbol function_parameters) [3915 3921]))                          
                        :documentation "
        Returns the successor state after the specified agent takes the action.
        ")
                        (reparse-symbol indented_block_body) [3874 5129])
                    ("getLegalPacmanActions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5161 5165]))                          )
                        (reparse-symbol indented_block_body) [5134 5210])
                    ("generatePacmanSuccessor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5244 5248])
                            ("action" variable nil (reparse-symbol function_parameters) [5250 5256]))                          
                        :documentation "
        Generates the successor state after the specified pacman move
        ")
                        (reparse-symbol indented_block_body) [5215 5405])
                    ("getPacmanState" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5430 5434]))                          
                        :documentation "
        Returns an AgentState object for pacman (in game.py)

        state.pos gives the current position
        state.direction gives the travel vector
        ")
                        (reparse-symbol indented_block_body) [5410 5664])
                    ("getPacmanPosition" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5692 5696]))                          )
                        (reparse-symbol indented_block_body) [5669 5754])
                    ("getGhostStates" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5779 5783]))                          )
                        (reparse-symbol indented_block_body) [5759 5828])
                    ("getGhostState" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5852 5856])
                            ("agentIndex" variable nil (reparse-symbol function_parameters) [5858 5868]))                          )
                        (reparse-symbol indented_block_body) [5833 6055])
                    ("getGhostPosition" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6082 6086])
                            ("agentIndex" variable nil (reparse-symbol function_parameters) [6088 6098]))                          )
                        (reparse-symbol indented_block_body) [6060 6266])
                    ("getGhostPositions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6293 6297]))                          )
                        (reparse-symbol indented_block_body) [6271 6364])
                    ("getNumGhostEaten" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6390 6394]))                          )
                        (reparse-symbol indented_block_body) [6369 6432])
                    ("getNumAgents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6455 6459]))                          )
                        (reparse-symbol indented_block_body) [6437 6507])
                    ("getScore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6526 6530]))                          )
                        (reparse-symbol indented_block_body) [6512 6572])
                    ("getCapsules" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6593 6597]))                          
                        :documentation "
        Returns a list of positions (x,y) of the remaining capsules.
        ")
                        (reparse-symbol indented_block_body) [6577 6727])
                    ("getNumFood" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6748 6752]))                          )
                        (reparse-symbol indented_block_body) [6732 6794])
                    ("getFood" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6811 6815]))                          
                        :documentation "
        Returns a Grid of boolean food indicator variables.

        Grids can be accessed via list notation, so to check
        if there is food at (x,y), just call

        currentFood = state.getFood()
        if currentFood[x][y] == True: ...
        ")
                        (reparse-symbol indented_block_body) [6799 7120])
                    ("getWalls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7138 7142]))                          
                        :documentation "
        Returns a Grid of boolean wall indicator variables.

        Grids can be accessed via list notation, so to check
        if there is a wall at (x,y), just call

        walls = state.getWalls()
        if walls[x][y] == True: ...
        ")
                        (reparse-symbol indented_block_body) [7125 7446])
                    ("hasFood" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7463 7467])
                            ("x" variable nil (reparse-symbol function_parameters) [7469 7470])
                            ("y" variable nil (reparse-symbol function_parameters) [7472 7473]))                          )
                        (reparse-symbol indented_block_body) [7451 7512])
                    ("hasWall" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7529 7533])
                            ("x" variable nil (reparse-symbol function_parameters) [7535 7536])
                            ("y" variable nil (reparse-symbol function_parameters) [7538 7539]))                          )
                        (reparse-symbol indented_block_body) [7517 7586])
                    ("isLose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7603 7607]))                          )
                        (reparse-symbol indented_block_body) [7591 7642])
                    ("isWin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7658 7662]))                          )
                        (reparse-symbol indented_block_body) [7647 7696])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Generates a new state by copying information from its predecessor.
        \"\"\"" code nil (reparse-symbol indented_block_body) [7950 8040])
                            ("if" code nil (reparse-symbol indented_block_body) [8049 8294]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7916 7920])
                            ("prevState" variable nil (reparse-symbol function_parameters) [7922 7931]))                          
                        :documentation "
        Generates a new state by copying information from its predecessor.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7902 8294])
                    ("deepCopy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8313 8317]))                          )
                        (reparse-symbol indented_block_body) [8299 8418])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8435 8439])
                            ("other" variable nil (reparse-symbol function_parameters) [8441 8446]))                          
                        :documentation "
        Allows two states to be compared.
        ")
                        (reparse-symbol indented_block_body) [8423 8582])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8601 8605]))                          
                        :documentation "
        Allows states to be keys of dictionaries.
        ")
                        (reparse-symbol indented_block_body) [8587 8716])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8734 8738]))                          )
                        (reparse-symbol indented_block_body) [8721 8773])
                    ("initialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8794 8798])
                            ("layout" variable nil (reparse-symbol function_parameters) [8800 8806])
                            ("numGhostAgents" variable nil (reparse-symbol function_parameters) [8808 8822]))                          
                        :documentation "
        Creates an initial game state from a layout array (see layout.py).
        ")
                        (reparse-symbol indented_block_body) [8778 8983]))                  
                :type "class")
                nil [2422 8983])
            ("SCARED_TIME" variable nil nil [9370 9386])
            ("COLLISION_TOLERANCE" variable nil nil [9416 9441])
            ("TIME_PENALTY" variable nil nil [9487 9503])
            ("ClassicGameRules" type
               (:documentation "
    These game rules manage the control flow of a game, deciding when
    and how the game starts and ends.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9732 9754]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9705 9709])
                            ("timeout" variable nil (reparse-symbol function_parameters) [9711 9718]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9692 9755])
                    ("newGame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9773 9777])
                            ("layout" variable nil (reparse-symbol function_parameters) [9779 9785])
                            ("pacmanAgent" variable nil (reparse-symbol function_parameters) [9787 9798])
                            ("ghostAgents" variable nil (reparse-symbol function_parameters) [9800 9811])
                            ("display" variable nil (reparse-symbol function_parameters) [9813 9820])
                            ("quiet" variable nil (reparse-symbol function_parameters) [9822 9827])
                            ("catchExceptions" variable nil (reparse-symbol function_parameters) [9837 9852]))                          )
                        (reparse-symbol indented_block_body) [9760 10222])
                    ("process" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10239 10243])
                            ("state" variable nil (reparse-symbol function_parameters) [10245 10250])
                            ("game" variable nil (reparse-symbol function_parameters) [10252 10256]))                          
                        :documentation "
        Checks to see whether it is time to end the game.
        ")
                        (reparse-symbol indented_block_body) [10227 10439])
                    ("win" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10453 10457])
                            ("state" variable nil (reparse-symbol function_parameters) [10459 10464])
                            ("game" variable nil (reparse-symbol function_parameters) [10466 10470]))                          )
                        (reparse-symbol indented_block_body) [10444 10594])
                    ("lose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10609 10613])
                            ("state" variable nil (reparse-symbol function_parameters) [10615 10620])
                            ("game" variable nil (reparse-symbol function_parameters) [10622 10626]))                          )
                        (reparse-symbol indented_block_body) [10599 10736])
                    ("getProgress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10757 10761])
                            ("game" variable nil (reparse-symbol function_parameters) [10763 10767]))                          )
                        (reparse-symbol indented_block_body) [10741 10849])
                    ("agentCrash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10869 10873])
                            ("game" variable nil (reparse-symbol function_parameters) [10875 10879])
                            ("agentIndex" variable nil (reparse-symbol function_parameters) [10881 10891]))                          )
                        (reparse-symbol indented_block_body) [10854 11007])
                    ("getMaxTotalTime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11032 11036])
                            ("agentIndex" variable nil (reparse-symbol function_parameters) [11038 11048]))                          )
                        (reparse-symbol indented_block_body) [11012 11079])
                    ("getMaxStartupTime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11106 11110])
                            ("agentIndex" variable nil (reparse-symbol function_parameters) [11112 11122]))                          )
                        (reparse-symbol indented_block_body) [11084 11153])
                    ("getMoveWarningTime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11181 11185])
                            ("agentIndex" variable nil (reparse-symbol function_parameters) [11187 11197]))                          )
                        (reparse-symbol indented_block_body) [11158 11228])
                    ("getMoveTimeout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11252 11256])
                            ("agentIndex" variable nil (reparse-symbol function_parameters) [11258 11268]))                          )
                        (reparse-symbol indented_block_body) [11233 11299])
                    ("getMaxTimeWarnings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11327 11331])
                            ("agentIndex" variable nil (reparse-symbol function_parameters) [11333 11343]))                          )
                        (reparse-symbol indented_block_body) [11304 11363]))                  
                :type "class")
                nil [9540 11363])
            ("PacmanRules" type
               (:documentation "
    These functions govern how pacman interacts with his environment under
    the classic game rules.
    "
                :members 
                  ( ("PACMAN_SPEED" variable nil (reparse-symbol indented_block_body) [11506 11520])
                    ("getLegalActions" function
                       (:documentation "
        Returns a list of possible actions.
        "
                        :arguments 
                          ( ("state" variable nil (reparse-symbol function_parameters) [11547 11552]))                          )
                        (reparse-symbol indented_block_body) [11526 11731])
                    ("getLegalActions" variable nil (reparse-symbol indented_block_body) [11735 11784])
                    ("applyAction" function
                       (:documentation "
        Edits the state to reflect the results of the action.
        "
                        :arguments 
                          ( ("state" variable nil (reparse-symbol function_parameters) [11807 11812])
                            ("action" variable nil (reparse-symbol function_parameters) [11814 11820]))                          )
                        (reparse-symbol indented_block_body) [11790 12546])
                    ("applyAction" variable nil (reparse-symbol indented_block_body) [12550 12591])
                    ("consume" function (:arguments 
                      ( ("position" variable nil (reparse-symbol function_parameters) [12610 12618])
                        ("state" variable nil (reparse-symbol function_parameters) [12620 12625]))                      ) (reparse-symbol indented_block_body) [12597 13455])
                    ("consume" variable nil (reparse-symbol indented_block_body) [13459 13492]))                  
                :type "class")
                nil [11364 13493])
            ("GhostRules" type
               (:documentation "
    These functions dictate how ghosts interact with their environment.
    "
                :members 
                  ( ("GHOST_SPEED" variable nil (reparse-symbol indented_block_body) [13604 13619])
                    ("getLegalActions" function
                       (:documentation "
        Ghosts cannot stop, and cannot turn around unless they
        reach a dead end, but can turn 90 degrees at intersections.
        "
                        :arguments 
                          ( ("state" variable nil (reparse-symbol function_parameters) [13645 13650])
                            ("ghostIndex" variable nil (reparse-symbol function_parameters) [13652 13662]))                          )
                        (reparse-symbol indented_block_body) [13624 14279])
                    ("getLegalActions" variable nil (reparse-symbol indented_block_body) [14283 14332])
                    ("applyAction" function (:arguments 
                      ( ("state" variable nil (reparse-symbol function_parameters) [14355 14360])
                        ("action" variable nil (reparse-symbol function_parameters) [14362 14368])
                        ("ghostIndex" variable nil (reparse-symbol function_parameters) [14370 14380]))                      ) (reparse-symbol indented_block_body) [14338 14843])
                    ("applyAction" variable nil (reparse-symbol indented_block_body) [14847 14888])
                    ("decrementTimer" function (:arguments 
                      ( ("ghostState" variable nil (reparse-symbol function_parameters) [14914 14924]))                      ) (reparse-symbol indented_block_body) [14894 15130])
                    ("decrementTimer" variable nil (reparse-symbol indented_block_body) [15134 15181])
                    ("checkDeath" function (:arguments 
                      ( ("state" variable nil (reparse-symbol function_parameters) [15203 15208])
                        ("agentIndex" variable nil (reparse-symbol function_parameters) [15210 15220]))                      ) (reparse-symbol indented_block_body) [15187 15957])
                    ("checkDeath" variable nil (reparse-symbol indented_block_body) [15961 16000])
                    ("collide" function (:arguments 
                      ( ("state" variable nil (reparse-symbol function_parameters) [16019 16024])
                        ("ghostState" variable nil (reparse-symbol function_parameters) [16026 16036])
                        ("agentIndex" variable nil (reparse-symbol function_parameters) [16038 16048]))                      ) (reparse-symbol indented_block_body) [16006 16484])
                    ("collide" variable nil (reparse-symbol indented_block_body) [16488 16521])
                    ("canKill" function (:arguments 
                      ( ("pacmanPosition" variable nil (reparse-symbol function_parameters) [16540 16554])
                        ("ghostPosition" variable nil (reparse-symbol function_parameters) [16556 16569]))                      ) (reparse-symbol indented_block_body) [16527 16662])
                    ("canKill" variable nil (reparse-symbol indented_block_body) [16666 16699])
                    ("placeGhost" function (:arguments 
                      ( ("state" variable nil (reparse-symbol function_parameters) [16720 16725])
                        ("ghostState" variable nil (reparse-symbol function_parameters) [16727 16737]))                      ) (reparse-symbol indented_block_body) [16705 16792])
                    ("placeGhost" variable nil (reparse-symbol indented_block_body) [16796 16835]))                  
                :type "class")
                nil [13494 16836])
            ("default" function (:arguments 
              ( ("str" variable nil (reparse-symbol function_parameters) [16940 16943]))              ) nil [16928 16986])
            ("parseAgentArgs" function (:arguments 
              ( ("str" variable nil (reparse-symbol function_parameters) [17006 17009]))              ) nil [16987 17243])
            ("readCommand" function
               (:documentation "
    Processes the command used to run pacman from the command line.
    "
                :arguments 
                  ( ("argv" variable nil (reparse-symbol function_parameters) [17261 17265]))                  )
                nil [17244 23163])
            ("loadAgent" function (:arguments 
              ( ("pacman" variable nil (reparse-symbol function_parameters) [23178 23184])
                ("nographics" variable nil (reparse-symbol function_parameters) [23186 23196]))              ) nil [23164 24171])
            ("replayGame" function (:arguments 
              ( ("layout" variable nil (reparse-symbol function_parameters) [24188 24194])
                ("actions" variable nil (reparse-symbol function_parameters) [24196 24203])
                ("display" variable nil (reparse-symbol function_parameters) [24205 24212]))              ) nil [24172 24826])
            ("runGames" function (:arguments 
              ( ("layout" variable nil (reparse-symbol function_parameters) [24841 24847])
                ("pacman" variable nil (reparse-symbol function_parameters) [24849 24855])
                ("ghosts" variable nil (reparse-symbol function_parameters) [24857 24863])
                ("display" variable nil (reparse-symbol function_parameters) [24865 24872])
                ("numGames" variable nil (reparse-symbol function_parameters) [24874 24882])
                ("record" variable nil (reparse-symbol function_parameters) [24884 24890])
                ("numTraining" variable nil (reparse-symbol function_parameters) [24892 24903])
                ("catchExceptions" variable nil (reparse-symbol function_parameters) [24909 24924])
                ("timeout" variable nil (reparse-symbol function_parameters) [24932 24939]))              ) nil [24827 26403])
            ("if" code nil nil [26404 26796]))          
      :file "pacman.py"
      :pointmax 26796
      :fsize 26795
      :lastmodtime '(21123 49911 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "layout.py"
      :fsize 5755
      :lastmodtime '(20977 49630 0 0)))
  :file "!Users!nshetty!Code!IntroAI!AI_Challenge_4!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
